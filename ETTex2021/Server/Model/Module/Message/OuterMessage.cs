// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: OuterMessage.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using scg = global::System.Collections.Generic;
namespace ETModel {

  #region Enums
  public enum SpecialFishFlag {
    Null = 0,
    /// <summary>
    //// &lt;summary>
    //// 金玉满堂
    //// &lt;/summary>
    /// </summary>
    JinYuManTang = 1,
    /// <summary>
    //// &lt;summary>
    //// 一石三鱼
    //// &lt;/summary>
    /// </summary>
    YiShiSanYu = 2,
    /// <summary>
    //// &lt;summary>
    //// 一箭双雕
    //// &lt;/summary>
    /// </summary>
    YiJianShuangDiao = 3,
    /// <summary>
    //// &lt;summary>
    //// 大闹天空
    //// &lt;/summary>
    /// </summary>
    DaNaoTianGong = 4,
    /// <summary>
    //// &lt;summary>
    //// 闪电连锁
    //// &lt;/summary>
    /// </summary>
    ShanDianLianSuo = 5,
  }

  #endregion

  #region Messages
  public partial class C2SS_ActorRPCRequest : pb::IMessage {
    private static readonly pb::MessageParser<C2SS_ActorRPCRequest> _parser = new pb::MessageParser<C2SS_ActorRPCRequest>(() => (C2SS_ActorRPCRequest)MessagePool.Instance.Fetch(typeof(C2SS_ActorRPCRequest)));
    public static pb::MessageParser<C2SS_ActorRPCRequest> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long actorId_;
    public long ActorId {
      get { return actorId_; }
      set {
        actorId_ = value;
      }
    }

    private string request_ = "";
    public string Request {
      get { return request_; }
      set {
        request_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Request.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Request);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (ActorId != 0L) {
        output.WriteRawTag(232, 5);
        output.WriteInt64(ActorId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (ActorId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ActorId);
      }
      if (Request.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Request);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      request_ = "";
      rpcId_ = 0;
      actorId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Request = input.ReadString();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 744: {
            ActorId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public partial class SS2C_ActorRPCReply : pb::IMessage {
    private static readonly pb::MessageParser<SS2C_ActorRPCReply> _parser = new pb::MessageParser<SS2C_ActorRPCReply>(() => (SS2C_ActorRPCReply)MessagePool.Instance.Fetch(typeof(SS2C_ActorRPCReply)));
    public static pb::MessageParser<SS2C_ActorRPCReply> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private int error_;
    public int Error {
      get { return error_; }
      set {
        error_ = value;
      }
    }

    private string message_ = "";
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (Error != 0) {
        output.WriteRawTag(216, 5);
        output.WriteInt32(Error);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(226, 5);
        output.WriteString(Message);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (Error != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Error);
      }
      if (Message.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      rpcId_ = 0;
      error_ = 0;
      message_ = "";
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 728: {
            Error = input.ReadInt32();
            break;
          }
          case 738: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public partial class SS2C_ActorMessage : pb::IMessage {
    private static readonly pb::MessageParser<SS2C_ActorMessage> _parser = new pb::MessageParser<SS2C_ActorMessage>(() => (SS2C_ActorMessage)MessagePool.Instance.Fetch(typeof(SS2C_ActorMessage)));
    public static pb::MessageParser<SS2C_ActorMessage> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long actorId_;
    public long ActorId {
      get { return actorId_; }
      set {
        actorId_ = value;
      }
    }

    private static readonly pb::FieldCodec<global::ETModel.BroadcastInfo> _repeated_info_codec
        = pb::FieldCodec.ForMessage(10, global::ETModel.BroadcastInfo.Parser);
    private pbc::RepeatedField<global::ETModel.BroadcastInfo> info_ = new pbc::RepeatedField<global::ETModel.BroadcastInfo>();
    public pbc::RepeatedField<global::ETModel.BroadcastInfo> Info {
      get { return info_; }
      set { info_ = value; }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      info_.WriteTo(output, _repeated_info_codec);
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (ActorId != 0L) {
        output.WriteRawTag(232, 5);
        output.WriteInt64(ActorId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (ActorId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ActorId);
      }
      size += info_.CalculateSize(_repeated_info_codec);
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      for (int i = 0; i < info_.Count; i++) { MessagePool.Instance.Recycle(info_[i]); }
      info_.Clear();
      rpcId_ = 0;
      actorId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            info_.AddEntriesFrom(input, _repeated_info_codec);
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 744: {
            ActorId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public partial class BroadcastInfo : pb::IMessage {
    private static readonly pb::MessageParser<BroadcastInfo> _parser = new pb::MessageParser<BroadcastInfo>(() => (BroadcastInfo)MessagePool.Instance.Fetch(typeof(BroadcastInfo)));
    public static pb::MessageParser<BroadcastInfo> Parser { get { return _parser; } }

    private long unitId_;
    public long UnitId {
      get { return unitId_; }
      set {
        unitId_ = value;
      }
    }

    private string message_ = "";
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (UnitId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(UnitId);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Message);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (UnitId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(UnitId);
      }
      if (Message.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      unitId_ = 0;
      message_ = "";
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            UnitId = input.ReadInt64();
            break;
          }
          case 18: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public partial class C2SS_ActorMessage : pb::IMessage {
    private static readonly pb::MessageParser<C2SS_ActorMessage> _parser = new pb::MessageParser<C2SS_ActorMessage>(() => (C2SS_ActorMessage)MessagePool.Instance.Fetch(typeof(C2SS_ActorMessage)));
    public static pb::MessageParser<C2SS_ActorMessage> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long actorId_;
    public long ActorId {
      get { return actorId_; }
      set {
        actorId_ = value;
      }
    }

    private string message_ = "";
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (ActorId != 0L) {
        output.WriteRawTag(232, 5);
        output.WriteInt64(ActorId);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(242, 5);
        output.WriteString(Message);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (ActorId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ActorId);
      }
      if (Message.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      rpcId_ = 0;
      actorId_ = 0;
      message_ = "";
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 744: {
            ActorId = input.ReadInt64();
            break;
          }
          case 754: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public partial class C2M_TestRequest : pb::IMessage {
    private static readonly pb::MessageParser<C2M_TestRequest> _parser = new pb::MessageParser<C2M_TestRequest>(() => (C2M_TestRequest)MessagePool.Instance.Fetch(typeof(C2M_TestRequest)));
    public static pb::MessageParser<C2M_TestRequest> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long actorId_;
    public long ActorId {
      get { return actorId_; }
      set {
        actorId_ = value;
      }
    }

    private string request_ = "";
    public string Request {
      get { return request_; }
      set {
        request_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Request.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Request);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (ActorId != 0L) {
        output.WriteRawTag(232, 5);
        output.WriteInt64(ActorId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (ActorId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ActorId);
      }
      if (Request.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Request);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      request_ = "";
      rpcId_ = 0;
      actorId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Request = input.ReadString();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 744: {
            ActorId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public partial class M2C_TestResponse : pb::IMessage {
    private static readonly pb::MessageParser<M2C_TestResponse> _parser = new pb::MessageParser<M2C_TestResponse>(() => (M2C_TestResponse)MessagePool.Instance.Fetch(typeof(M2C_TestResponse)));
    public static pb::MessageParser<M2C_TestResponse> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private int error_;
    public int Error {
      get { return error_; }
      set {
        error_ = value;
      }
    }

    private string message_ = "";
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private string response_ = "";
    public string Response {
      get { return response_; }
      set {
        response_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Response.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Response);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (Error != 0) {
        output.WriteRawTag(216, 5);
        output.WriteInt32(Error);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(226, 5);
        output.WriteString(Message);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (Error != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Error);
      }
      if (Message.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      if (Response.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Response);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      response_ = "";
      rpcId_ = 0;
      error_ = 0;
      message_ = "";
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Response = input.ReadString();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 728: {
            Error = input.ReadInt32();
            break;
          }
          case 738: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public partial class Actor_TransferRequest : pb::IMessage {
    private static readonly pb::MessageParser<Actor_TransferRequest> _parser = new pb::MessageParser<Actor_TransferRequest>(() => (Actor_TransferRequest)MessagePool.Instance.Fetch(typeof(Actor_TransferRequest)));
    public static pb::MessageParser<Actor_TransferRequest> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long actorId_;
    public long ActorId {
      get { return actorId_; }
      set {
        actorId_ = value;
      }
    }

    private int mapIndex_;
    public int MapIndex {
      get { return mapIndex_; }
      set {
        mapIndex_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (MapIndex != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(MapIndex);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (ActorId != 0L) {
        output.WriteRawTag(232, 5);
        output.WriteInt64(ActorId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (ActorId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ActorId);
      }
      if (MapIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MapIndex);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      mapIndex_ = 0;
      rpcId_ = 0;
      actorId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            MapIndex = input.ReadInt32();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 744: {
            ActorId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public partial class Actor_TransferResponse : pb::IMessage {
    private static readonly pb::MessageParser<Actor_TransferResponse> _parser = new pb::MessageParser<Actor_TransferResponse>(() => (Actor_TransferResponse)MessagePool.Instance.Fetch(typeof(Actor_TransferResponse)));
    public static pb::MessageParser<Actor_TransferResponse> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private int error_;
    public int Error {
      get { return error_; }
      set {
        error_ = value;
      }
    }

    private string message_ = "";
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (Error != 0) {
        output.WriteRawTag(216, 5);
        output.WriteInt32(Error);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(226, 5);
        output.WriteString(Message);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (Error != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Error);
      }
      if (Message.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      rpcId_ = 0;
      error_ = 0;
      message_ = "";
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 728: {
            Error = input.ReadInt32();
            break;
          }
          case 738: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public partial class C2G_EnterMap : pb::IMessage {
    private static readonly pb::MessageParser<C2G_EnterMap> _parser = new pb::MessageParser<C2G_EnterMap>(() => (C2G_EnterMap)MessagePool.Instance.Fetch(typeof(C2G_EnterMap)));
    public static pb::MessageParser<C2G_EnterMap> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      rpcId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public partial class G2C_EnterMap : pb::IMessage {
    private static readonly pb::MessageParser<G2C_EnterMap> _parser = new pb::MessageParser<G2C_EnterMap>(() => (G2C_EnterMap)MessagePool.Instance.Fetch(typeof(G2C_EnterMap)));
    public static pb::MessageParser<G2C_EnterMap> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private int error_;
    public int Error {
      get { return error_; }
      set {
        error_ = value;
      }
    }

    private string message_ = "";
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private long unitId_;
    /// <summary>
    /// 自己的unit id
    /// </summary>
    public long UnitId {
      get { return unitId_; }
      set {
        unitId_ = value;
      }
    }

    private static readonly pb::FieldCodec<global::ETModel.UnitInfo> _repeated_units_codec
        = pb::FieldCodec.ForMessage(18, global::ETModel.UnitInfo.Parser);
    private pbc::RepeatedField<global::ETModel.UnitInfo> units_ = new pbc::RepeatedField<global::ETModel.UnitInfo>();
    /// <summary>
    /// 所有的unit
    /// </summary>
    public pbc::RepeatedField<global::ETModel.UnitInfo> Units {
      get { return units_; }
      set { units_ = value; }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (UnitId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(UnitId);
      }
      units_.WriteTo(output, _repeated_units_codec);
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (Error != 0) {
        output.WriteRawTag(216, 5);
        output.WriteInt32(Error);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(226, 5);
        output.WriteString(Message);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (Error != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Error);
      }
      if (Message.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      if (UnitId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(UnitId);
      }
      size += units_.CalculateSize(_repeated_units_codec);
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      unitId_ = 0;
      for (int i = 0; i < units_.Count; i++) { MessagePool.Instance.Recycle(units_[i]); }
      units_.Clear();
      rpcId_ = 0;
      error_ = 0;
      message_ = "";
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            UnitId = input.ReadInt64();
            break;
          }
          case 18: {
            units_.AddEntriesFrom(input, _repeated_units_codec);
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 728: {
            Error = input.ReadInt32();
            break;
          }
          case 738: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public partial class UnitInfo : pb::IMessage {
    private static readonly pb::MessageParser<UnitInfo> _parser = new pb::MessageParser<UnitInfo>(() => (UnitInfo)MessagePool.Instance.Fetch(typeof(UnitInfo)));
    public static pb::MessageParser<UnitInfo> Parser { get { return _parser; } }

    private long unitId_;
    public long UnitId {
      get { return unitId_; }
      set {
        unitId_ = value;
      }
    }

    private float x_;
    public float X {
      get { return x_; }
      set {
        x_ = value;
      }
    }

    private float y_;
    public float Y {
      get { return y_; }
      set {
        y_ = value;
      }
    }

    private float z_;
    public float Z {
      get { return z_; }
      set {
        z_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (UnitId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(UnitId);
      }
      if (X != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(X);
      }
      if (Y != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(Y);
      }
      if (Z != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(Z);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (UnitId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(UnitId);
      }
      if (X != 0F) {
        size += 1 + 4;
      }
      if (Y != 0F) {
        size += 1 + 4;
      }
      if (Z != 0F) {
        size += 1 + 4;
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      unitId_ = 0;
      x_ = 0f;
      y_ = 0f;
      z_ = 0f;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            UnitId = input.ReadInt64();
            break;
          }
          case 21: {
            X = input.ReadFloat();
            break;
          }
          case 29: {
            Y = input.ReadFloat();
            break;
          }
          case 37: {
            Z = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  public partial class M2C_CreateUnits : pb::IMessage {
    private static readonly pb::MessageParser<M2C_CreateUnits> _parser = new pb::MessageParser<M2C_CreateUnits>(() => (M2C_CreateUnits)MessagePool.Instance.Fetch(typeof(M2C_CreateUnits)));
    public static pb::MessageParser<M2C_CreateUnits> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long actorId_;
    public long ActorId {
      get { return actorId_; }
      set {
        actorId_ = value;
      }
    }

    private static readonly pb::FieldCodec<global::ETModel.UnitInfo> _repeated_units_codec
        = pb::FieldCodec.ForMessage(10, global::ETModel.UnitInfo.Parser);
    private pbc::RepeatedField<global::ETModel.UnitInfo> units_ = new pbc::RepeatedField<global::ETModel.UnitInfo>();
    public pbc::RepeatedField<global::ETModel.UnitInfo> Units {
      get { return units_; }
      set { units_ = value; }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      units_.WriteTo(output, _repeated_units_codec);
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (ActorId != 0L) {
        output.WriteRawTag(232, 5);
        output.WriteInt64(ActorId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (ActorId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ActorId);
      }
      size += units_.CalculateSize(_repeated_units_codec);
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      for (int i = 0; i < units_.Count; i++) { MessagePool.Instance.Recycle(units_[i]); }
      units_.Clear();
      rpcId_ = 0;
      actorId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            units_.AddEntriesFrom(input, _repeated_units_codec);
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 744: {
            ActorId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public partial class C2R_Ping : pb::IMessage {
    private static readonly pb::MessageParser<C2R_Ping> _parser = new pb::MessageParser<C2R_Ping>(() => (C2R_Ping)MessagePool.Instance.Fetch(typeof(C2R_Ping)));
    public static pb::MessageParser<C2R_Ping> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      rpcId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public partial class R2C_Ping : pb::IMessage {
    private static readonly pb::MessageParser<R2C_Ping> _parser = new pb::MessageParser<R2C_Ping>(() => (R2C_Ping)MessagePool.Instance.Fetch(typeof(R2C_Ping)));
    public static pb::MessageParser<R2C_Ping> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private int error_;
    public int Error {
      get { return error_; }
      set {
        error_ = value;
      }
    }

    private string message_ = "";
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (Error != 0) {
        output.WriteRawTag(216, 5);
        output.WriteInt32(Error);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(226, 5);
        output.WriteString(Message);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (Error != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Error);
      }
      if (Message.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      rpcId_ = 0;
      error_ = 0;
      message_ = "";
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 728: {
            Error = input.ReadInt32();
            break;
          }
          case 738: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public partial class G2C_Test : pb::IMessage {
    private static readonly pb::MessageParser<G2C_Test> _parser = new pb::MessageParser<G2C_Test>(() => (G2C_Test)MessagePool.Instance.Fetch(typeof(G2C_Test)));
    public static pb::MessageParser<G2C_Test> Parser { get { return _parser; } }

    public void WriteTo(pb::CodedOutputStream output) {
    }

    public int CalculateSize() {
      int size = 0;
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public partial class C2M_Reload : pb::IMessage {
    private static readonly pb::MessageParser<C2M_Reload> _parser = new pb::MessageParser<C2M_Reload>(() => (C2M_Reload)MessagePool.Instance.Fetch(typeof(C2M_Reload)));
    public static pb::MessageParser<C2M_Reload> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private string account_ = "";
    public string Account {
      get { return account_; }
      set {
        account_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private string password_ = "";
    public string Password {
      get { return password_; }
      set {
        password_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Account.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Account);
      }
      if (Password.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Password);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (Account.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Account);
      }
      if (Password.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Password);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      account_ = "";
      password_ = "";
      rpcId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Account = input.ReadString();
            break;
          }
          case 18: {
            Password = input.ReadString();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public partial class M2C_Reload : pb::IMessage {
    private static readonly pb::MessageParser<M2C_Reload> _parser = new pb::MessageParser<M2C_Reload>(() => (M2C_Reload)MessagePool.Instance.Fetch(typeof(M2C_Reload)));
    public static pb::MessageParser<M2C_Reload> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private int error_;
    public int Error {
      get { return error_; }
      set {
        error_ = value;
      }
    }

    private string message_ = "";
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (Error != 0) {
        output.WriteRawTag(216, 5);
        output.WriteInt32(Error);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(226, 5);
        output.WriteString(Message);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (Error != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Error);
      }
      if (Message.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      rpcId_ = 0;
      error_ = 0;
      message_ = "";
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 728: {
            Error = input.ReadInt32();
            break;
          }
          case 738: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public partial class SS2C_BaseNotify : pb::IMessage {
    private static readonly pb::MessageParser<SS2C_BaseNotify> _parser = new pb::MessageParser<SS2C_BaseNotify>(() => (SS2C_BaseNotify)MessagePool.Instance.Fetch(typeof(SS2C_BaseNotify)));
    public static pb::MessageParser<SS2C_BaseNotify> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long actorId_;
    public long ActorId {
      get { return actorId_; }
      set {
        actorId_ = value;
      }
    }

    private string data_ = "";
    public string Data {
      get { return data_; }
      set {
        data_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (ActorId != 0L) {
        output.WriteRawTag(232, 5);
        output.WriteInt64(ActorId);
      }
      if (Data.Length != 0) {
        output.WriteRawTag(242, 5);
        output.WriteString(Data);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (ActorId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ActorId);
      }
      if (Data.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Data);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      rpcId_ = 0;
      actorId_ = 0;
      data_ = "";
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 744: {
            ActorId = input.ReadInt64();
            break;
          }
          case 754: {
            Data = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public partial class C2G_Heartbeat : pb::IMessage {
    private static readonly pb::MessageParser<C2G_Heartbeat> _parser = new pb::MessageParser<C2G_Heartbeat>(() => (C2G_Heartbeat)MessagePool.Instance.Fetch(typeof(C2G_Heartbeat)));
    public static pb::MessageParser<C2G_Heartbeat> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      rpcId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public partial class G2C_Heartbeat : pb::IMessage {
    private static readonly pb::MessageParser<G2C_Heartbeat> _parser = new pb::MessageParser<G2C_Heartbeat>(() => (G2C_Heartbeat)MessagePool.Instance.Fetch(typeof(G2C_Heartbeat)));
    public static pb::MessageParser<G2C_Heartbeat> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private int serverTime_;
    public int ServerTime {
      get { return serverTime_; }
      set {
        serverTime_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (ServerTime != 0) {
        output.WriteRawTag(216, 5);
        output.WriteInt32(ServerTime);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (ServerTime != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(ServerTime);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      rpcId_ = 0;
      serverTime_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 728: {
            ServerTime = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  //// &lt;summary>
  //// 进入FJ后开始推送鱼的信息
  //// &lt;/summary>
  /// </summary>
  public partial class SS2C_ActorPushFishMessage : pb::IMessage {
    private static readonly pb::MessageParser<SS2C_ActorPushFishMessage> _parser = new pb::MessageParser<SS2C_ActorPushFishMessage>(() => (SS2C_ActorPushFishMessage)MessagePool.Instance.Fetch(typeof(SS2C_ActorPushFishMessage)));
    public static pb::MessageParser<SS2C_ActorPushFishMessage> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long actorId_;
    public long ActorId {
      get { return actorId_; }
      set {
        actorId_ = value;
      }
    }

    private bool fg_;
    /// <summary>
    //// &lt;summary>
    //// fresh gate
    //// &lt;/summary>
    /// </summary>
    public bool Fg {
      get { return fg_; }
      set {
        fg_ = value;
      }
    }

    private static readonly pb::FieldCodec<global::ETModel.FishPOD> _repeated_fl_codec
        = pb::FieldCodec.ForMessage(18, global::ETModel.FishPOD.Parser);
    private pbc::RepeatedField<global::ETModel.FishPOD> fl_ = new pbc::RepeatedField<global::ETModel.FishPOD>();
    /// <summary>
    //// &lt;summary>
    //// 生成鱼 的数据列表
    //// &lt;/summary>
    /// </summary>
    public pbc::RepeatedField<global::ETModel.FishPOD> Fl {
      get { return fl_; }
      set { fl_ = value; }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Fg != false) {
        output.WriteRawTag(8);
        output.WriteBool(Fg);
      }
      fl_.WriteTo(output, _repeated_fl_codec);
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (ActorId != 0L) {
        output.WriteRawTag(232, 5);
        output.WriteInt64(ActorId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (ActorId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ActorId);
      }
      if (Fg != false) {
        size += 1 + 1;
      }
      size += fl_.CalculateSize(_repeated_fl_codec);
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      fg_ = false;
      for (int i = 0; i < fl_.Count; i++) { MessagePool.Instance.Recycle(fl_[i]); }
      fl_.Clear();
      rpcId_ = 0;
      actorId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Fg = input.ReadBool();
            break;
          }
          case 18: {
            fl_.AddEntriesFrom(input, _repeated_fl_codec);
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 744: {
            ActorId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  //// &lt;summary>
  //// 生成 鱼的协议
  //// &lt;/summary> 
  /// </summary>
  public partial class FishPOD : pb::IMessage {
    private static readonly pb::MessageParser<FishPOD> _parser = new pb::MessageParser<FishPOD>(() => (FishPOD)MessagePool.Instance.Fetch(typeof(FishPOD)));
    public static pb::MessageParser<FishPOD> Parser { get { return _parser; } }

    private static readonly pb::FieldCodec<int> _repeated_g_codec
        = pb::FieldCodec.ForInt32(10);
    private pbc::RepeatedField<int> g_ = new pbc::RepeatedField<int>();
    /// <summary>
    //// &lt;summary>
    //// 鱼的全局唯一guidarr
    //// &lt;/summary>
    /// </summary>
    public pbc::RepeatedField<int> G {
      get { return g_; }
      set { g_ = value; }
    }

    private int f_;
    /// <summary>
    //// &lt;summary>
    //// 鱼ID(0-24)fishid
    //// &lt;/summary>
    /// </summary>
    public int F {
      get { return f_; }
      set {
        f_ = value;
      }
    }

    private int p_;
    /// <summary>
    //// &lt;summary>
    //// 鱼路径PathID(1-150)
    //// &lt;/summary>
    /// </summary>
    public int P {
      get { return p_; }
      set {
        p_ = value;
      }
    }

    private int groupid_;
    /// <summary>
    //// &lt;summary>
    //// 分组ID
    //// &lt;/summary>
    /// </summary>
    public int Groupid {
      get { return groupid_; }
      set {
        groupid_ = value;
      }
    }

    private static readonly pb::FieldCodec<ulong> _repeated_bt_codec
        = pb::FieldCodec.ForUInt64(42);
    private pbc::RepeatedField<ulong> bt_ = new pbc::RepeatedField<ulong>();
    /// <summary>
    //// &lt;summary>
    //// 鱼出生的时间 born time
    //// &lt;/summary>
    /// </summary>
    public pbc::RepeatedField<ulong> Bt {
      get { return bt_; }
      set { bt_ = value; }
    }

    private static readonly pb::FieldCodec<ulong> _repeated_dt_codec
        = pb::FieldCodec.ForUInt64(50);
    private pbc::RepeatedField<ulong> dt_ = new pbc::RepeatedField<ulong>();
    /// <summary>
    //// &lt;summary>
    //// 鱼死亡的时间 
    //// &lt;/summary>
    /// </summary>
    public pbc::RepeatedField<ulong> Dt {
      get { return dt_; }
      set { dt_ = value; }
    }

    private global::ETModel.FishBuff buf_;
    /// <summary>
    //// &lt;summary>
    //// buff
    //// &lt;/summary>
    /// </summary>
    public global::ETModel.FishBuff Buf {
      get { return buf_; }
      set {
        buf_ = value;
      }
    }

    private global::ETModel.SpecialFishFlag fg_ = 0;
    /// <summary>
    //// &lt;summary>
    //// 鱼标记
    //// &lt;/summary>
    /// </summary>
    public global::ETModel.SpecialFishFlag Fg {
      get { return fg_; }
      set {
        fg_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      g_.WriteTo(output, _repeated_g_codec);
      if (F != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(F);
      }
      if (P != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(P);
      }
      if (Groupid != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Groupid);
      }
      bt_.WriteTo(output, _repeated_bt_codec);
      dt_.WriteTo(output, _repeated_dt_codec);
      if (buf_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(Buf);
      }
      if (Fg != 0) {
        output.WriteRawTag(64);
        output.WriteEnum((int) Fg);
      }
    }

    public int CalculateSize() {
      int size = 0;
      size += g_.CalculateSize(_repeated_g_codec);
      if (F != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(F);
      }
      if (P != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(P);
      }
      if (Groupid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Groupid);
      }
      size += bt_.CalculateSize(_repeated_bt_codec);
      size += dt_.CalculateSize(_repeated_dt_codec);
      if (buf_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Buf);
      }
      if (Fg != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Fg);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      g_.Clear();
      f_ = 0;
      p_ = 0;
      groupid_ = 0;
      bt_.Clear();
      dt_.Clear();
      if (buf_ != null) MessagePool.Instance.Recycle(buf_); buf_ = null;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10:
          case 8: {
            g_.AddEntriesFrom(input, _repeated_g_codec);
            break;
          }
          case 16: {
            F = input.ReadInt32();
            break;
          }
          case 24: {
            P = input.ReadInt32();
            break;
          }
          case 32: {
            Groupid = input.ReadInt32();
            break;
          }
          case 42:
          case 40: {
            bt_.AddEntriesFrom(input, _repeated_bt_codec);
            break;
          }
          case 50:
          case 48: {
            dt_.AddEntriesFrom(input, _repeated_dt_codec);
            break;
          }
          case 58: {
            if (buf_ == null) {
              buf_ = new global::ETModel.FishBuff();
            }
            input.ReadMessage(buf_);
            break;
          }
          case 64: {
            fg_ = (global::ETModel.SpecialFishFlag) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  //// &lt;summary>
  //// 对应FishPOD的buff鱼的协议
  //// &lt;/summary> 
  /// </summary>
  public partial class FishBuff : pb::IMessage {
    private static readonly pb::MessageParser<FishBuff> _parser = new pb::MessageParser<FishBuff>(() => (FishBuff)MessagePool.Instance.Fetch(typeof(FishBuff)));
    public static pb::MessageParser<FishBuff> Parser { get { return _parser; } }

    private int g_;
    /// <summary>
    //// &lt;summary>
    //// 鱼的全局唯一guidarr
    //// &lt;/summary>
    /// </summary>
    public int G {
      get { return g_; }
      set {
        g_ = value;
      }
    }

    private int t_;
    /// <summary>
    //// &lt;summary>
    //// 类型1.gold加倍，2.加速度移动一半，3.鱼王，4.道具掉落,5.显示鱼泡泡
    //// &lt;/summary>
    /// </summary>
    public int T {
      get { return t_; }
      set {
        t_ = value;
      }
    }

    private int v_;
    /// <summary>
    //// &lt;summary>
    //// 对应类型的值
    //// &lt;/summary>
    /// </summary>
    public int V {
      get { return v_; }
      set {
        v_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (G != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(G);
      }
      if (T != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(T);
      }
      if (V != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(V);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (G != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(G);
      }
      if (T != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(T);
      }
      if (V != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(V);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      g_ = 0;
      t_ = 0;
      v_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            G = input.ReadInt32();
            break;
          }
          case 16: {
            T = input.ReadInt32();
            break;
          }
          case 24: {
            V = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public partial class CC2S_ActorKillFishRequest : pb::IMessage {
    private static readonly pb::MessageParser<CC2S_ActorKillFishRequest> _parser = new pb::MessageParser<CC2S_ActorKillFishRequest>(() => (CC2S_ActorKillFishRequest)MessagePool.Instance.Fetch(typeof(CC2S_ActorKillFishRequest)));
    public static pb::MessageParser<CC2S_ActorKillFishRequest> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long actorId_;
    public long ActorId {
      get { return actorId_; }
      set {
        actorId_ = value;
      }
    }

    private int uid_;
    /// <summary>
    //// &lt;summary>
    ////_lanucheruid 
    //// &lt;/summary>
    /// </summary>
    public int Uid {
      get { return uid_; }
      set {
        uid_ = value;
      }
    }

    private int fuid_;
    /// <summary>
    //// &lt;summary>
    //// 鱼的全局唯一ID
    //// &lt;/summary>
    /// </summary>
    public int Fuid {
      get { return fuid_; }
      set {
        fuid_ = value;
      }
    }

    private int levelid_;
    /// <summary>
    ///房间ID
    /// </summary>
    public int Levelid {
      get { return levelid_; }
      set {
        levelid_ = value;
      }
    }

    private int tableid_;
    /// <summary>
    ///桌子ID
    /// </summary>
    public int Tableid {
      get { return tableid_; }
      set {
        tableid_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Uid != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Uid);
      }
      if (Fuid != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Fuid);
      }
      if (Levelid != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Levelid);
      }
      if (Tableid != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Tableid);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (ActorId != 0L) {
        output.WriteRawTag(232, 5);
        output.WriteInt64(ActorId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (ActorId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ActorId);
      }
      if (Uid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Uid);
      }
      if (Fuid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Fuid);
      }
      if (Levelid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Levelid);
      }
      if (Tableid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Tableid);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uid_ = 0;
      fuid_ = 0;
      levelid_ = 0;
      tableid_ = 0;
      rpcId_ = 0;
      actorId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Uid = input.ReadInt32();
            break;
          }
          case 16: {
            Fuid = input.ReadInt32();
            break;
          }
          case 24: {
            Levelid = input.ReadInt32();
            break;
          }
          case 32: {
            Tableid = input.ReadInt32();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 744: {
            ActorId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public partial class SS2C_ActorKillFishResponse : pb::IMessage {
    private static readonly pb::MessageParser<SS2C_ActorKillFishResponse> _parser = new pb::MessageParser<SS2C_ActorKillFishResponse>(() => (SS2C_ActorKillFishResponse)MessagePool.Instance.Fetch(typeof(SS2C_ActorKillFishResponse)));
    public static pb::MessageParser<SS2C_ActorKillFishResponse> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private int error_;
    public int Error {
      get { return error_; }
      set {
        error_ = value;
      }
    }

    private string message_ = "";
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private int gid_;
    /// <summary>
    //// &lt;summary>
    //// 鱼的全局唯一ID
    //// &lt;/summary>
    /// </summary>
    public int Gid {
      get { return gid_; }
      set {
        gid_ = value;
      }
    }

    private int g_;
    /// <summary>
    //// &lt;summary>
    //// 玩家当前gold
    //// &lt;/summary>
    /// </summary>
    public int G {
      get { return g_; }
      set {
        g_ = value;
      }
    }

    private int fg_;
    /// <summary>
    //// &lt;summary>
    //// 杀死鱼的奖励（_kill=false时为0）
    //// &lt;/summary>
    /// </summary>
    public int Fg {
      get { return fg_; }
      set {
        fg_ = value;
      }
    }

    private bool k_;
    /// <summary>
    //// &lt;summary>
    //// 是否杀死鱼
    //// &lt;/summary>
    /// </summary>
    public bool K {
      get { return k_; }
      set {
        k_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Gid != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Gid);
      }
      if (G != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(G);
      }
      if (Fg != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Fg);
      }
      if (K != false) {
        output.WriteRawTag(32);
        output.WriteBool(K);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (Error != 0) {
        output.WriteRawTag(216, 5);
        output.WriteInt32(Error);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(226, 5);
        output.WriteString(Message);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (Error != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Error);
      }
      if (Message.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      if (Gid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Gid);
      }
      if (G != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(G);
      }
      if (Fg != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Fg);
      }
      if (K != false) {
        size += 1 + 1;
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      gid_ = 0;
      g_ = 0;
      fg_ = 0;
      k_ = false;
      rpcId_ = 0;
      error_ = 0;
      message_ = "";
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Gid = input.ReadInt32();
            break;
          }
          case 16: {
            G = input.ReadInt32();
            break;
          }
          case 24: {
            Fg = input.ReadInt32();
            break;
          }
          case 32: {
            K = input.ReadBool();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 728: {
            Error = input.ReadInt32();
            break;
          }
          case 738: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  //// &lt;summary>
  //// 发送炮弹信息给其他玩家
  //// &lt;/summary>
  /// </summary>
  public partial class SS2C_ActorPushShootMessage : pb::IMessage {
    private static readonly pb::MessageParser<SS2C_ActorPushShootMessage> _parser = new pb::MessageParser<SS2C_ActorPushShootMessage>(() => (SS2C_ActorPushShootMessage)MessagePool.Instance.Fetch(typeof(SS2C_ActorPushShootMessage)));
    public static pb::MessageParser<SS2C_ActorPushShootMessage> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long actorId_;
    public long ActorId {
      get { return actorId_; }
      set {
        actorId_ = value;
      }
    }

    private long g_;
    /// <summary>
    //// &lt;summary>
    //// 玩家当前gold
    //// &lt;/summary>
    /// </summary>
    public long G {
      get { return g_; }
      set {
        g_ = value;
      }
    }

    private int uid_;
    /// <summary>
    //// &lt;summary>
    ////      
    //// &lt;/summary>
    /// </summary>
    public int Uid {
      get { return uid_; }
      set {
        uid_ = value;
      }
    }

    private int bid_;
    /// <summary>
    //// &lt;summary>
    //// 炮台类型ID
    //// &lt;/summary>
    /// </summary>
    public int Bid {
      get { return bid_; }
      set {
        bid_ = value;
      }
    }

    private int lid_;
    /// <summary>
    //// &lt;summary>
    //// 炮台 发射器 lancher的id
    //// &lt;/summary>
    /// </summary>
    public int Lid {
      get { return lid_; }
      set {
        lid_ = value;
      }
    }

    private int p_;
    /// <summary>
    //// &lt;summary>
    //// 炮弹从哪个位置发射出去的
    //// &lt;/summary>
    /// </summary>
    public int P {
      get { return p_; }
      set {
        p_ = value;
      }
    }

    private int x_;
    /// <summary>
    //// &lt;summary>
    //// 炮弹发射的目标点
    //// &lt;/summary>
    /// </summary>
    public int X {
      get { return x_; }
      set {
        x_ = value;
      }
    }

    private int y_;
    public int Y {
      get { return y_; }
      set {
        y_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (G != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(G);
      }
      if (Uid != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Uid);
      }
      if (Bid != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Bid);
      }
      if (Lid != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Lid);
      }
      if (P != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(P);
      }
      if (X != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(X);
      }
      if (Y != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(Y);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (ActorId != 0L) {
        output.WriteRawTag(232, 5);
        output.WriteInt64(ActorId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (ActorId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ActorId);
      }
      if (G != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(G);
      }
      if (Uid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Uid);
      }
      if (Bid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Bid);
      }
      if (Lid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Lid);
      }
      if (P != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(P);
      }
      if (X != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(X);
      }
      if (Y != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Y);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      g_ = 0;
      uid_ = 0;
      bid_ = 0;
      lid_ = 0;
      p_ = 0;
      x_ = 0;
      y_ = 0;
      rpcId_ = 0;
      actorId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            G = input.ReadInt64();
            break;
          }
          case 16: {
            Uid = input.ReadInt32();
            break;
          }
          case 24: {
            Bid = input.ReadInt32();
            break;
          }
          case 32: {
            Lid = input.ReadInt32();
            break;
          }
          case 40: {
            P = input.ReadInt32();
            break;
          }
          case 48: {
            X = input.ReadInt32();
            break;
          }
          case 56: {
            Y = input.ReadInt32();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 744: {
            ActorId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  //// &lt;summary>
  //// 发射炮炮的请求
  //// &lt;/summary>
  /// </summary>
  public partial class CC2S_ActorShootFishRequest : pb::IMessage {
    private static readonly pb::MessageParser<CC2S_ActorShootFishRequest> _parser = new pb::MessageParser<CC2S_ActorShootFishRequest>(() => (CC2S_ActorShootFishRequest)MessagePool.Instance.Fetch(typeof(CC2S_ActorShootFishRequest)));
    public static pb::MessageParser<CC2S_ActorShootFishRequest> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long actorId_;
    public long ActorId {
      get { return actorId_; }
      set {
        actorId_ = value;
      }
    }

    private int tid_;
    public int Tid {
      get { return tid_; }
      set {
        tid_ = value;
      }
    }

    private int rid_;
    public int Rid {
      get { return rid_; }
      set {
        rid_ = value;
      }
    }

    private int bid_;
    /// <summary>
    //// &lt;summary>
    //// 炮台类型ID
    //// &lt;/summary>
    /// </summary>
    public int Bid {
      get { return bid_; }
      set {
        bid_ = value;
      }
    }

    private int lid_;
    /// <summary>
    //// &lt;summary>
    ////  lv id 等级ID
    //// &lt;/summary>
    /// </summary>
    public int Lid {
      get { return lid_; }
      set {
        lid_ = value;
      }
    }

    private int p_;
    /// <summary>
    //// &lt;summary>
    //// 炮弹从哪个位置发射出去的 1,2,3,4
    //// &lt;/summary>
    /// </summary>
    public int P {
      get { return p_; }
      set {
        p_ = value;
      }
    }

    private int x_;
    /// <summary>
    //// &lt;summary>
    //// 炮弹发射的目标点 屏幕坐标
    //// &lt;/summary>
    /// </summary>
    public int X {
      get { return x_; }
      set {
        x_ = value;
      }
    }

    private int y_;
    public int Y {
      get { return y_; }
      set {
        y_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Tid != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Tid);
      }
      if (Rid != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Rid);
      }
      if (Bid != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Bid);
      }
      if (Lid != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Lid);
      }
      if (P != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(P);
      }
      if (X != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(X);
      }
      if (Y != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(Y);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (ActorId != 0L) {
        output.WriteRawTag(232, 5);
        output.WriteInt64(ActorId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (ActorId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ActorId);
      }
      if (Tid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Tid);
      }
      if (Rid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Rid);
      }
      if (Bid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Bid);
      }
      if (Lid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Lid);
      }
      if (P != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(P);
      }
      if (X != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(X);
      }
      if (Y != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Y);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      tid_ = 0;
      rid_ = 0;
      bid_ = 0;
      lid_ = 0;
      p_ = 0;
      x_ = 0;
      y_ = 0;
      rpcId_ = 0;
      actorId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Tid = input.ReadInt32();
            break;
          }
          case 16: {
            Rid = input.ReadInt32();
            break;
          }
          case 24: {
            Bid = input.ReadInt32();
            break;
          }
          case 32: {
            Lid = input.ReadInt32();
            break;
          }
          case 40: {
            P = input.ReadInt32();
            break;
          }
          case 48: {
            X = input.ReadInt32();
            break;
          }
          case 56: {
            Y = input.ReadInt32();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 744: {
            ActorId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public partial class SS2C_ActorShootFishResponse : pb::IMessage {
    private static readonly pb::MessageParser<SS2C_ActorShootFishResponse> _parser = new pb::MessageParser<SS2C_ActorShootFishResponse>(() => (SS2C_ActorShootFishResponse)MessagePool.Instance.Fetch(typeof(SS2C_ActorShootFishResponse)));
    public static pb::MessageParser<SS2C_ActorShootFishResponse> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private int error_;
    public int Error {
      get { return error_; }
      set {
        error_ = value;
      }
    }

    private string message_ = "";
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (Error != 0) {
        output.WriteRawTag(216, 5);
        output.WriteInt32(Error);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(226, 5);
        output.WriteString(Message);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (Error != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Error);
      }
      if (Message.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      rpcId_ = 0;
      error_ = 0;
      message_ = "";
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 728: {
            Error = input.ReadInt32();
            break;
          }
          case 738: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
