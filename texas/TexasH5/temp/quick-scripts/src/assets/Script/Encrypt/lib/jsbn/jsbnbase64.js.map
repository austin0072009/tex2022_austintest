{"version":3,"sources":["assets\\Script\\Encrypt\\lib\\jsbn\\jsbnbase64.js"],"names":["b64map","b64pad","hex2b64","h","i","c","ret","length","parseInt","substring","charAt","b64tohex","s","k","slop","v","indexOf","b64toBA","a"],"mappings":"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","sourceRoot":"/","sourcesContent":["import { int2char } from \"./util\";\nvar b64map = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\";\nvar b64pad = \"=\";\nexport function hex2b64(h) {\n    var i;\n    var c;\n    var ret = \"\";\n    for (i = 0; i + 3 <= h.length; i += 3) {\n        c = parseInt(h.substring(i, i + 3), 16);\n        ret += b64map.charAt(c >> 6) + b64map.charAt(c & 63);\n    }\n    if (i + 1 == h.length) {\n        c = parseInt(h.substring(i, i + 1), 16);\n        ret += b64map.charAt(c << 2);\n    }\n    else if (i + 2 == h.length) {\n        c = parseInt(h.substring(i, i + 2), 16);\n        ret += b64map.charAt(c >> 2) + b64map.charAt((c & 3) << 4);\n    }\n    while ((ret.length & 3) > 0) {\n        ret += b64pad;\n    }\n    return ret;\n}\n// convert a base64 string to hex\nexport function b64tohex(s) {\n    var ret = \"\";\n    var i;\n    var k = 0; // b64 state, 0-3\n    var slop = 0;\n    for (i = 0; i < s.length; ++i) {\n        if (s.charAt(i) == b64pad) {\n            break;\n        }\n        var v = b64map.indexOf(s.charAt(i));\n        if (v < 0) {\n            continue;\n        }\n        if (k == 0) {\n            ret += int2char(v >> 2);\n            slop = v & 3;\n            k = 1;\n        }\n        else if (k == 1) {\n            ret += int2char((slop << 2) | (v >> 4));\n            slop = v & 0xf;\n            k = 2;\n        }\n        else if (k == 2) {\n            ret += int2char(slop);\n            ret += int2char(v >> 2);\n            slop = v & 3;\n            k = 3;\n        }\n        else {\n            ret += int2char((slop << 2) | (v >> 4));\n            ret += int2char(v & 0xf);\n            k = 0;\n        }\n    }\n    if (k == 1) {\n        ret += int2char(slop << 2);\n    }\n    return ret;\n}\n// convert a base64 string to a byte/number array\nexport function b64toBA(s) {\n    // piggyback on b64tohex for now, optimize later\n    var h = b64tohex(s);\n    var i;\n    var a = [];\n    for (i = 0; 2 * i < h.length; ++i) {\n        a[i] = parseInt(h.substring(2 * i, 2 * i + 2), 16);\n    }\n    return a;\n}\n"]}