{"version":3,"sources":["assets\\Script\\Encrypt\\JSEncryptRSAKey.js"],"names":["__extends","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","prototype","hasOwnProperty","call","TypeError","String","__","constructor","create","JSEncryptRSAKey","_super","key","_this","parseKey","hasPrivateKeyProperty","hasPublicKeyProperty","parsePropertiesFrom","pem","modulus","public_exponent","reHex","der","test","Hex","decode","Base64","unarmor","asn1","ASN1","sub","length","getHexStringValue","n","e","parseInt","private_exponent","prime1","prime2","q","exponent1","dmp1","exponent2","dmq1","coefficient","coeff","bit_string","sequence","ex","getPrivateBaseKey","options","array","KJUR","DERInteger","bigint","seq","DERSequence","getEncodedHex","getPrivateBaseKeyB64","getPublicBaseKey","first_sequence","DERObjectIdentifier","oid","DERNull","second_sequence","DERBitString","hex","getPublicBaseKeyB64","wordwrap","str","width","regex","match","RegExp","join","getPrivateKey","getPublicKey","obj","RSAKey"],"mappings":"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","sourceRoot":"/","sourcesContent":["var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __ () { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nimport { hex2b64 } from \"./lib/jsbn/jsbnbase64\";\nimport { Hex } from \"./lib/asn1js/hex\";\nimport { Base64 } from \"./lib/asn1js/base64\";\nimport { ASN1 } from \"./lib/asn1js/asn1\";\nimport { RSAKey } from \"./lib/jsbn/rsa\";\nimport { parseBigInt } from \"./lib/jsbn/jsbn\";\nimport { KJUR } from \"./lib/jsrsasign/asn1-1.0\";\n/**\n * Create a new JSEncryptRSAKey that extends Tom Wu's RSA key object.\n * This object is just a decorator for parsing the key parameter\n * @param {string|Object} key - The key in string format, or an object containing\n * the parameters needed to build a RSAKey object.\n * @constructor\n */\nvar JSEncryptRSAKey = /** @class */ (function (_super) {\n    __extends(JSEncryptRSAKey, _super);\n    function JSEncryptRSAKey (key) {\n        var _this = _super.call(this) || this;\n        // Call the super constructor.\n        //  RSAKey.call(this);\n        // If a key key was provided.\n        if (key) {\n            // If this is a string...\n            if (typeof key === \"string\") {\n                _this.parseKey(key);\n            }\n            else if (JSEncryptRSAKey.hasPrivateKeyProperty(key) ||\n                JSEncryptRSAKey.hasPublicKeyProperty(key)) {\n                // Set the values for the key.\n                _this.parsePropertiesFrom(key);\n            }\n        }\n        return _this;\n    }\n    /**\n     * Method to parse a pem encoded string containing both a public or private key.\n     * The method will translate the pem encoded string in a der encoded string and\n     * will parse private key and public key parameters. This method accepts public key\n     * in the rsaencryption pkcs #1 format (oid: 1.2.840.113549.1.1.1).\n     *\n     * @todo Check how many rsa formats use the same format of pkcs #1.\n     *\n     * The format is defined as:\n     * PublicKeyInfo ::= SEQUENCE {\n     *   algorithm       AlgorithmIdentifier,\n     *   PublicKey       BIT STRING\n     * }\n     * Where AlgorithmIdentifier is:\n     * AlgorithmIdentifier ::= SEQUENCE {\n     *   algorithm       OBJECT IDENTIFIER,     the OID of the enc algorithm\n     *   parameters      ANY DEFINED BY algorithm OPTIONAL (NULL for PKCS #1)\n     * }\n     * and PublicKey is a SEQUENCE encapsulated in a BIT STRING\n     * RSAPublicKey ::= SEQUENCE {\n     *   modulus           INTEGER,  -- n\n     *   publicExponent    INTEGER   -- e\n     * }\n     * it's possible to examine the structure of the keys obtained from openssl using\n     * an asn.1 dumper as the one used here to parse the components: http://lapo.it/asn1js/\n     * @argument {string} pem the pem encoded string, can include the BEGIN/END header/footer\n     * @private\n     */\n    JSEncryptRSAKey.prototype.parseKey = function (pem) {\n        try {\n            var modulus = 0;\n            var public_exponent = 0;\n            var reHex = /^\\s*(?:[0-9A-Fa-f][0-9A-Fa-f]\\s*)+$/;\n            var der = reHex.test(pem) ? Hex.decode(pem) : Base64.unarmor(pem);\n            var asn1 = ASN1.decode(der);\n            // Fixes a bug with OpenSSL 1.0+ private keys\n            if (asn1.sub.length === 3) {\n                asn1 = asn1.sub[2].sub[0];\n            }\n            if (asn1.sub.length === 9) {\n                // Parse the private key.\n                modulus = asn1.sub[1].getHexStringValue(); // bigint\n                this.n = parseBigInt(modulus, 16);\n                public_exponent = asn1.sub[2].getHexStringValue(); // int\n                this.e = parseInt(public_exponent, 16);\n                var private_exponent = asn1.sub[3].getHexStringValue(); // bigint\n                this.d = parseBigInt(private_exponent, 16);\n                var prime1 = asn1.sub[4].getHexStringValue(); // bigint\n                this.p = parseBigInt(prime1, 16);\n                var prime2 = asn1.sub[5].getHexStringValue(); // bigint\n                this.q = parseBigInt(prime2, 16);\n                var exponent1 = asn1.sub[6].getHexStringValue(); // bigint\n                this.dmp1 = parseBigInt(exponent1, 16);\n                var exponent2 = asn1.sub[7].getHexStringValue(); // bigint\n                this.dmq1 = parseBigInt(exponent2, 16);\n                var coefficient = asn1.sub[8].getHexStringValue(); // bigint\n                this.coeff = parseBigInt(coefficient, 16);\n            }\n            else if (asn1.sub.length === 2) {\n                // Parse the public key.\n                var bit_string = asn1.sub[1];\n                var sequence = bit_string.sub[0];\n                modulus = sequence.sub[0].getHexStringValue();\n                this.n = parseBigInt(modulus, 16);\n                public_exponent = sequence.sub[1].getHexStringValue();\n                this.e = parseInt(public_exponent, 16);\n            }\n            else {\n                return false;\n            }\n            return true;\n        }\n        catch (ex) {\n            return false;\n        }\n    };\n    /**\n     * Translate rsa parameters in a hex encoded string representing the rsa key.\n     *\n     * The translation follow the ASN.1 notation :\n     * RSAPrivateKey ::= SEQUENCE {\n     *   version           Version,\n     *   modulus           INTEGER,  -- n\n     *   publicExponent    INTEGER,  -- e\n     *   privateExponent   INTEGER,  -- d\n     *   prime1            INTEGER,  -- p\n     *   prime2            INTEGER,  -- q\n     *   exponent1         INTEGER,  -- d mod (p1)\n     *   exponent2         INTEGER,  -- d mod (q-1)\n     *   coefficient       INTEGER,  -- (inverse of q) mod p\n     * }\n     * @returns {string}  DER Encoded String representing the rsa private key\n     * @private\n     */\n    JSEncryptRSAKey.prototype.getPrivateBaseKey = function () {\n        var options = {\n            array: [\n                new KJUR.asn1.DERInteger({ int: 0 }),\n                new KJUR.asn1.DERInteger({ bigint: this.n }),\n                new KJUR.asn1.DERInteger({ int: this.e }),\n                new KJUR.asn1.DERInteger({ bigint: this.d }),\n                new KJUR.asn1.DERInteger({ bigint: this.p }),\n                new KJUR.asn1.DERInteger({ bigint: this.q }),\n                new KJUR.asn1.DERInteger({ bigint: this.dmp1 }),\n                new KJUR.asn1.DERInteger({ bigint: this.dmq1 }),\n                new KJUR.asn1.DERInteger({ bigint: this.coeff })\n            ]\n        };\n        var seq = new KJUR.asn1.DERSequence(options);\n        return seq.getEncodedHex();\n    };\n    /**\n     * base64 (pem) encoded version of the DER encoded representation\n     * @returns {string} pem encoded representation without header and footer\n     * @public\n     */\n    JSEncryptRSAKey.prototype.getPrivateBaseKeyB64 = function () {\n        return hex2b64(this.getPrivateBaseKey());\n    };\n    /**\n     * Translate rsa parameters in a hex encoded string representing the rsa public key.\n     * The representation follow the ASN.1 notation :\n     * PublicKeyInfo ::= SEQUENCE {\n     *   algorithm       AlgorithmIdentifier,\n     *   PublicKey       BIT STRING\n     * }\n     * Where AlgorithmIdentifier is:\n     * AlgorithmIdentifier ::= SEQUENCE {\n     *   algorithm       OBJECT IDENTIFIER,     the OID of the enc algorithm\n     *   parameters      ANY DEFINED BY algorithm OPTIONAL (NULL for PKCS #1)\n     * }\n     * and PublicKey is a SEQUENCE encapsulated in a BIT STRING\n     * RSAPublicKey ::= SEQUENCE {\n     *   modulus           INTEGER,  -- n\n     *   publicExponent    INTEGER   -- e\n     * }\n     * @returns {string} DER Encoded String representing the rsa public key\n     * @private\n     */\n    JSEncryptRSAKey.prototype.getPublicBaseKey = function () {\n        var first_sequence = new KJUR.asn1.DERSequence({\n            array: [\n                new KJUR.asn1.DERObjectIdentifier({ oid: \"1.2.840.113549.1.1.1\" }),\n                new KJUR.asn1.DERNull()\n            ]\n        });\n        var second_sequence = new KJUR.asn1.DERSequence({\n            array: [\n                new KJUR.asn1.DERInteger({ bigint: this.n }),\n                new KJUR.asn1.DERInteger({ int: this.e })\n            ]\n        });\n        var bit_string = new KJUR.asn1.DERBitString({\n            hex: \"00\" + second_sequence.getEncodedHex()\n        });\n        var seq = new KJUR.asn1.DERSequence({\n            array: [\n                first_sequence,\n                bit_string\n            ]\n        });\n        return seq.getEncodedHex();\n    };\n    /**\n     * base64 (pem) encoded version of the DER encoded representation\n     * @returns {string} pem encoded representation without header and footer\n     * @public\n     */\n    JSEncryptRSAKey.prototype.getPublicBaseKeyB64 = function () {\n        return hex2b64(this.getPublicBaseKey());\n    };\n    /**\n     * wrap the string in block of width chars. The default value for rsa keys is 64\n     * characters.\n     * @param {string} str the pem encoded string without header and footer\n     * @param {Number} [width=64] - the length the string has to be wrapped at\n     * @returns {string}\n     * @private\n     */\n    JSEncryptRSAKey.wordwrap = function (str, width) {\n        width = width || 64;\n        if (!str) {\n            return str;\n        }\n        var regex = \"(.{1,\" + width + \"})( +|$\\n?)|(.{1,\" + width + \"})\";\n        return str.match(RegExp(regex, \"g\")).join(\"\\n\");\n    };\n    /**\n     * Retrieve the pem encoded private key\n     * @returns {string} the pem encoded private key with header/footer\n     * @public\n     */\n    JSEncryptRSAKey.prototype.getPrivateKey = function () {\n        var key = \"-----BEGIN RSA PRIVATE KEY-----\\n\";\n        key += JSEncryptRSAKey.wordwrap(this.getPrivateBaseKeyB64()) + \"\\n\";\n        key += \"-----END RSA PRIVATE KEY-----\";\n        return key;\n    };\n    /**\n     * Retrieve the pem encoded public key\n     * @returns {string} the pem encoded public key with header/footer\n     * @public\n     */\n    JSEncryptRSAKey.prototype.getPublicKey = function () {\n        var key = \"-----BEGIN PUBLIC KEY-----\\n\";\n        key += JSEncryptRSAKey.wordwrap(this.getPublicBaseKeyB64()) + \"\\n\";\n        key += \"-----END PUBLIC KEY-----\";\n        return key;\n    };\n    /**\n     * Check if the object contains the necessary parameters to populate the rsa modulus\n     * and public exponent parameters.\n     * @param {Object} [obj={}] - An object that may contain the two public key\n     * parameters\n     * @returns {boolean} true if the object contains both the modulus and the public exponent\n     * properties (n and e)\n     * @todo check for types of n and e. N should be a parseable bigInt object, E should\n     * be a parseable integer number\n     * @private\n     */\n    JSEncryptRSAKey.hasPublicKeyProperty = function (obj) {\n        obj = obj || {};\n        return (obj.hasOwnProperty(\"n\") &&\n            obj.hasOwnProperty(\"e\"));\n    };\n    /**\n     * Check if the object contains ALL the parameters of an RSA key.\n     * @param {Object} [obj={}] - An object that may contain nine rsa key\n     * parameters\n     * @returns {boolean} true if the object contains all the parameters needed\n     * @todo check for types of the parameters all the parameters but the public exponent\n     * should be parseable bigint objects, the public exponent should be a parseable integer number\n     * @private\n     */\n    JSEncryptRSAKey.hasPrivateKeyProperty = function (obj) {\n        obj = obj || {};\n        return (obj.hasOwnProperty(\"n\") &&\n            obj.hasOwnProperty(\"e\") &&\n            obj.hasOwnProperty(\"d\") &&\n            obj.hasOwnProperty(\"p\") &&\n            obj.hasOwnProperty(\"q\") &&\n            obj.hasOwnProperty(\"dmp1\") &&\n            obj.hasOwnProperty(\"dmq1\") &&\n            obj.hasOwnProperty(\"coeff\"));\n    };\n    /**\n     * Parse the properties of obj in the current rsa object. Obj should AT LEAST\n     * include the modulus and public exponent (n, e) parameters.\n     * @param {Object} obj - the object containing rsa parameters\n     * @private\n     */\n    JSEncryptRSAKey.prototype.parsePropertiesFrom = function (obj) {\n        this.n = obj.n;\n        this.e = obj.e;\n        if (obj.hasOwnProperty(\"d\")) {\n            this.d = obj.d;\n            this.p = obj.p;\n            this.q = obj.q;\n            this.dmp1 = obj.dmp1;\n            this.dmq1 = obj.dmq1;\n            this.coeff = obj.coeff;\n        }\n    };\n    return JSEncryptRSAKey;\n}(RSAKey));\nexport { JSEncryptRSAKey };\n"]}