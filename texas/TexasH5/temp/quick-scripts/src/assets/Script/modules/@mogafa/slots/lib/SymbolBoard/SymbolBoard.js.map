{"version":3,"sources":["assets\\Script\\modules\\@mogafa\\slots\\lib\\SymbolBoard\\SymbolBoard.ts"],"names":[],"mappings":"","file":"","sourceRoot":"/","sourcesContent":["\nimport { SymbolBoardStatus } from \"./SymbolBoardStatus\";\nimport { IResilienceMove } from \"../IResilienceMove\";\nimport SpinResultsSlot from \"../../../../spin-result/SpinResultsSlot\";\n\n\nexport default interface SymbolBoard {\n    /**\n     * 最大棋子编码\n     */\n    maxCode: number;\n    /**\n     * 等待结果状态\n     */\n    //waitingResultsStatus: WaitingResultsStatus;\n    /**\n     * 棋盘状态\n     */\n    status: SymbolBoardStatus;\n    /**\n     * 最终结果\n     *\n     */\n    slotResults: SpinResultsSlot;\n    /**\n     * 开始等待结果前\n     * 目前不提供单列或单个格子开始转动前的拦截点\n     */\n    beforeStartWaitingResults(): void;\n    /**\n     * 停止等待结果前\n     */\n    beforeStopWaitingResults(): void;\n    /**\n     * 开始等待结果前\n     * @returns 返回true可以开始等待，false则不能开始\n     */\n    onBeforeStartWaitingResults(): boolean;\n    /**\n     * 停止等待结果前\n     * @returns 返回true可以开始等待，false则不能停止（比如自动停止时间到，但是结果还没有拿到）\n     */\n    onBeforeStopWaitingResults(): boolean;\n    /**\n     * 能否开始停止\n     */\n    canStop(): boolean;\n    /**\n     * 当格子最终结果设置完毕\n     *\n     * @param listener 回调函数\n     * @param target target\n     */\n    onCellResultSet(listener: Function, target?: any): void;\n    /**\n     * 取消当格子最终结果设置完毕的监听\n     *\n     * @param listener 回调函数\n     * @param target target\n     */\n    offCellResultSet(listener: Function, target?: any): void;\n    /**\n     * 清除所有格子停止转动监听\n     */\n    clearCellResultSet(): void;\n    /**\n     * 当列最终结果设置完毕\n     *\n     * @param listener 回调函数\n     * @param target target\n     */\n    onColumnResultsSet(listener: Function, target?: any): void;\n    /**\n     * 清除当列最终结果设置完毕的监听\n     *\n     * @param listener 回调函数\n     * @param target target\n     */\n    offColumnResultsSet(listener: Function, target?: any): void;\n    /**\n     * 清除所有当列最终结果设置完毕的监听\n     *\n     */\n    clearColumnResultsSet(): void;\n    /**\n     * 当整个棋盘最终结果设置完毕\n     *\n     * @param listener 回调函数\n     * @param target target\n     */\n    onResultsSet(listener: Function, target?: any): void;\n    /**\n     * 清楚当整个棋盘最终结果设置完毕的监听\n     *\n     * @param listener 回调函数\n     * @param target target\n     */\n    offResultsSet(listener: Function, target?: any): void;\n    /**\n     * 清楚当整个棋盘最终结果设置完毕的监听\n     */\n    clearResultsSet(): void;\n    /**\n     * 列进入holdWin模式，当列停止，holdWin模式自动结束\n     *\n     * @param columnIndex 列索引\n     */\n    columnHoldWin(columnIndex: number): void;\n    /**\n     * 列移动\n     * @param columnIndex 列索引\n     * @param step 移动步长\n     * @param code 下一个棋子编码，如果移动超界，用这个棋子作为新出现的棋子\n     * @returns 如果移动超界，下一个棋子被使用则返回true\n     */\n    columnMoveY(columnIndex: number, step: number, code?: number): boolean;\n    /**\n     * 转轴启动回弹配置\n     * @param columnIndex\n     * @param up\n     * @param down\n     */\n    reelStartResilienceConfig(columnIndex: number, up: IResilienceMove, down: IResilienceMove): void;\n    /**\n     * 转轴结束回弹配置\n     * @param columnIndex\n     * @param down\n     * @param up\n     */\n    reelEndResilienceConfig(columnIndex: number, down: IResilienceMove, up: IResilienceMove): void;\n    /**\n     * 格子holdwin\n     *\n     * @param reelIndex 列索引\n     * @param cellIndex 格子索引\n     */\n    cellHoldWin(reelIndex: number, cellIndex: number): void;\n    /**\n     * 格子移动\n     * @param columnIndex 列索引\n     * @param cellIndex 格子索引\n     * @param code 下一个棋子编码，如果移动超界，用这个棋子作为新出现的棋子\n     * @returns 如果移动超界，下一个棋子被使用则返回true\n     */\n    cellMoveY(columnIndex: number, cellIndex: number, step: number, code?: number): boolean;\n    /**\n     * 获取指定列额外单元格个数\n     * @param columnIndex 列索引\n     * @returns top顶上额外单元格数量，bottom底部额外单元格数量\n     */\n    getColumnExtraCellCount(columnIndex: number): { top: number; bottom: number };\n    /**\n     * 立即设置指定列的最终结果\n     * @param columnIndex 列索引\n     * @param codes 棋子\n     */\n    setFinalResultsImmediately(columnIndex: number, codes: number[], assets: number[]): void;\n    /**\n     * 立即设置指定格子的最终结果\n     * @param columnIndex 列索引\n     * @param cellIndex 格子索引\n     * @param code 最终结果棋子\n     */\n    setFinalResultImmediately(columnIndex: number, cellIndex: number, code: number): void;\n    /**\n     *\n     * @param callback\n     * @param interval\n     * @param repeat\n     * @param delay\n     */\n    schedule(callback: Function, interval?: number, repeat?: number, delay?: number): void;\n    /**\n     *\n     * @param callback\n     */\n    unschedule(callback: Function): void;\n\n    /**\n     * 当收到请求结果时调用\n     *\n     * @param listener 监听函数\n     * @param target 目标\n     */\n    onResultsReceived(listener: Function, target?: any): void;\n    /**\n     * 清楚当收到请求结果时调用的监听\n     *\n     * @param listener 监听函数\n     * @param target 目标\n     */\n    offResultsReceived(listener: Function, target?: any): void;\n    /**\n     * 清楚所有当收到请求结果时调用的监听\n     */\n    clearResultsReceived(): void;\n}\n"]}