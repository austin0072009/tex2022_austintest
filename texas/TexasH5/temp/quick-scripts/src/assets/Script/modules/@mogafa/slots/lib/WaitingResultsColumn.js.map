{"version":3,"sources":["assets\\Script\\modules\\@mogafa\\slots\\lib\\WaitingResultsColumn.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"/","sourcesContent":["import FifoQueue from \"./FifoQueue\";\nimport WaitingResultsCell from \"./WaitingResultsCell\";\nimport WaitingResultsStep from \"./WaitingResultsStep\";\nimport { WaitingResultsSpinStatus } from \"./WaitingResultsSpinStatus\";\nimport { SymbolBoardConst } from \"./SymbolBoard/SymbolBoardConst\";\n\nimport NumberUtils from \"../../utils/lib/NumberUtils\";\nimport SpinResultsColumn from \"../../../spin-result/SpinResultsColumn\";\n\n\nexport default class WaitingResultsColumn {\n    private readonly _maxCode: number;\n    private _isHoldWin: boolean;\n    private readonly _cells: WaitingResultsCell[];\n    private _stopCodes: number[] = [];\n    private _randomCodes: FifoQueue<number>;\n    private _spinStatus: WaitingResultsSpinStatus;\n    //private _canBeStart: boolean;\n    private readonly _steps: WaitingResultsStep[] = [];\n    private _theNextCode: number;\n    private _currentStep: number;\n    private _results: SpinResultsColumn;\n    private _excludeCodes: number[] = [];\n    private _stopped: boolean = false;\n    private _timer: number;\n    constructor(maxCode: number, steps: WaitingResultsStep[]) {\n        this._maxCode = maxCode;\n        this._cells = [];\n        this._stopCodes = [];\n        this._randomCodes = new FifoQueue<number>();\n        this._randomCodes.enqueue(NumberUtils.random(0, maxCode));\n        //this._canBeStart = false;\n        this._theNextCode = this.randomCode;\n        this._spinStatus = WaitingResultsSpinStatus.Normal;\n        if (steps) {\n            this._steps = steps;\n            const step = steps.find((s) => s.status == WaitingResultsSpinStatus.Normal);\n            this._currentStep = step.step;\n        }\n    }\n    public set spinStatus(value: number) {\n        if (value || value === 0) {\n            let step = this._steps.find((s) => s.status == value);\n            if (!step) {\n                step = this._steps.find((s) => s.status == WaitingResultsSpinStatus.Normal);\n            }\n            this._currentStep = step.step;\n            this._spinStatus = value;\n        }\n    }\n    public get spinStatus(): number {\n        return this._spinStatus;\n    }\n\n    public get currentStep(): number {\n        return this._currentStep;\n    }\n    public get theNextCode(): number {\n        return this._theNextCode;\n    }\n    public get isHoldWin(): boolean {\n        return this._isHoldWin;\n    }\n    public set isHoldWin(isHoldWin: boolean) {\n        this._isHoldWin = isHoldWin;\n    }\n    public get timer(): any {\n        return this._timer;\n    }\n    public set timer(value: any) {\n        this._timer = value;\n    }\n    public get cells(): WaitingResultsCell[] {\n        return this._cells;\n    }\n    // public get canBeStart(): boolean {\n    //     return this._canBeStart;\n    // }\n    // public set canBeStart(value: boolean) {\n    //     this._canBeStart = value;\n    // }\n    public set stopCodes(value: number[]) {\n        this._stopCodes = value;\n        if (!this._stopCodes) {\n            this._stopCodes = [];\n        }\n    }\n    public get stopCodes(): number[] {\n        return this._stopCodes;\n    }\n    public set results(value: SpinResultsColumn) {\n        this._results = value;\n        if (value) {\n            this._stopCodes = value.codes;\n            this._isHoldWin = value.isHoldWin;\n        }\n    }\n    public get randomCode(): number {\n        let code = this._randomCodes.dequeue();\n        if (this._spinStatus != WaitingResultsSpinStatus.Stopping) {\n            this._randomCodes.enqueue(NumberUtils.random(0, this._maxCode, this._excludeCodes));\n        }\n        return code;\n    }\n    public get excludeCodes(): number[] {\n        return this._excludeCodes;\n    }\n    public set excludeCodes(value: number[]) {\n        this._excludeCodes = value;\n        if (!this._excludeCodes) {\n            this._excludeCodes = [];\n        }\n        if (this._excludeCodes.find((c) => c == this._theNextCode) != null) {\n            this._theNextCode = this.randomCode;\n        }\n        for (let i = 0; i < this._cells.length; i++) {\n            this._cells[i].excludeCodes = this.excludeCodes;\n        }\n    }\n    public getStep(status: number): number {\n        const step = this._steps.find((s) => s.status == status);\n        if (!step) {\n            return null;\n        }\n        return step.step;\n    }\n    public addOrUpdateStep(status: number, step: number) {\n        const oldStep = this._steps.find((s) => s.status == status);\n        if (oldStep) {\n            oldStep.step = step;\n            return;\n        }\n        this._steps.push(new WaitingResultsStep(status, step));\n    }\n    public addCell(cell: WaitingResultsCell): void {\n        this.cells.push(cell);\n    }\n    public nextCode(): void {\n        this._theNextCode = this.randomCode;\n    }\n    public pushStopCodes(): void {\n        if (this._stopCodes && this._stopCodes.length > 0) {\n            //console.log(\"pushStopCodes\");\n            this._randomCodes.clear();\n            this.spinStatus = WaitingResultsSpinStatus.Stopping;\n            for (let i = 0; i < this._stopCodes.length; i++) {\n                this._randomCodes.enqueue(this._stopCodes[i] + SymbolBoardConst.FINAL_CODE_OFFSET);\n            }\n            this._stopCodes = [];\n        }\n    }\n    public pushStopCodesForCell(cellIndex: number): void {\n        if (this._stopCodes && this._stopCodes.length > 0) {\n            const stopCodesLength = this._stopCodes.length;\n            this.cells[cellIndex].pushStopCode(this._stopCodes[stopCodesLength - cellIndex - 1]);\n        }\n    }\n    public reset(): void {\n        this._isHoldWin = false;\n        this._stopCodes = [];\n        this._randomCodes.clear();\n        this._randomCodes.enqueue(NumberUtils.random(0, this._maxCode, this._excludeCodes));\n        this._theNextCode = this.randomCode;\n        //this._canBeStart = false;\n        this.spinStatus = WaitingResultsSpinStatus.Normal;\n        for (let i = 0; i < this._cells.length; i++) {\n            this._cells[i].reset();\n        }\n    }\n}\n"]}