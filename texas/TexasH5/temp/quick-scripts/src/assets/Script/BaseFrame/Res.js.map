{"version":3,"sources":["assets\\Script\\BaseFrame\\Res.ts"],"names":[],"mappings":";;;;;;;AAGA;IAKI;IAGA,CAAC;IAGD,sBAAW,gBAAS;QADpB,IAAI;aACJ;YAEE,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE;gBACnB,IAAI,CAAC,SAAS,GAAG,IAAI,GAAG,EAAE,CAAC;aAC5B;YACD,OAAO,IAAI,CAAC,SAAS,CAAC;QACxB,CAAC;;;OAAA;IAED,aAAa;IACb,UAAU;IACV,cAAc;IACd,8BAA8B;IACtB,qBAAO,GAAf,UAAiB,GAAW,EAAI,IAAmB;QAAnB,qBAAA,EAAA,WAAmB;QAE/C,IAAI,GAAG,IAAI,IAAI;YACX,OAAO;QACP,GAAG,CAAC,MAAM,GAAG,IAAI,CAAC;QAClB,GAAG,CAAC,OAAO,EAAE,CAAC;QAClB,GAAG,GAAG,IAAI,CAAC;IACf,CAAC;IAED,aAAa;IACb,8CAA8C;IAC9C,iBAAiB;IACjB,cAAc;IACd,+BAA+B;IAC/B,+BAA+B;IAC/B,uBAAuB;IACf,wBAAU,GAAlB,UAAqB,IAAW,EAAI,SAAoB;QAApB,0BAAA,EAAA,aAAoB;QAEpD,IAAI,IAAI,IAAI,EAAE;YACV,OAAO,IAAI,CAAC;QAChB,kCAAkC;QAClC,sBAAsB;QACtB,IAAI;QACJ,kCAAkC;QAClC,KAAK;QACL,uEAAuE;QACvE,OAAO,IAAI,CAAC;IAChB,CAAC;IAED,aAAa;IACb,UAAU;IACV,cAAc;IACd,+BAA+B;IAC/B,uBAAuB;IACf,6BAAe,GAAvB,UAAyB,IAAW,EAAK,WAA2B;QAA3B,4BAAA,EAAA,mBAA2B;QAEhE,sEAAsE;QACtE,OAAO,IAAI,CAAC;IAChB,CAAC;IAGD,aAAa;IACb,qCAAqC;IACrC,cAAc;IACL,6BAAe,GAAxB,UAA0B,OAAoB,EAAI,WAAkB,EAAE,GAAU;QAE5E,IAAI,OAAO,IAAI,IAAI;YAAI,OAAO,KAAK,CAAC;QACpC,IAAI,OAAO,GAAG,IAAI,CAAC,SAAS,CAAC,UAAU,CAAC,WAAW,EAAE,GAAG,CAAC,CAAC;QAC1D,OAAO,CAAC,GAAG,GAAG,OAAO,CAAC;QAEtB,OAAO,KAAK,CAAC;IACjB,CAAC;IAED,aAAa;IACb,eAAe;IACf,cAAc;IACd,cAAc;IACL,4BAAc,GAAvB,UAAyB,KAAqB,EAAI,SAAgB,EAAI,MAAa,EAAI,MAAqB;QAArB,uBAAA,EAAA,aAAqB;QAExG,+EAA+E;QAC/E,OAAO,IAAI,CAAC;IAChB,CAAC;IAwFL,UAAC;AAAD,CA5KA,AA4KC,IAAA;AA5KY,kBAAG","file":"","sourceRoot":"/","sourcesContent":["import { setTimeout } from \"timers\";\n \n\nexport class Res\n{\n\n    private static _instance: Res; //类型为这个类 \n\n    private constructor()\n    {  \n        \n    }\n\n    //单例\n    static get Singleton() \n    {\n      if (!this._instance) {\n        this._instance = new Res();\n      }\n      return this._instance;\n    } \n \n    /// <summary>\n    /// 释放一个资源\n    /// </summary>\n    /// <param name=\"obj\"></param>\n    public  destroy( obj:cc.Node,   flag:boolean = true):void\n    {\n        if (obj == null)\n            return;\n            obj.parent = null;\n            obj.destroy();\n        obj = null;\n    }\n\n    /// <summary>\n    /// 特效资源加载接口， 目前发现只有角色战斗特效调用此接口，以后特效需要都通过此接口调用\n    /// change by jsw\n    /// </summary>\n    /// <param name=\"name\"></param>\n    /// <param name=\"path\"></param>\n    /// <returns></returns>\n    public  LoadEffect(  name:string,   lifeValue:number = 1) :cc.Object\n    {\n        if (name == \"\")\n            return null;\n        // string[] arr = name.split('/');\n        // if (arr.Length > 1)\n        // {\n        //     name = arr[arr.Length - 1];\n        // } \n        // return EffectAssetManager.Singleton.GetEffectAsset(name, lifeValue);\n        return null;\n    }\n\n    /// <summary>\n    /// 得到共享纹理\n    /// </summary>\n    /// <param name=\"name\"></param>\n    /// <returns></returns>\n    public  GetShareTexture( name:string ,   isEffectTex :boolean= false):cc.Texture2D\n    {\n        // return ShareTextureManager.Singleton.GetTexture(name, isEffectTex);\n        return null;\n    }\n\n\n    /// <summary>\n    /// 设置image对象的sprite 动态设置图集资源必须通过此接口 \n    /// </summary>\n    public   SetImageSprite1( ui_icon:fgui.GLoader,   packageName:string, url:string ):boolean\n    {\n        if (ui_icon == null  ) return false;\n        let iconurl = fgui.UIPackage.getItemURL(packageName, url);\n        ui_icon.url = iconurl; \n        \n        return false;\n    }\n\n    /// <summary>\n    /// 这个方法以后要被弃用。\n    /// add by jsw\n    /// </summary>\n    public   SetImageSprite( image:fairygui.GImage,   altasName:string,   spName:string,   addRef :boolean= true):boolean\n    {\n        // return UIAtlasManager.Singleton.SetSprite(image, altasName, spName, addRef);\n        return null;\n    }\n\n    // /// <summary>\n    // /// 模型专用加载方法 \n    // /// </summary>\n    // /// <param name=\"name\"></param>\n    // /// <param name=\"path\"></param>\n    // /// <returns></returns>\n    // public GameObject InstantiateModel(string name)\n    // {\n    //     UnityEngine.Object tmpobj = ModelAssetManager.Singleton.GetModel(name);//loadAllclip暂时不开放 //SceneEx.Current.LoadCharactorSync(name);  //change by jsw\n    //     if (tmpobj != null)\n    //     {\n    //         //if (pos != null && rotation != null) GameObject.Instantiate(tmpobj, pos.Value, rotation.Value) as GameObject;    \n    //         return GameObject.Instantiate(tmpobj) as GameObject;\n    //     }\n    //     else\n    //     {\n    //         Debug.LogError(\"can not find model: \" + name);\n    //         return null;\n    //     }\n    // }\n    // public GameObject InstantiateModelandTex(string name)\n    // {\n    //     Material material = ModelAssetManager.Singleton.GetMaterialAsset(\"mahjongtile_mobile_unlit\");  //add by jsw    cmat_\n    //     UnityEngine.Object tmpobj = ModelAssetManager.Singleton.GetModel(name);//loadAllclip暂时不开放 //SceneEx.Current.LoadCharactorSync(name);  //change by jsw\n    //     if (tmpobj != null)\n    //     {\n    //         //if (pos != null && rotation != null) GameObject.Instantiate(tmpobj, pos.Value, rotation.Value) as GameObject;    \n    //         GameObject _temp = GameObject.Instantiate(tmpobj) as GameObject;\n    //         MeshRenderer _tmr = _temp.GetComponent<MeshRenderer>();\n    //         _tmr.sharedMaterial = material;\n    //         return _temp;\n    //     }\n    //     else\n    //     {\n    //         Debug.LogError(\"can not find model: \" + name);\n    //         return null;\n    //     }\n    // }\n    // public UnityEngine.Object GetObject(string name)\n    // {\n    //     return ModelAssetManager.Singleton.GetModel(name);\n    // }\n\n    // //add by jsw\n    // public GameObject InstantiateCEffect(string name, Vector3? pos = null, Quaternion? rotation = null)\n    // {\n    //     UnityEngine.Object tmpobj = LoadEffect(name);\n    //     if (tmpobj != null)\n    //     {\n    //         if (pos != null && rotation != null)\n    //             return GameObject.Instantiate(tmpobj, pos.Value, rotation.Value) as GameObject;\n    //         else if (pos != null && rotation == null)\n    //             return GameObject.Instantiate(tmpobj, pos.Value, Quaternion.identity) as GameObject;\n    //         return GameObject.Instantiate(tmpobj) as GameObject;\n    //     }\n    //     else\n    //     {\n    //         Debug.LogError(\"can not find effect: \" + name);\n    //         return null;\n    //     }\n    // }\n\n    // public GameObject InstantiateModleSpine(string name, Transform parent = null,Vector3? pos = null, Vector3? scale = null, Quaternion? rotation = null)\n    // {\n    //     GameObject tmpobj = ModelAssetManager.Singleton.GetModel(name);\n    //     if (tmpobj != null)\n    //     {\n    //         GameObject obj = GameObject.Instantiate(tmpobj.transform.GetChild(0).gameObject) as GameObject;\n    //         if (obj != null)\n    //         {\n    //             obj.SetActive(true);\n    //             obj.transform.parent = parent;\n    //             obj.transform.localScale = scale != null ? (Vector3)scale : Vector3.one;\n    //             obj.transform.localPosition = pos != null ? (Vector3)pos : Vector3.zero;\n    //             obj.transform.rotation = rotation != null ? (Quaternion)rotation : Quaternion.identity;         \n    //         }\n\n    //         return obj;\n    //     }\n    //     else\n    //     {\n    //         Debug.LogError(\"can not find model: \" + name);\n    //         return null;\n    //     }\n\n    // }\n}"]}