
                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/Script/BaseFrame/VoiceNative.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, '6108eJG9hNM0pM6JR46mTUi', 'VoiceNative');
// Script/BaseFrame/VoiceNative.ts

"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var radix = 12;
var base = 128 - radix;
function crypto(value) {
    value -= base;
    var h = Math.floor(value / radix) + base;
    var l = value % radix + base;
    return String.fromCharCode(h) + String.fromCharCode(l);
}
var encodermap = {};
var decodermap = {};
for (var i = 0; i < 256; ++i) {
    var code = null;
    var v = i + 1;
    if (v >= base) {
        code = crypto(v);
    }
    else {
        code = String.fromCharCode(v);
    }
    encodermap[i] = code;
    decodermap[code] = i;
}
// src_data => dst_data( 长度 + 数据)
function encode(data) {
    var content = "";
    var len = data.length;
    cc.log('encode, len=' + len + ', data=' + data);
    var a = (len >> 24) & 0xff;
    var b = (len >> 16) & 0xff;
    var c = (len >> 8) & 0xff;
    var d = len & 0xff;
    content += encodermap[a];
    content += encodermap[b];
    content += encodermap[c];
    content += encodermap[d];
    for (var i = 0; i < data.length; ++i) {
        content += encodermap[data[i]];
    }
    return content;
}
function getCode(content, index) {
    var c = content.charCodeAt(index);
    if (c >= base) {
        c = content.charAt(index) + content.charAt(index + 1);
    }
    else {
        c = content.charAt(index);
    }
    return c;
}
function decode(content) {
    var index = 0;
    var len = 0;
    for (var i = 0; i < 4; ++i) {
        var c = getCode(content, index);
        index += c.length;
        var v = decodermap[c];
        len |= v << (3 - i) * 8;
    }
    var newData = new Uint8Array(len);
    var cnt = 0;
    while (index < content.length) {
        var c = getCode(content, index);
        index += c.length;
        newData[cnt] = decodermap[c];
        cnt++;
    }
    return newData;
}
var AndroidClassName = "org/cocos2dx/javascript/VoiceRecorder";
var IosClassName = "VoiceSDK";
exports.default = new /** @class */ (function () {
    function VoiceNative() {
        this._voiceMediaPath = '';
    }
    VoiceNative.prototype.init = function () {
        if (cc.sys.isNative) {
            this._voiceMediaPath = jsb.fileUtils.getWritablePath() + "/voicemsgs/";
            this.setStorageDir(this._voiceMediaPath);
        }
    };
    VoiceNative.prototype.prepare = function (filename) {
        if (!cc.sys.isNative) {
            return;
        }
        //暂停现在正在播放的所有音频
        cc.audioEngine.pauseAll();
        // 删除之前
        this.clearCache(filename);
        if (cc.sys.isNative) {
            if (cc.sys.os == cc.sys.OS_ANDROID) {
                jsb.reflection.callStaticMethod(AndroidClassName, "prepare", "(Ljava/lang/String;)V", filename);
            }
            else if (cc.sys.os == cc.sys.OS_IOS) {
                jsb.reflection.callStaticMethod(IosClassName, "prepareRecord:", filename);
            }
        }
    };
    VoiceNative.prototype.release = function () {
        if (!cc.sys.isNative) {
            return;
        }
        cc.audioEngine.resumeAll();
        if (cc.sys.isNative) {
            if (cc.sys.os == cc.sys.OS_ANDROID) {
                jsb.reflection.callStaticMethod(AndroidClassName, "release", "()V");
            }
            else if (cc.sys.os == cc.sys.OS_IOS) {
                // jsb.reflection.callStaticMethod(IosClassName, "finishRecord");
            }
        }
    };
    VoiceNative.prototype.cancel = function () {
        if (!cc.sys.isNative) {
            return;
        }
        cc.audioEngine.resumeAll();
        if (cc.sys.isNative) {
            if (cc.sys.os == cc.sys.OS_ANDROID) {
                jsb.reflection.callStaticMethod(AndroidClassName, "cancel", "()V");
            }
            else if (cc.sys.os == cc.sys.OS_IOS) {
                // jsb.reflection.callStaticMethod(IosClassName, "cancelRecord");
            }
        }
    };
    VoiceNative.prototype.writeVoice = function (filename, voiceData) {
        if (!cc.sys.isNative) {
            return;
        }
        if (voiceData && voiceData.length > 0) {
            // var fileData = decode(voiceData);
            var url = this._voiceMediaPath + filename;
            this.clearCache(filename);
            // @ts-ignore
            jsb.fileUtils.writeDataToFile(voiceData, url);
        }
    };
    VoiceNative.prototype.clearCache = function (filename) {
        if (cc.sys.isNative) {
            var url = this._voiceMediaPath + filename;
            //console.log("check file:" + url);
            if (jsb.fileUtils.isFileExist(url)) {
                //console.log("remove:" + url);
                jsb.fileUtils.removeFile(url);
            }
            if (jsb.fileUtils.isFileExist(url + ".wav")) {
                //console.log("remove:" + url + ".wav");
                jsb.fileUtils.removeFile(url + ".wav");
            }
        }
    };
    VoiceNative.prototype.play = function (filename) {
        if (!cc.sys.isNative) {
            return;
        }
        cc.audioEngine.pauseAll();
        if (cc.sys.os == cc.sys.OS_ANDROID) {
            jsb.reflection.callStaticMethod("org/cocos2dx/javascript/VoicePlayer", "play", "(Ljava/lang/String;)V", filename);
        }
        else if (cc.sys.os == cc.sys.OS_IOS) {
            jsb.reflection.callStaticMethod(IosClassName, "play:", filename);
        }
        else {
        }
    };
    VoiceNative.prototype.getVoiceData = function (filename) {
        if (cc.sys.isNative) {
            var url = this._voiceMediaPath + filename;
            console.log("getVoiceData:" + url);
            // 读取二进制文件 获取文件数据        
            // @ts-ignore   
            var fileData = jsb.fileUtils.getDataFromFile(url);
            if (fileData) {
                var content = fileData;
                return content;
            }
        }
        return "";
    };
    VoiceNative.prototype.getDataString = function (data) {
        var content = encode(data);
        return content;
    };
    VoiceNative.prototype.setStorageDir = function (dir) {
        if (!cc.sys.isNative) {
            return;
        }
        if (cc.sys.os == cc.sys.OS_ANDROID) {
            jsb.reflection.callStaticMethod(AndroidClassName, "setStorageDir", "(Ljava/lang/String;)V", dir);
        }
        else if (cc.sys.os == cc.sys.OS_IOS) {
            jsb.reflection.callStaticMethod(IosClassName, "setStorageDir:", dir);
            if (!jsb.fileUtils.isDirectoryExist(dir)) {
                jsb.fileUtils.createDirectory(dir);
            }
        }
    };
    return VoiceNative;
}());

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzc2V0c1xcU2NyaXB0XFxCYXNlRnJhbWVcXFZvaWNlTmF0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUEsSUFBSSxLQUFLLEdBQUcsRUFBRSxDQUFDO0FBQ2YsSUFBSSxJQUFJLEdBQUcsR0FBRyxHQUFHLEtBQUssQ0FBQztBQUV2QixTQUFTLE1BQU0sQ0FBQyxLQUFLO0lBQ2pCLEtBQUssSUFBSSxJQUFJLENBQUM7SUFDZCxJQUFJLENBQUMsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUMsR0FBRyxJQUFJLENBQUM7SUFDekMsSUFBSSxDQUFDLEdBQUcsS0FBSyxHQUFHLEtBQUssR0FBRyxJQUFJLENBQUM7SUFDN0IsT0FBTyxNQUFNLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQyxHQUFHLE1BQU0sQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDM0QsQ0FBQztBQUVELElBQUksVUFBVSxHQUFHLEVBQUUsQ0FBQTtBQUNuQixJQUFJLFVBQVUsR0FBRyxFQUFFLENBQUE7QUFDbkIsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLEdBQUcsRUFBRSxFQUFFLENBQUMsRUFBRTtJQUMxQixJQUFJLElBQUksR0FBRyxJQUFJLENBQUM7SUFDaEIsSUFBSSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUNkLElBQUksQ0FBQyxJQUFJLElBQUksRUFBRTtRQUNYLElBQUksR0FBRyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUM7S0FDcEI7U0FBTTtRQUNILElBQUksR0FBRyxNQUFNLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQyxDQUFDO0tBQ2pDO0lBRUQsVUFBVSxDQUFDLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQztJQUNyQixVQUFVLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0NBQ3hCO0FBRUQsaUNBQWlDO0FBQ2pDLFNBQVMs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O2FBQU0sSUFBSSxFQUFFLENBQUMsR0FBRyxDQUFDLEVBQUUsSUFBSSxFQUFFLENBQUMsR0FBRyxDQUFDLE1BQU0sRUFBRTtZQUNuQyxHQUFHLENBQUMsVUFBVSxDQUFDLGdCQUFnQixDQUFDLFlBQVksRUFBRSxnQkFBZ0IsRUFBRSxHQUFHLENBQUMsQ0FBQztZQUNyRSxJQUFJLENBQUMsR0FBRyxDQUFDLFNBQVMsQ0FBQyxnQkFBZ0IsQ0FBQyxHQUFHLENBQUMsRUFBRTtnQkFDdEMsR0FBRyxDQUFDLFNBQVMsQ0FBQyxlQUFlLENBQUMsR0FBRyxDQUFDLENBQUM7YUFDdEM7U0FDSjtJQUNMLENBQUM7SUFHTCxrQkFBQztBQUFELENBekltQixBQXlJbEIsR0FBQSxDQUFBIiwiZmlsZSI6IiIsInNvdXJjZVJvb3QiOiIvIiwic291cmNlc0NvbnRlbnQiOlsidmFyIHJhZGl4ID0gMTI7XG52YXIgYmFzZSA9IDEyOCAtIHJhZGl4O1xuXG5mdW5jdGlvbiBjcnlwdG8odmFsdWUpIHtcbiAgICB2YWx1ZSAtPSBiYXNlO1xuICAgIHZhciBoID0gTWF0aC5mbG9vcih2YWx1ZSAvIHJhZGl4KSArIGJhc2U7XG4gICAgdmFyIGwgPSB2YWx1ZSAlIHJhZGl4ICsgYmFzZTtcbiAgICByZXR1cm4gU3RyaW5nLmZyb21DaGFyQ29kZShoKSArIFN0cmluZy5mcm9tQ2hhckNvZGUobCk7XG59XG5cbnZhciBlbmNvZGVybWFwID0ge31cbnZhciBkZWNvZGVybWFwID0ge31cbmZvciAodmFyIGkgPSAwOyBpIDwgMjU2OyArK2kpIHtcbiAgICB2YXIgY29kZSA9IG51bGw7XG4gICAgdmFyIHYgPSBpICsgMTtcbiAgICBpZiAodiA+PSBiYXNlKSB7XG4gICAgICAgIGNvZGUgPSBjcnlwdG8odik7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgY29kZSA9IFN0cmluZy5mcm9tQ2hhckNvZGUodik7XG4gICAgfVxuXG4gICAgZW5jb2Rlcm1hcFtpXSA9IGNvZGU7XG4gICAgZGVjb2Rlcm1hcFtjb2RlXSA9IGk7XG59XG5cbi8vIHNyY19kYXRhID0+IGRzdF9kYXRhKCDplb/luqYgKyDmlbDmja4pXG5mdW5jdGlvbiBlbmNvZGUoZGF0YSkge1xuICAgIHZhciBjb250ZW50ID0gXCJcIjtcbiAgICB2YXIgbGVuID0gZGF0YS5sZW5ndGg7XG5cbiAgICBjYy5sb2coJ2VuY29kZSwgbGVuPScgKyBsZW4gKyAnLCBkYXRhPScgKyBkYXRhKTtcbiAgICB2YXIgYSA9IChsZW4gPj4gMjQpICYgMHhmZjtcbiAgICB2YXIgYiA9IChsZW4gPj4gMTYpICYgMHhmZjtcbiAgICB2YXIgYyA9IChsZW4gPj4gOCkgJiAweGZmO1xuICAgIHZhciBkID0gbGVuICYgMHhmZjtcbiAgICBjb250ZW50ICs9IGVuY29kZXJtYXBbYV07XG4gICAgY29udGVudCArPSBlbmNvZGVybWFwW2JdO1xuICAgIGNvbnRlbnQgKz0gZW5jb2Rlcm1hcFtjXTtcbiAgICBjb250ZW50ICs9IGVuY29kZXJtYXBbZF07XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBkYXRhLmxlbmd0aDsgKytpKSB7XG4gICAgICAgIGNvbnRlbnQgKz0gZW5jb2Rlcm1hcFtkYXRhW2ldXTtcbiAgICB9XG4gICAgcmV0dXJuIGNvbnRlbnQ7XG59XG5cbmZ1bmN0aW9uIGdldENvZGUoY29udGVudCwgaW5kZXgpIHtcbiAgICB2YXIgYyA9IGNvbnRlbnQuY2hhckNvZGVBdChpbmRleCk7XG4gICAgaWYgKGMgPj0gYmFzZSkge1xuICAgICAgICBjID0gY29udGVudC5jaGFyQXQoaW5kZXgpICsgY29udGVudC5jaGFyQXQoaW5kZXggKyAxKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICBjID0gY29udGVudC5jaGFyQXQoaW5kZXgpO1xuICAgIH1cbiAgICByZXR1cm4gYztcbn1cblxuZnVuY3Rpb24gZGVjb2RlKGNvbnRlbnQpIHtcbiAgICB2YXIgaW5kZXggPSAwO1xuICAgIHZhciBsZW4gPSAwO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgNDsgKytpKSB7XG4gICAgICAgIHZhciBjID0gZ2V0Q29kZShjb250ZW50LCBpbmRleCk7XG4gICAgICAgIGluZGV4ICs9IGMubGVuZ3RoO1xuICAgICAgICB2YXIgdiA9IGRlY29kZXJtYXBbY107XG4gICAgICAgIGxlbiB8PSB2IDw8ICgzIC0gaSkgKiA4O1xuICAgIH1cblxuICAgIHZhciBuZXdEYXRhID0gbmV3IFVpbnQ4QXJyYXkobGVuKTtcbiAgICB2YXIgY250ID0gMDtcbiAgICB3aGlsZSAoaW5kZXggPCBjb250ZW50Lmxlbmd0aCkge1xuICAgICAgICB2YXIgYyA9IGdldENvZGUoY29udGVudCwgaW5kZXgpO1xuICAgICAgICBpbmRleCArPSBjLmxlbmd0aDtcbiAgICAgICAgbmV3RGF0YVtjbnRdID0gZGVjb2Rlcm1hcFtjXTtcbiAgICAgICAgY250Kys7XG4gICAgfVxuICAgIHJldHVybiBuZXdEYXRhO1xufVxuXG5jb25zdCBBbmRyb2lkQ2xhc3NOYW1lID0gXCJvcmcvY29jb3MyZHgvamF2YXNjcmlwdC9Wb2ljZVJlY29yZGVyXCI7XG5jb25zdCBJb3NDbGFzc05hbWUgPSBcIlZvaWNlU0RLXCI7XG5cblxuZXhwb3J0IGRlZmF1bHQgbmV3IGNsYXNzIFZvaWNlTmF0aXZlIHtcbiAgICBwcml2YXRlIF92b2ljZU1lZGlhUGF0aDogc3RyaW5nID0gJyc7XG4gICAgcHVibGljIGluaXQoKSB7XG4gICAgICAgIGlmIChjYy5zeXMuaXNOYXRpdmUpIHtcbiAgICAgICAgICAgIHRoaXMuX3ZvaWNlTWVkaWFQYXRoID0ganNiLmZpbGVVdGlscy5nZXRXcml0YWJsZVBhdGgoKSArIFwiL3ZvaWNlbXNncy9cIjtcbiAgICAgICAgICAgIHRoaXMuc2V0U3RvcmFnZURpcih0aGlzLl92b2ljZU1lZGlhUGF0aCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwdWJsaWMgcHJlcGFyZShmaWxlbmFtZSkge1xuICAgICAgICBpZiAoIWNjLnN5cy5pc05hdGl2ZSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIC8v5pqC5YGc546w5Zyo5q2j5Zyo5pKt5pS+55qE5omA5pyJ6Z+z6aKRXG4gICAgICAgIGNjLmF1ZGlvRW5naW5lLnBhdXNlQWxsKCk7XG4gICAgICAgIC8vIOWIoOmZpOS5i+WJjVxuICAgICAgICB0aGlzLmNsZWFyQ2FjaGUoZmlsZW5hbWUpO1xuICAgICAgICBpZiAoY2Muc3lzLmlzTmF0aXZlKSB7XG4gICAgICAgICAgICBpZiAoY2Muc3lzLm9zID09IGNjLnN5cy5PU19BTkRST0lEKSB7XG4gICAgICAgICAgICAgICAganNiLnJlZmxlY3Rpb24uY2FsbFN0YXRpY01ldGhvZChBbmRyb2lkQ2xhc3NOYW1lLCBcInByZXBhcmVcIiwgXCIoTGphdmEvbGFuZy9TdHJpbmc7KVZcIiwgZmlsZW5hbWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoY2Muc3lzLm9zID09IGNjLnN5cy5PU19JT1MpIHtcbiAgICAgICAgICAgICAgICBqc2IucmVmbGVjdGlvbi5jYWxsU3RhdGljTWV0aG9kKElvc0NsYXNzTmFtZSwgXCJwcmVwYXJlUmVjb3JkOlwiLCBmaWxlbmFtZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cblxuICAgIHB1YmxpYyByZWxlYXNlKCkge1xuICAgICAgICBpZiAoIWNjLnN5cy5pc05hdGl2ZSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGNjLmF1ZGlvRW5naW5lLnJlc3VtZUFsbCgpO1xuICAgICAgICBpZiAoY2Muc3lzLmlzTmF0aXZlKSB7XG4gICAgICAgICAgICBpZiAoY2Muc3lzLm9zID09IGNjLnN5cy5PU19BTkRST0lEKSB7XG4gICAgICAgICAgICAgICAganNiLnJlZmxlY3Rpb24uY2FsbFN0YXRpY01ldGhvZChBbmRyb2lkQ2xhc3NOYW1lLCBcInJlbGVhc2VcIiwgXCIoKVZcIik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChjYy5zeXMub3MgPT0gY2Muc3lzLk9TX0lPUykge1xuICAgICAgICAgICAgICAgIC8vIGpzYi5yZWZsZWN0aW9uLmNhbGxTdGF0aWNNZXRob2QoSW9zQ2xhc3NOYW1lLCBcImZpbmlzaFJlY29yZFwiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIHB1YmxpYyBjYW5jZWwoKSB7XG4gICAgICAgIGlmICghY2Muc3lzLmlzTmF0aXZlKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgY2MuYXVkaW9FbmdpbmUucmVzdW1lQWxsKCk7XG4gICAgICAgIGlmIChjYy5zeXMuaXNOYXRpdmUpIHtcbiAgICAgICAgICAgIGlmIChjYy5zeXMub3MgPT0gY2Muc3lzLk9TX0FORFJPSUQpIHtcbiAgICAgICAgICAgICAgICBqc2IucmVmbGVjdGlvbi5jYWxsU3RhdGljTWV0aG9kKEFuZHJvaWRDbGFzc05hbWUsIFwiY2FuY2VsXCIsIFwiKClWXCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoY2Muc3lzLm9zID09IGNjLnN5cy5PU19JT1MpIHtcbiAgICAgICAgICAgICAgICAvLyBqc2IucmVmbGVjdGlvbi5jYWxsU3RhdGljTWV0aG9kKElvc0NsYXNzTmFtZSwgXCJjYW5jZWxSZWNvcmRcIik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwdWJsaWMgd3JpdGVWb2ljZShmaWxlbmFtZSwgdm9pY2VEYXRhKSB7XG4gICAgICAgIGlmICghY2Muc3lzLmlzTmF0aXZlKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHZvaWNlRGF0YSAmJiB2b2ljZURhdGEubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgLy8gdmFyIGZpbGVEYXRhID0gZGVjb2RlKHZvaWNlRGF0YSk7XG4gICAgICAgICAgICB2YXIgdXJsID0gdGhpcy5fdm9pY2VNZWRpYVBhdGggKyBmaWxlbmFtZTtcbiAgICAgICAgICAgIHRoaXMuY2xlYXJDYWNoZShmaWxlbmFtZSk7XG4gICAgICAgICAgICAvLyBAdHMtaWdub3JlXG4gICAgICAgICAgICBqc2IuZmlsZVV0aWxzLndyaXRlRGF0YVRvRmlsZSh2b2ljZURhdGEsIHVybCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwdWJsaWMgY2xlYXJDYWNoZShmaWxlbmFtZSkge1xuICAgICAgICBpZiAoY2Muc3lzLmlzTmF0aXZlKSB7XG4gICAgICAgICAgICB2YXIgdXJsID0gdGhpcy5fdm9pY2VNZWRpYVBhdGggKyBmaWxlbmFtZTtcbiAgICAgICAgICAgIC8vY29uc29sZS5sb2coXCJjaGVjayBmaWxlOlwiICsgdXJsKTtcbiAgICAgICAgICAgIGlmIChqc2IuZmlsZVV0aWxzLmlzRmlsZUV4aXN0KHVybCkpIHtcbiAgICAgICAgICAgICAgICAvL2NvbnNvbGUubG9nKFwicmVtb3ZlOlwiICsgdXJsKTtcbiAgICAgICAgICAgICAgICBqc2IuZmlsZVV0aWxzLnJlbW92ZUZpbGUodXJsKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChqc2IuZmlsZVV0aWxzLmlzRmlsZUV4aXN0KHVybCArIFwiLndhdlwiKSkge1xuICAgICAgICAgICAgICAgIC8vY29uc29sZS5sb2coXCJyZW1vdmU6XCIgKyB1cmwgKyBcIi53YXZcIik7XG4gICAgICAgICAgICAgICAganNiLmZpbGVVdGlscy5yZW1vdmVGaWxlKHVybCArIFwiLndhdlwiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIHB1YmxpYyBwbGF5KGZpbGVuYW1lKSB7XG4gICAgICAgIGlmICghY2Muc3lzLmlzTmF0aXZlKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgY2MuYXVkaW9FbmdpbmUucGF1c2VBbGwoKTtcbiAgICAgICAgaWYgKGNjLnN5cy5vcyA9PSBjYy5zeXMuT1NfQU5EUk9JRCkge1xuICAgICAgICAgICAganNiLnJlZmxlY3Rpb24uY2FsbFN0YXRpY01ldGhvZChcIm9yZy9jb2NvczJkeC9qYXZhc2NyaXB0L1ZvaWNlUGxheWVyXCIsIFwicGxheVwiLCBcIihMamF2YS9sYW5nL1N0cmluZzspVlwiLCBmaWxlbmFtZSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoY2Muc3lzLm9zID09IGNjLnN5cy5PU19JT1MpIHtcbiAgICAgICAgICAgIGpzYi5yZWZsZWN0aW9uLmNhbGxTdGF0aWNNZXRob2QoSW9zQ2xhc3NOYW1lLCBcInBsYXk6XCIsIGZpbGVuYW1lKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHB1YmxpYyBnZXRWb2ljZURhdGEoZmlsZW5hbWUpIHtcbiAgICAgICAgaWYgKGNjLnN5cy5pc05hdGl2ZSkge1xuICAgICAgICAgICAgdmFyIHVybCA9IHRoaXMuX3ZvaWNlTWVkaWFQYXRoICsgZmlsZW5hbWU7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhcImdldFZvaWNlRGF0YTpcIiArIHVybCk7XG4gICAgICAgICAgICAvLyDor7vlj5bkuozov5vliLbmlofku7Yg6I635Y+W5paH5Lu25pWw5o2uICAgICAgICBcbiAgICAgICAgICAgIC8vIEB0cy1pZ25vcmUgICBcbiAgICAgICAgICAgIHZhciBmaWxlRGF0YSA9IGpzYi5maWxlVXRpbHMuZ2V0RGF0YUZyb21GaWxlKHVybCk7XG5cbiAgICAgICAgICAgIGlmIChmaWxlRGF0YSkge1xuICAgICAgICAgICAgICAgIHZhciBjb250ZW50ID0gZmlsZURhdGE7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGNvbnRlbnQ7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIFwiXCI7XG4gICAgfVxuXG4gICAgcHVibGljIGdldERhdGFTdHJpbmcoZGF0YSkge1xuICAgICAgICB2YXIgY29udGVudCA9IGVuY29kZShkYXRhKTtcbiAgICAgICAgcmV0dXJuIGNvbnRlbnQ7XG4gICAgfVxuXG4gICAgcHVibGljIHNldFN0b3JhZ2VEaXIoZGlyOnN0cmluZykge1xuICAgICAgICBpZiAoIWNjLnN5cy5pc05hdGl2ZSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGlmIChjYy5zeXMub3MgPT0gY2Muc3lzLk9TX0FORFJPSUQpIHtcbiAgICAgICAgICAgIGpzYi5yZWZsZWN0aW9uLmNhbGxTdGF0aWNNZXRob2QoQW5kcm9pZENsYXNzTmFtZSwgXCJzZXRTdG9yYWdlRGlyXCIsIFwiKExqYXZhL2xhbmcvU3RyaW5nOylWXCIsIGRpcik7XG4gICAgICAgIH0gZWxzZSBpZiAoY2Muc3lzLm9zID09IGNjLnN5cy5PU19JT1MpIHtcbiAgICAgICAgICAgIGpzYi5yZWZsZWN0aW9uLmNhbGxTdGF0aWNNZXRob2QoSW9zQ2xhc3NOYW1lLCBcInNldFN0b3JhZ2VEaXI6XCIsIGRpcik7XG4gICAgICAgICAgICBpZiAoIWpzYi5maWxlVXRpbHMuaXNEaXJlY3RvcnlFeGlzdChkaXIpKSB7XG4gICAgICAgICAgICAgICAganNiLmZpbGVVdGlscy5jcmVhdGVEaXJlY3RvcnkoZGlyKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuXG59Il19