
                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/Script/Encrypt/lib/jsbn/rng.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, 'b7a97iGKAhFnalPObWsAght', 'rng');
// Script/Encrypt/lib/jsbn/rng.js

"use strict";

exports.__esModule = true;
exports.SecureRandom = void 0;

var _prng = require("./prng4");

// Random number generator - requires a PRNG backend, e.g. prng4.js
var rng_state;
var rng_pool = null;
var rng_pptr; // Initialize the pool with junk if needed.

if (rng_pool == null) {
  rng_pool = [];
  rng_pptr = 0;
  var t = void 0;

  if (window.crypto && window.crypto.getRandomValues) {
    // Extract entropy (2048 bits) from RNG if available
    var z = new Uint32Array(256);
    window.crypto.getRandomValues(z);

    for (t = 0; t < z.length; ++t) {
      rng_pool[rng_pptr++] = z[t] & 255;
    }
  } // Use mouse events for entropy, if we do not have enough entropy by the time
  // we need it, entropy will be generated by Math.random.


  var count = 0;

  var onMouseMoveListener_1 = function onMouseMoveListener_1(ev) {
    count = count || 0;

    if (count >= 256 || rng_pptr >= _prng.rng_psize) {
      if (window.removeEventListener) {
        window.removeEventListener("mousemove", onMouseMoveListener_1, false);
      } else if (window.detachEvent) {
        window.detachEvent("onmousemove", onMouseMoveListener_1);
      }

      return;
    }

    try {
      var mouseCoordinates = ev.x + ev.y;
      rng_pool[rng_pptr++] = mouseCoordinates & 255;
      count += 1;
    } catch (e) {// Sometimes Firefox will deny permission to access event properties for some reason. Ignore.
    }
  };

  if (window.addEventListener) {
    window.addEventListener("mousemove", onMouseMoveListener_1, false);
  } else if (window.attachEvent) {
    window.attachEvent("onmousemove", onMouseMoveListener_1);
  }
}

function rng_get_byte() {
  if (rng_state == null) {
    rng_state = (0, _prng.prng_newstate)(); // At this point, we may not have collected enough entropy.  If not, fall back to Math.random

    while (rng_pptr < _prng.rng_psize) {
      var random = Math.floor(65536 * Math.random());
      rng_pool[rng_pptr++] = random & 255;
    }

    rng_state.init(rng_pool);

    for (rng_pptr = 0; rng_pptr < rng_pool.length; ++rng_pptr) {
      rng_pool[rng_pptr] = 0;
    }

    rng_pptr = 0;
  } // TODO: allow reseeding after first request


  return rng_state.next();
}

var SecureRandom =
/** @class */
function () {
  function SecureRandom() {}

  SecureRandom.prototype.nextBytes = function (ba) {
    for (var i = 0; i < ba.length; ++i) {
      ba[i] = rng_get_byte();
    }
  };

  return SecureRandom;
}();

exports.SecureRandom = SecureRandom;

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzc2V0c1xcU2NyaXB0XFxFbmNyeXB0XFxsaWJcXGpzYm5cXHJuZy5qcyJdLCJuYW1lcyI6WyJybmdfc3RhdGUiLCJybmdfcG9vbCIsInJuZ19wcHRyIiwidCIsIndpbmRvdyIsImNyeXB0byIsImdldFJhbmRvbVZhbHVlcyIsInoiLCJVaW50MzJBcnJheSIsImxlbmd0aCIsImNvdW50Iiwib25Nb3VzZU1vdmVMaXN0ZW5lcl8xIiwiZXYiLCJybmdfcHNpemUiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwiZGV0YWNoRXZlbnQiLCJtb3VzZUNvb3JkaW5hdGVzIiwieCIsInkiLCJlIiwiYWRkRXZlbnRMaXN0ZW5lciIsImF0dGFjaEV2ZW50Iiwicm5nX2dldF9ieXRlIiwicmFuZG9tIiwiTWF0aCIsImZsb29yIiwiaW5pdCIsIm5leHQiLCJTZWN1cmVSYW5kb20iLCJwcm90b3R5cGUiLCJuZXh0Qnl0ZXMiLCJiYSIsImkiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQ0E7O0FBREE7QUFFQSxJQUFJQSxTQUFKO0FBQ0EsSUFBSUMsUUFBUSxHQUFHLElBQWY7QUFDQSxJQUFJQyxRQUFKLEVBQ0E7O0FBQ0EsSUFBSUQsUUFBUSxJQUFJLElBQWhCLEVBQXNCO0FBQ2xCQSxFQUFBQSxRQUFRLEdBQUcsRUFBWDtBQUNBQyxFQUFBQSxRQUFRLEdBQUcsQ0FBWDtBQUNBLE1BQUlDLENBQUMsR0FBRyxLQUFLLENBQWI7O0FBQ0EsTUFBSUMsTUFBTSxDQUFDQyxNQUFQLElBQWlCRCxNQUFNLENBQUNDLE1BQVAsQ0FBY0MsZUFBbkMsRUFBb0Q7QUFDaEQ7QUFDQSxRQUFJQyxDQUFDLEdBQUcsSUFBSUMsV0FBSixDQUFnQixHQUFoQixDQUFSO0FBQ0FKLElBQUFBLE1BQU0sQ0FBQ0MsTUFBUCxDQUFjQyxlQUFkLENBQThCQyxDQUE5Qjs7QUFDQSxTQUFLSixDQUFDLEdBQUcsQ0FBVCxFQUFZQSxDQUFDLEdBQUdJLENBQUMsQ0FBQ0UsTUFBbEIsRUFBMEIs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QUFDSCxDQVRpQyxFQUFsQyIsInNvdXJjZVJvb3QiOiIvIiwic291cmNlc0NvbnRlbnQiOlsiLy8gUmFuZG9tIG51bWJlciBnZW5lcmF0b3IgLSByZXF1aXJlcyBhIFBSTkcgYmFja2VuZCwgZS5nLiBwcm5nNC5qc1xuaW1wb3J0IHsgcHJuZ19uZXdzdGF0ZSwgcm5nX3BzaXplIH0gZnJvbSBcIi4vcHJuZzRcIjtcbnZhciBybmdfc3RhdGU7XG52YXIgcm5nX3Bvb2wgPSBudWxsO1xudmFyIHJuZ19wcHRyO1xuLy8gSW5pdGlhbGl6ZSB0aGUgcG9vbCB3aXRoIGp1bmsgaWYgbmVlZGVkLlxuaWYgKHJuZ19wb29sID09IG51bGwpIHtcbiAgICBybmdfcG9vbCA9IFtdO1xuICAgIHJuZ19wcHRyID0gMDtcbiAgICB2YXIgdCA9IHZvaWQgMDtcbiAgICBpZiAod2luZG93LmNyeXB0byAmJiB3aW5kb3cuY3J5cHRvLmdldFJhbmRvbVZhbHVlcykge1xuICAgICAgICAvLyBFeHRyYWN0IGVudHJvcHkgKDIwNDggYml0cykgZnJvbSBSTkcgaWYgYXZhaWxhYmxlXG4gICAgICAgIHZhciB6ID0gbmV3IFVpbnQzMkFycmF5KDI1Nik7XG4gICAgICAgIHdpbmRvdy5jcnlwdG8uZ2V0UmFuZG9tVmFsdWVzKHopO1xuICAgICAgICBmb3IgKHQgPSAwOyB0IDwgei5sZW5ndGg7ICsrdCkge1xuICAgICAgICAgICAgcm5nX3Bvb2xbcm5nX3BwdHIrK10gPSB6W3RdICYgMjU1O1xuICAgICAgICB9XG4gICAgfVxuICAgIC8vIFVzZSBtb3VzZSBldmVudHMgZm9yIGVudHJvcHksIGlmIHdlIGRvIG5vdCBoYXZlIGVub3VnaCBlbnRyb3B5IGJ5IHRoZSB0aW1lXG4gICAgLy8gd2UgbmVlZCBpdCwgZW50cm9weSB3aWxsIGJlIGdlbmVyYXRlZCBieSBNYXRoLnJhbmRvbS5cbiAgICB2YXIgY291bnQgPSAwO1xuICAgIHZhciBvbk1vdXNlTW92ZUxpc3RlbmVyXzEgPSBmdW5jdGlvbiAoZXYpIHtcbiAgICAgICAgY291bnQgPSBjb3VudCB8fCAwO1xuICAgICAgICBpZiAoY291bnQgPj0gMjU2IHx8IHJuZ19wcHRyID49IHJuZ19wc2l6ZSkge1xuICAgICAgICAgICAgaWYgKHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKSB7XG4gICAgICAgICAgICAgICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJtb3VzZW1vdmVcIiwgb25Nb3VzZU1vdmVMaXN0ZW5lcl8xLCBmYWxzZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmICh3aW5kb3cuZGV0YWNoRXZlbnQpIHtcbiAgICAgICAgICAgICAgICB3aW5kb3cuZGV0YWNoRXZlbnQoXCJvbm1vdXNlbW92ZVwiLCBvbk1vdXNlTW92ZUxpc3RlbmVyXzEpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICB2YXIgbW91c2VDb29yZGluYXRlcyA9IGV2LnggKyBldi55O1xuICAgICAgICAgICAgcm5nX3Bvb2xbcm5nX3BwdHIrK10gPSBtb3VzZUNvb3JkaW5hdGVzICYgMjU1O1xuICAgICAgICAgICAgY291bnQgKz0gMTtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZSkge1xuICAgICAgICAgICAgLy8gU29tZXRpbWVzIEZpcmVmb3ggd2lsbCBkZW55IHBlcm1pc3Npb24gdG8gYWNjZXNzIGV2ZW50IHByb3BlcnRpZXMgZm9yIHNvbWUgcmVhc29uLiBJZ25vcmUuXG4gICAgICAgIH1cbiAgICB9O1xuICAgIGlmICh3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcikge1xuICAgICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcIm1vdXNlbW92ZVwiLCBvbk1vdXNlTW92ZUxpc3RlbmVyXzEsIGZhbHNlKTtcbiAgICB9XG4gICAgZWxzZSBpZiAod2luZG93LmF0dGFjaEV2ZW50KSB7XG4gICAgICAgIHdpbmRvdy5hdHRhY2hFdmVudChcIm9ubW91c2Vtb3ZlXCIsIG9uTW91c2VNb3ZlTGlzdGVuZXJfMSk7XG4gICAgfVxufVxuZnVuY3Rpb24gcm5nX2dldF9ieXRlKCkge1xuICAgIGlmIChybmdfc3RhdGUgPT0gbnVsbCkge1xuICAgICAgICBybmdfc3RhdGUgPSBwcm5nX25ld3N0YXRlKCk7XG4gICAgICAgIC8vIEF0IHRoaXMgcG9pbnQsIHdlIG1heSBub3QgaGF2ZSBjb2xsZWN0ZWQgZW5vdWdoIGVudHJvcHkuICBJZiBub3QsIGZhbGwgYmFjayB0byBNYXRoLnJhbmRvbVxuICAgICAgICB3aGlsZSAocm5nX3BwdHIgPCBybmdfcHNpemUpIHtcbiAgICAgICAgICAgIHZhciByYW5kb20gPSBNYXRoLmZsb29yKDY1NTM2ICogTWF0aC5yYW5kb20oKSk7XG4gICAgICAgICAgICBybmdfcG9vbFtybmdfcHB0cisrXSA9IHJhbmRvbSAmIDI1NTtcbiAgICAgICAgfVxuICAgICAgICBybmdfc3RhdGUuaW5pdChybmdfcG9vbCk7XG4gICAgICAgIGZvciAocm5nX3BwdHIgPSAwOyBybmdfcHB0ciA8IHJuZ19wb29sLmxlbmd0aDsgKytybmdfcHB0cikge1xuICAgICAgICAgICAgcm5nX3Bvb2xbcm5nX3BwdHJdID0gMDtcbiAgICAgICAgfVxuICAgICAgICBybmdfcHB0ciA9IDA7XG4gICAgfVxuICAgIC8vIFRPRE86IGFsbG93IHJlc2VlZGluZyBhZnRlciBmaXJzdCByZXF1ZXN0XG4gICAgcmV0dXJuIHJuZ19zdGF0ZS5uZXh0KCk7XG59XG52YXIgU2VjdXJlUmFuZG9tID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIFNlY3VyZVJhbmRvbSgpIHtcbiAgICB9XG4gICAgU2VjdXJlUmFuZG9tLnByb3RvdHlwZS5uZXh0Qnl0ZXMgPSBmdW5jdGlvbiAoYmEpIHtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBiYS5sZW5ndGg7ICsraSkge1xuICAgICAgICAgICAgYmFbaV0gPSBybmdfZ2V0X2J5dGUoKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgcmV0dXJuIFNlY3VyZVJhbmRvbTtcbn0oKSk7XG5leHBvcnQgeyBTZWN1cmVSYW5kb20gfTtcbiJdfQ==