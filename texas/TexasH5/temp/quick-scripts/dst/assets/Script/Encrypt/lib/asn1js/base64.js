
                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/Script/Encrypt/lib/asn1js/base64.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, 'fdf1dCyNLVGjoe+1DTxZMXF', 'base64');
// Script/Encrypt/lib/asn1js/base64.js

"use strict";

exports.__esModule = true;
exports.Base64 = void 0;
// Base64 JavaScript decoder
// Copyright (c) 2008-2013 Lapo Luchini <lapo@lapo.it>
// Permission to use, copy, modify, and/or distribute this software for any
// purpose with or without fee is hereby granted, provided that the above
// copyright notice and this permission notice appear in all copies.
//
// THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
// WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
// MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
// ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
// WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
// ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
// OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

/*jshint browser: true, strict: true, immed: true, latedef: true, undef: true, regexdash: false */
var decoder;
var Base64 = {
  decode: function decode(a) {
    var i;

    if (decoder === undefined) {
      var b64 = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
      var ignore = "= \f\n\r\t\xA0\u2028\u2029";
      decoder = Object.create(null);

      for (i = 0; i < 64; ++i) {
        decoder[b64.charAt(i)] = i;
      }

      decoder['-'] = 62; //+

      decoder['_'] = 63; //-

      for (i = 0; i < ignore.length; ++i) {
        decoder[ignore.charAt(i)] = -1;
      }
    }

    var out = [];
    var bits = 0;
    var char_count = 0;

    for (i = 0; i < a.length; ++i) {
      var c = a.charAt(i);

      if (c == "=") {
        break;
      }

      c = decoder[c];

      if (c == -1) {
        continue;
      }

      if (c === undefined) {
        throw new Error("Illegal character at offset " + i);
      }

      bits |= c;

      if (++char_count >= 4) {
        out[out.length] = bits >> 16;
        out[out.length] = bits >> 8 & 0xFF;
        out[out.length] = bits & 0xFF;
        bits = 0;
        char_count = 0;
      } else {
        bits <<= 6;
      }
    }

    switch (char_count) {
      case 1:
        throw new Error("Base64 encoding incomplete: at least 2 bits missing");

      case 2:
        out[out.length] = bits >> 10;
        break;

      case 3:
        out[out.length] = bits >> 16;
        out[out.length] = bits >> 8 & 0xFF;
        break;
    }

    return out;
  },
  re: /-----BEGIN [^-]+-----([A-Za-z0-9+\/=\s]+)-----END [^-]+-----|begin-base64[^\n]+\n([A-Za-z0-9+\/=\s]+)====/,
  unarmor: function unarmor(a) {
    var m = Base64.re.exec(a);

    if (m) {
      if (m[1]) {
        a = m[1];
      } else if (m[2]) {
        a = m[2];
      } else {
        throw new Error("RegExp out of sync");
      }
    }

    return Base64.decode(a);
  }
};
exports.Base64 = Base64;

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzc2V0c1xcU2NyaXB0XFxFbmNyeXB0XFxsaWJcXGFzbjFqc1xcYmFzZTY0LmpzIl0sIm5hbWVzIjpbImRlY29kZXIiLCJCYXNlNjQiLCJkZWNvZGUiLCJhIiwiaSIsInVuZGVmaW5lZCIsImI2NCIsImlnbm9yZSIsIk9iamVjdCIsImNyZWF0ZSIsImNoYXJBdCIsImxlbmd0aCIsIm91dCIsImJpdHMiLCJjaGFyX2NvdW50IiwiYyIsIkVycm9yIiwicmUiLCJ1bmFybW9yIiwibSIsImV4ZWMiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFDQTtBQUNBLElBQUlBLE9BQUo7QUFDTyxJQUFJQyxNQUFNLEdBQUc7QUFDaEJDLEVBQUFBLE1BQU0sRUFBRSxnQkFBVUMsQ0FBVixFQUFhO0FBQ2pCLFFBQUlDLENBQUo7O0FBQ0EsUUFBSUosT0FBTyxLQUFLSyxTQUFoQixFQUEyQjtBQUN2QixVQUFJQyxHQUFHLEdBQUcsa0VBQVY7QUFDQSxVQUFJQyxNQUFNLEdBQUcsNEJBQWI7QUFDQVAsTUFBQUEsT0FBTyxHQUFHUSxNQUFNLENBQUNDLE1BQVAsQ0FBYyxJQUFkLENBQVY7O0FBQ0EsV0FBS0wsQ0FBQyxHQUFHLENBQVQsRUFBWUEsQ0FBQyxHQUFHLEVBQWhCLEVBQW9CLEVBQUVBLENBQXRCLEVBQXlCO0FBQ3JCSixRQUFBQSxPQUFPLENBQUNNLEdBQUcsQ0FBQ0ksTUFBSixDQUFXTixDQUFYLENBQUQsQ0FBUCxHQUF5QkEsQ0FBekI7QUFDSDs7QUFDREosTUFBQUEsT0FBTyxDQUFDLEdBQUQsQ0FBUCxHQUFlLEVBQWYsQ0FQdUIsQ0FPSjs7QUFDbkJBLE1BQUFBLE9BQU8sQ0FBQyxHQUFELENBQVAsR0FBZSxFQUFmLENBUnVCLENBUUo7O0FBQ25CLFdBQUtJLENBQUMsR0FBRyxDQUFULEVBQVlBLENBQUMsR0FBR0csTUFBTSxD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Ly8gQmFzZTY0IEphdmFTY3JpcHQgZGVjb2RlclxuLy8gQ29weXJpZ2h0IChjKSAyMDA4LTIwMTMgTGFwbyBMdWNoaW5pIDxsYXBvQGxhcG8uaXQ+XG4vLyBQZXJtaXNzaW9uIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBhbmQvb3IgZGlzdHJpYnV0ZSB0aGlzIHNvZnR3YXJlIGZvciBhbnlcbi8vIHB1cnBvc2Ugd2l0aCBvciB3aXRob3V0IGZlZSBpcyBoZXJlYnkgZ3JhbnRlZCwgcHJvdmlkZWQgdGhhdCB0aGUgYWJvdmVcbi8vIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2UgYXBwZWFyIGluIGFsbCBjb3BpZXMuXG4vL1xuLy8gVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiBBTkQgVEhFIEFVVEhPUiBESVNDTEFJTVMgQUxMIFdBUlJBTlRJRVNcbi8vIFdJVEggUkVHQVJEIFRPIFRISVMgU09GVFdBUkUgSU5DTFVESU5HIEFMTCBJTVBMSUVEIFdBUlJBTlRJRVMgT0Zcbi8vIE1FUkNIQU5UQUJJTElUWSBBTkQgRklUTkVTUy4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFIEFVVEhPUiBCRSBMSUFCTEUgRk9SXG4vLyBBTlkgU1BFQ0lBTCwgRElSRUNULCBJTkRJUkVDVCwgT1IgQ09OU0VRVUVOVElBTCBEQU1BR0VTIE9SIEFOWSBEQU1BR0VTXG4vLyBXSEFUU09FVkVSIFJFU1VMVElORyBGUk9NIExPU1MgT0YgVVNFLCBEQVRBIE9SIFBST0ZJVFMsIFdIRVRIRVIgSU4gQU5cbi8vIEFDVElPTiBPRiBDT05UUkFDVCwgTkVHTElHRU5DRSBPUiBPVEhFUiBUT1JUSU9VUyBBQ1RJT04sIEFSSVNJTkcgT1VUIE9GXG4vLyBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFVTRSBPUiBQRVJGT1JNQU5DRSBPRiBUSElTIFNPRlRXQVJFLlxuLypqc2hpbnQgYnJvd3NlcjogdHJ1ZSwgc3RyaWN0OiB0cnVlLCBpbW1lZDogdHJ1ZSwgbGF0ZWRlZjogdHJ1ZSwgdW5kZWY6IHRydWUsIHJlZ2V4ZGFzaDogZmFsc2UgKi9cbnZhciBkZWNvZGVyO1xuZXhwb3J0IHZhciBCYXNlNjQgPSB7XG4gICAgZGVjb2RlOiBmdW5jdGlvbiAoYSkge1xuICAgICAgICB2YXIgaTtcbiAgICAgICAgaWYgKGRlY29kZXIgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdmFyIGI2NCA9IFwiQUJDREVGR0hJSktMTU5PUFFSU1RVVldYWVphYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5ejAxMjM0NTY3ODkrL1wiO1xuICAgICAgICAgICAgdmFyIGlnbm9yZSA9IFwiPSBcXGZcXG5cXHJcXHRcXHUwMEEwXFx1MjAyOFxcdTIwMjlcIjtcbiAgICAgICAgICAgIGRlY29kZXIgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgICAgICAgICAgZm9yIChpID0gMDsgaSA8IDY0OyArK2kpIHtcbiAgICAgICAgICAgICAgICBkZWNvZGVyW2I2NC5jaGFyQXQoaSldID0gaTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGRlY29kZXJbJy0nXSA9IDYyOyAvLytcbiAgICAgICAgICAgIGRlY29kZXJbJ18nXSA9IDYzOyAvLy1cbiAgICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCBpZ25vcmUubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICAgICAgICBkZWNvZGVyW2lnbm9yZS5jaGFyQXQoaSldID0gLTE7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgdmFyIG91dCA9IFtdO1xuICAgICAgICB2YXIgYml0cyA9IDA7XG4gICAgICAgIHZhciBjaGFyX2NvdW50ID0gMDtcbiAgICAgICAgZm9yIChpID0gMDsgaSA8IGEubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICAgIHZhciBjID0gYS5jaGFyQXQoaSk7XG4gICAgICAgICAgICBpZiAoYyA9PSBcIj1cIikge1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYyA9IGRlY29kZXJbY107XG4gICAgICAgICAgICBpZiAoYyA9PSAtMSkge1xuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGMgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIklsbGVnYWwgY2hhcmFjdGVyIGF0IG9mZnNldCBcIiArIGkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYml0cyB8PSBjO1xuICAgICAgICAgICAgaWYgKCsrY2hhcl9jb3VudCA+PSA0KSB7XG4gICAgICAgICAgICAgICAgb3V0W291dC5sZW5ndGhdID0gKGJpdHMgPj4gMTYpO1xuICAgICAgICAgICAgICAgIG91dFtvdXQubGVuZ3RoXSA9IChiaXRzID4+IDgpICYgMHhGRjtcbiAgICAgICAgICAgICAgICBvdXRbb3V0Lmxlbmd0aF0gPSBiaXRzICYgMHhGRjtcbiAgICAgICAgICAgICAgICBiaXRzID0gMDtcbiAgICAgICAgICAgICAgICBjaGFyX2NvdW50ID0gMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGJpdHMgPDw9IDY7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgc3dpdGNoIChjaGFyX2NvdW50KSB7XG4gICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiQmFzZTY0IGVuY29kaW5nIGluY29tcGxldGU6IGF0IGxlYXN0IDIgYml0cyBtaXNzaW5nXCIpO1xuICAgICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgICAgIG91dFtvdXQubGVuZ3RoXSA9IChiaXRzID4+IDEwKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgMzpcbiAgICAgICAgICAgICAgICBvdXRbb3V0Lmxlbmd0aF0gPSAoYml0cyA+PiAxNik7XG4gICAgICAgICAgICAgICAgb3V0W291dC5sZW5ndGhdID0gKGJpdHMgPj4gOCkgJiAweEZGO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBvdXQ7XG4gICAgfSxcbiAgICByZTogLy0tLS0tQkVHSU4gW14tXSstLS0tLShbQS1aYS16MC05K1xcLz1cXHNdKyktLS0tLUVORCBbXi1dKy0tLS0tfGJlZ2luLWJhc2U2NFteXFxuXStcXG4oW0EtWmEtejAtOStcXC89XFxzXSspPT09PS8sXG4gICAgdW5hcm1vcjogZnVuY3Rpb24gKGEpIHtcbiAgICAgICAgdmFyIG0gPSBCYXNlNjQucmUuZXhlYyhhKTtcbiAgICAgICAgaWYgKG0pIHtcbiAgICAgICAgICAgIGlmIChtWzFdKSB7XG4gICAgICAgICAgICAgICAgYSA9IG1bMV07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChtWzJdKSB7XG4gICAgICAgICAgICAgICAgYSA9IG1bMl07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJSZWdFeHAgb3V0IG9mIHN5bmNcIik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIEJhc2U2NC5kZWNvZGUoYSk7XG4gICAgfVxufTtcbiJdfQ==