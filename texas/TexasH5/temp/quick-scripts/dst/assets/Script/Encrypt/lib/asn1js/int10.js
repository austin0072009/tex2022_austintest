
                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/Script/Encrypt/lib/asn1js/int10.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, '4a9c8fyr/NC24OW3imfcYdR', 'int10');
// Script/Encrypt/lib/asn1js/int10.js

"use strict";

exports.__esModule = true;
exports.Int10 = void 0;
// Big integer base-10 printing library
// Copyright (c) 2014 Lapo Luchini <lapo@lapo.it>
// Permission to use, copy, modify, and/or distribute this software for any
// purpose with or without fee is hereby granted, provided that the above
// copyright notice and this permission notice appear in all copies.
//
// THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
// WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
// MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
// ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
// WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
// ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
// OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

/*jshint browser: true, strict: true, immed: true, latedef: true, undef: true, regexdash: false */
var max = 10000000000000; // biggest integer that can still fit 2^53 when multiplied by 256

var Int10 =
/** @class */
function () {
  function Int10(value) {
    this.buf = [+value || 0];
  }

  Int10.prototype.mulAdd = function (m, c) {
    // assert(m <= 256)
    var b = this.buf;
    var l = b.length;
    var i;
    var t;

    for (i = 0; i < l; ++i) {
      t = b[i] * m + c;

      if (t < max) {
        c = 0;
      } else {
        c = 0 | t / max;
        t -= c * max;
      }

      b[i] = t;
    }

    if (c > 0) {
      b[i] = c;
    }
  };

  Int10.prototype.sub = function (c) {
    // assert(m <= 256)
    var b = this.buf;
    var l = b.length;
    var i;
    var t;

    for (i = 0; i < l; ++i) {
      t = b[i] - c;

      if (t < 0) {
        t += max;
        c = 1;
      } else {
        c = 0;
      }

      b[i] = t;
    }

    while (b[b.length - 1] === 0) {
      b.pop();
    }
  };

  Int10.prototype.toString = function (base) {
    if ((base || 10) != 10) {
      throw new Error("only base 10 is supported");
    }

    var b = this.buf;
    var s = b[b.length - 1].toString();

    for (var i = b.length - 2; i >= 0; --i) {
      s += (max + b[i]).toString().substring(1);
    }

    return s;
  };

  Int10.prototype.valueOf = function () {
    var b = this.buf;
    var v = 0;

    for (var i = b.length - 1; i >= 0; --i) {
      v = v * max + b[i];
    }

    return v;
  };

  Int10.prototype.simplify = function () {
    var b = this.buf;
    return b.length == 1 ? b[0] : this;
  };

  return Int10;
}();

exports.Int10 = Int10;

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzc2V0c1xcU2NyaXB0XFxFbmNyeXB0XFxsaWJcXGFzbjFqc1xcaW50MTAuanMiXSwibmFtZXMiOlsibWF4IiwiSW50MTAiLCJ2YWx1ZSIsImJ1ZiIsInByb3RvdHlwZSIsIm11bEFkZCIsIm0iLCJjIiwiYiIsImwiLCJsZW5ndGgiLCJpIiwidCIsInN1YiIsInBvcCIsInRvU3RyaW5nIiwiYmFzZSIsIkVycm9yIiwicyIsInN1YnN0cmluZyIsInZhbHVlT2YiLCJ2Iiwic2ltcGxpZnkiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFDQTtBQUNBLElBQUlBLEdBQUcsR0FBRyxjQUFWLEVBQTBCOztBQUMxQixJQUFJQyxLQUFLO0FBQUc7QUFBZSxZQUFZO0FBQ25DLFdBQVNBLEtBQVQsQ0FBZUMsS0FBZixFQUFzQjtBQUNsQixTQUFLQyxHQUFMLEdBQVcsQ0FBQyxDQUFDRCxLQUFELElBQVUsQ0FBWCxDQUFYO0FBQ0g7O0FBQ0RELEVBQUFBLEtBQUssQ0FBQ0csU0FBTixDQUFnQkMsTUFBaEIsR0FBeUIsVUFBVUMsQ0FBVixFQUFhQyxDQUFiLEVBQWdCO0FBQ3JDO0FBQ0EsUUFBSUMsQ0FBQyxHQUFHLEtBQUtMLEdBQWI7QUFDQSxRQUFJTSxDQUFDLEdBQUdELENBQUMsQ0FBQ0UsTUFBVjtBQUNBLFFBQUlDLENBQUo7QUFDQSxRQUFJQyxDQUFKOztBQUNBLFNBQUtELENBQUMsR0FBRyxDQUFULEVBQVlBLENBQUMsR0FBR0YsQ0FBaEIsRUFBbUIsRUFBRUUsQ0FBckIsRUFBd0I7QUFDcEJDLE1BQUFBLENBQUMsR0FBR0osQ0FBQyxDQUFDRyxDQUFELENBQUQsR0FBT0wsQ0FBUCxHQUFXQyxDQUFmOztBQUNBLFVBQUlLLENBQUMsR0FBR1osR0FBUixFQUFhO0FBQ1RPLFFBQUFBLENBQUMsR0FBRyxDQUFKO0FBQ0gsT0FGRCxN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QUMsQ0FBQyxDQUFELENBQW5CLEdBQXlCLElBQWhDO0FBQ0gsR0FIRDs7QUFJQSxTQUFPUCxLQUFQO0FBQ0gsQ0F0RTBCLEVBQTNCIiwic291cmNlUm9vdCI6Ii8iLCJzb3VyY2VzQ29udGVudCI6WyIvLyBCaWcgaW50ZWdlciBiYXNlLTEwIHByaW50aW5nIGxpYnJhcnlcbi8vIENvcHlyaWdodCAoYykgMjAxNCBMYXBvIEx1Y2hpbmkgPGxhcG9AbGFwby5pdD5cbi8vIFBlcm1pc3Npb24gdG8gdXNlLCBjb3B5LCBtb2RpZnksIGFuZC9vciBkaXN0cmlidXRlIHRoaXMgc29mdHdhcmUgZm9yIGFueVxuLy8gcHVycG9zZSB3aXRoIG9yIHdpdGhvdXQgZmVlIGlzIGhlcmVieSBncmFudGVkLCBwcm92aWRlZCB0aGF0IHRoZSBhYm92ZVxuLy8gY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBhcHBlYXIgaW4gYWxsIGNvcGllcy5cbi8vXG4vLyBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiIEFORCBUSEUgQVVUSE9SIERJU0NMQUlNUyBBTEwgV0FSUkFOVElFU1xuLy8gV0lUSCBSRUdBUkQgVE8gVEhJUyBTT0ZUV0FSRSBJTkNMVURJTkcgQUxMIElNUExJRUQgV0FSUkFOVElFUyBPRlxuLy8gTUVSQ0hBTlRBQklMSVRZIEFORCBGSVRORVNTLiBJTiBOTyBFVkVOVCBTSEFMTCBUSEUgQVVUSE9SIEJFIExJQUJMRSBGT1Jcbi8vIEFOWSBTUEVDSUFMLCBESVJFQ1QsIElORElSRUNULCBPUiBDT05TRVFVRU5USUFMIERBTUFHRVMgT1IgQU5ZIERBTUFHRVNcbi8vIFdIQVRTT0VWRVIgUkVTVUxUSU5HIEZST00gTE9TUyBPRiBVU0UsIERBVEEgT1IgUFJPRklUUywgV0hFVEhFUiBJTiBBTlxuLy8gQUNUSU9OIE9GIENPTlRSQUNULCBORUdMSUdFTkNFIE9SIE9USEVSIFRPUlRJT1VTIEFDVElPTiwgQVJJU0lORyBPVVQgT0Zcbi8vIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgVVNFIE9SIFBFUkZPUk1BTkNFIE9GIFRISVMgU09GVFdBUkUuXG4vKmpzaGludCBicm93c2VyOiB0cnVlLCBzdHJpY3Q6IHRydWUsIGltbWVkOiB0cnVlLCBsYXRlZGVmOiB0cnVlLCB1bmRlZjogdHJ1ZSwgcmVnZXhkYXNoOiBmYWxzZSAqL1xudmFyIG1heCA9IDEwMDAwMDAwMDAwMDAwOyAvLyBiaWdnZXN0IGludGVnZXIgdGhhdCBjYW4gc3RpbGwgZml0IDJeNTMgd2hlbiBtdWx0aXBsaWVkIGJ5IDI1NlxudmFyIEludDEwID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIEludDEwKHZhbHVlKSB7XG4gICAgICAgIHRoaXMuYnVmID0gWyt2YWx1ZSB8fCAwXTtcbiAgICB9XG4gICAgSW50MTAucHJvdG90eXBlLm11bEFkZCA9IGZ1bmN0aW9uIChtLCBjKSB7XG4gICAgICAgIC8vIGFzc2VydChtIDw9IDI1NilcbiAgICAgICAgdmFyIGIgPSB0aGlzLmJ1ZjtcbiAgICAgICAgdmFyIGwgPSBiLmxlbmd0aDtcbiAgICAgICAgdmFyIGk7XG4gICAgICAgIHZhciB0O1xuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgbDsgKytpKSB7XG4gICAgICAgICAgICB0ID0gYltpXSAqIG0gKyBjO1xuICAgICAgICAgICAgaWYgKHQgPCBtYXgpIHtcbiAgICAgICAgICAgICAgICBjID0gMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGMgPSAwIHwgKHQgLyBtYXgpO1xuICAgICAgICAgICAgICAgIHQgLT0gYyAqIG1heDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGJbaV0gPSB0O1xuICAgICAgICB9XG4gICAgICAgIGlmIChjID4gMCkge1xuICAgICAgICAgICAgYltpXSA9IGM7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIEludDEwLnByb3RvdHlwZS5zdWIgPSBmdW5jdGlvbiAoYykge1xuICAgICAgICAvLyBhc3NlcnQobSA8PSAyNTYpXG4gICAgICAgIHZhciBiID0gdGhpcy5idWY7XG4gICAgICAgIHZhciBsID0gYi5sZW5ndGg7XG4gICAgICAgIHZhciBpO1xuICAgICAgICB2YXIgdDtcbiAgICAgICAgZm9yIChpID0gMDsgaSA8IGw7ICsraSkge1xuICAgICAgICAgICAgdCA9IGJbaV0gLSBjO1xuICAgICAgICAgICAgaWYgKHQgPCAwKSB7XG4gICAgICAgICAgICAgICAgdCArPSBtYXg7XG4gICAgICAgICAgICAgICAgYyA9IDE7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBjID0gMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGJbaV0gPSB0O1xuICAgICAgICB9XG4gICAgICAgIHdoaWxlIChiW2IubGVuZ3RoIC0gMV0gPT09IDApIHtcbiAgICAgICAgICAgIGIucG9wKCk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIEludDEwLnByb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uIChiYXNlKSB7XG4gICAgICAgIGlmICgoYmFzZSB8fCAxMCkgIT0gMTApIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIm9ubHkgYmFzZSAxMCBpcyBzdXBwb3J0ZWRcIik7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGIgPSB0aGlzLmJ1ZjtcbiAgICAgICAgdmFyIHMgPSBiW2IubGVuZ3RoIC0gMV0udG9TdHJpbmcoKTtcbiAgICAgICAgZm9yICh2YXIgaSA9IGIubGVuZ3RoIC0gMjsgaSA+PSAwOyAtLWkpIHtcbiAgICAgICAgICAgIHMgKz0gKG1heCArIGJbaV0pLnRvU3RyaW5nKCkuc3Vic3RyaW5nKDEpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBzO1xuICAgIH07XG4gICAgSW50MTAucHJvdG90eXBlLnZhbHVlT2YgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBiID0gdGhpcy5idWY7XG4gICAgICAgIHZhciB2ID0gMDtcbiAgICAgICAgZm9yICh2YXIgaSA9IGIubGVuZ3RoIC0gMTsgaSA+PSAwOyAtLWkpIHtcbiAgICAgICAgICAgIHYgPSB2ICogbWF4ICsgYltpXTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdjtcbiAgICB9O1xuICAgIEludDEwLnByb3RvdHlwZS5zaW1wbGlmeSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGIgPSB0aGlzLmJ1ZjtcbiAgICAgICAgcmV0dXJuIChiLmxlbmd0aCA9PSAxKSA/IGJbMF0gOiB0aGlzO1xuICAgIH07XG4gICAgcmV0dXJuIEludDEwO1xufSgpKTtcbmV4cG9ydCB7IEludDEwIH07XG4iXX0=