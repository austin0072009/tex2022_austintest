{
  "__type__": "cc.TextAsset",
  "_name": "asn1.d",
  "_objFlags": 0,
  "_native": "",
  "text": "import { Int10 } from \"./int10\";\nexport declare class Stream {\n    constructor(enc: Stream | number[], pos?: number);\n    private enc;\n    pos: number;\n    get(pos?: number): number;\n    hexDigits: string;\n    hexByte(b: number): string;\n    hexDump(start: number, end: number, raw: boolean): string;\n    isASCII(start: number, end: number): boolean;\n    parseStringISO(start: number, end: number): string;\n    parseStringUTF(start: number, end: number): string;\n    parseStringBMP(start: number, end: number): string;\n    parseTime(start: number, end: number, shortYear: boolean): string;\n    parseInteger(start: number, end: number): string | 0 | -1;\n    parseBitString(start: number, end: number, maxLength: number): string;\n    parseOctetString(start: number, end: number, maxLength: number): string;\n    parseOID(start: number, end: number, maxLength: number): string;\n}\nexport declare class ASN1 {\n    constructor(stream: Stream, header: number, length: number, tag: ASN1Tag, sub: ASN1[]);\n    private stream;\n    private header;\n    private length;\n    private tag;\n    sub: ASN1[];\n    typeName(): string;\n    content(maxLength: number): string | 0 | -1;\n    toString(): string;\n    toPrettyString(indent: string): string;\n    posStart(): number;\n    posContent(): number;\n    posEnd(): number;\n    toHexString(): string;\n    static decodeLength(stream: Stream): number;\n    /**\n     * Retrieve the hexadecimal value (as a string) of the current ASN.1 element\n     * @returns {string}\n     * @public\n     */\n    getHexStringValue(): string;\n    static decode(str: Stream | number[]): ASN1;\n}\nexport declare class ASN1Tag {\n    constructor(stream: Stream);\n    tagClass: number;\n    tagConstructed: boolean;\n    tagNumber: number | Int10;\n    isUniversal(): boolean;\n    isEOC(): boolean;\n}\n"
}