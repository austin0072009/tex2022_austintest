{"version":3,"sources":["assets\\Script\\modules\\@mogafa\\slots\\lib\\SymbolBoard\\HoldWinBase.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"/","sourcesContent":["import ReelBase from \"./ReelBase\";\nimport SymbolBoardBase from \"./SymbolBoardBase\";\nimport { MogafaSlots } from \"../MogafaSlots\";\nimport { SymbolBoardStatus } from \"./SymbolBoardStatus\";\nimport FguiComponentBase from \"../../../fairygui-component/lib/FguiComponentBase\";\n\n\nexport default abstract class HoldWinBase extends FguiComponentBase implements MogafaSlots {\n    /**\n     * 关卡编码\n     */\n    private _stageCode: string;\n    /**\n     * 所属棋盘\n     */\n    private _symbolBoard: SymbolBoardBase;\n    /**\n     * 获取关卡编码\n     */\n    get stageCode(): string {\n        return this._stageCode;\n    }\n    /**\n     * 设置关卡编码\n     */\n    set stageCode(value: string) {\n        this._stageCode = value;\n        if (this._column) {\n            this._column.stageCode = value;\n        }\n    }\n    /**\n     * 获取棋盘\n     */\n    get symbolBoard(): SymbolBoardBase {\n        return this._symbolBoard;\n    }\n    /**\n     * Sets symbol board\n     * 设置棋盘\n     */\n    set symbolBoard(value: SymbolBoardBase) {\n        this._symbolBoard = value;\n        if (this._column) {\n            this._column.symbolBoard = value;\n        }\n    }\n    /**\n     * Board status of symbol base\n     * 棋盘状态\n     */\n    private _boardStatus: SymbolBoardStatus;\n    get boardStatus(): SymbolBoardStatus {\n        return this._boardStatus;\n    }\n    set boardStatus(value: SymbolBoardStatus) {\n        this._boardStatus = value;\n        if (this.column) {\n            this.column.boardStatus = value;\n        }\n        this.status = value;\n    }\n\n    /**\n     * Status  of symbol base\n     * 棋子状态\n     */\n    private _status: SymbolBoardStatus;\n    get status(): SymbolBoardStatus {\n        return this._status;\n    }\n    set status(value: SymbolBoardStatus) {\n        this._status = value;\n        if (this.column) {\n            this.column.status = value;\n        }\n    }\n    protected abstract get holdWinComponentName(): string;\n    protected abstract get holdWinControllerName(): string;\n    private _index: number;\n    public isHoldWin: boolean = false;\n    protected _column: ReelBase;\n    private _mask: fgui.GObject;\n    public get column(): ReelBase {\n        return this._column;\n    }\n    public set index(value: number) {\n        this._index = value;\n        if (this._column) {\n            this._column.index = value;\n        }\n    }\n    public get index(): number {\n        return this._index;\n    }\n    protected createChildComponents() {\n        super.createChildComponents();\n        this._mask = this.getChild(\"mask\");\n        this._column = this.addColumn();\n        //this._column.fguiComponent.setMask(null, false);\n        this._column.fguiX = 0;\n        this._column.fguiY = 0;\n        this._column.index = this.index;\n        this._column.stageCode = this.stageCode;\n        this._column.holdWin = this;\n        this._column.symbolBoard = this.symbolBoard;\n    }\n    protected abstract addColumn(): ReelBase;\n    public beforeStartWaitingResults(): void {\n        if (this._column) {\n            this._column.beforeStartWaitingResults();\n        }\n    }\n    public beforeStopWaitingResults(): void {\n        if (this._column) {\n            this._column.beforeStopWaitingResults();\n        }\n    }\n    public onColumnStopped(listener: Function, target?: any): void {\n        if (this._column) {\n            this._column.onColumnStopped(listener, target);\n        }\n    }\n    public holdWin() {\n        if (this._column) {\n            this.setControllerProperty(this.holdWinControllerName, 1);\n            let holdWin = this.fguiComponent.getChild(this.holdWinComponentName);\n            if (holdWin) {\n                this.holdWinShow();\n                this.isHoldWin = true;\n                this.fguiComponent.addChild(holdWin);\n            }\n        }\n    }\n\n    protected holdWinShow(): void { }\n\n    public unholdWin(index?: number) {\n        if (this.isHoldWin && index === this._index) {\n            this.setControllerProperty(this.holdWinControllerName, 0);\n            this.isHoldWin = false;\n            this.holdWinEnd();\n        }\n    }\n\n    protected holdWinEnd(): void { }\n\n    public receivePrizeShowCompleted(position: number): void {\n        let parent = (this.parent as any) as SymbolBoardBase;\n        if (parent) {\n            parent.receivePrizeShowCompleted(position);\n        }\n    }\n    public receiveMockCodeReplaced(columnIndex: number, cellIndex: number) {\n        const parent = (this.parent as any) as SymbolBoardBase;\n        if (parent) {\n            parent.receiveMockCodesReplaced(columnIndex, cellIndex);\n        }\n    }\n    receiveReelStopped(columnIndex: number): void {\n        const parent = (this.parent as any) as SymbolBoardBase;\n        if (parent) {\n            parent.receiveReelStopped(columnIndex);\n        }\n    }\n    public reset(): void {\n        this.isHoldWin = false;\n    }\n    public showMask() {\n        this.fguiComponent.setMask(this._mask, false);\n    }\n    public hideMask() {\n        this.fguiComponent.setMask(null, false);\n    }\n}\n"]}