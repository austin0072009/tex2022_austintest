{"version":3,"sources":["assets\\Script\\modules\\@mogafa\\slots\\lib\\SymbolBoard\\SymbolBase.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"/","sourcesContent":["import SymbolSpineResource from \"./SymbolSpineResource\";\nimport SymbolSpineShowConfig from \"./SymbolSpineShowConfig\";\nimport { MogafaSlots } from \"../MogafaSlots\";\nimport { SymbolBoardStatus } from \"./SymbolBoardStatus\";\nimport CellBase from \"./CellBase\";\nimport { SymbolBoardConst } from \"./SymbolBoardConst\";\nimport SlotGameStageBase from \"../GameStage/SlotGameStageBase\";\nimport MogafaSlotsGameStage from \"../MogafaSlotsGameStage\";\nimport FguiComponentBase from \"../../../fairygui-component/lib/FguiComponentBase\";\nclass SpineTrackEntryCount {\n    private _componentName: string;\n    private _trackEntries: { trackEntry: any; count: number }[] = [];\n    private _expectedTimes: number;\n    constructor(componentName: string, expectedTimes: number) {\n        this._componentName = componentName;\n        this._expectedTimes = expectedTimes;\n        if (this._expectedTimes == null) {\n            this._expectedTimes = 1;\n        }\n    }\n    public get componentName(): string {\n        return this._componentName;\n    }\n    public get trackEntries(): { trackEntry: any; count: number }[] {\n        return this._trackEntries;\n    }\n    /**\n     * 添加trackEntry\n     * @param trackEntry trackEntry\n     */\n    public addTrackEntry(trackEntry: any): void {\n        const old = this._trackEntries.find((t) => t.trackEntry == trackEntry);\n        if (!old) {\n            this._trackEntries.push({ trackEntry: trackEntry, count: 0 });\n        }\n    }\n    /**\n     * 完成一次动画播放\n     *\n     * @param trackEntry trackEntry\n     * @returns 全部完成指定次数返回true\n     */\n    public completedOnce(trackEntry: any): boolean {\n        let track = this._trackEntries.find((t) => t.trackEntry.animation.name == trackEntry.trackEntry.animation.name);\n        if (track) {\n            track.count++;\n        }\n        return this.completed;\n    }\n    /**\n     * 获取是否完成\n     */\n    public get completed(): boolean {\n        let track = this._trackEntries.find((t) => t.count < this.expectedTimes);\n        return !track;\n    }\n\n    public set expectedTimes(value: number) {\n        this._expectedTimes = value;\n    }\n\n    public get expectedTimes(): number {\n        return this._expectedTimes;\n    }\n}\nexport default abstract class SymbolBase extends FguiComponentBase implements MogafaSlots {\n    /**\n     * 关卡编码\n     */\n    private _stageCode: string;\n    /**\n     * 所属格子\n     */\n    private _cell: CellBase;\n\n    /**\n     * 获取关卡编码\n     */\n    get stageCode(): string {\n        return this._stageCode;\n    }\n    /**\n     * 设置关卡编码\n     */\n    set stageCode(value: string) {\n        this._stageCode = value;\n    }\n    /**\n     * 获取所属格子\n     */\n    get cell(): CellBase {\n        return this._cell;\n    }\n    /**\n     * 设置所属格子\n     */\n    set cell(value: CellBase) {\n        this._cell = value;\n    }\n    /**\n     * Board status of symbol base\n     * 棋盘状态\n     */\n    private _boardStatus: SymbolBoardStatus;\n    get boardStatus(): SymbolBoardStatus {\n        return this._boardStatus;\n    }\n    set boardStatus(value: SymbolBoardStatus) {\n        this._boardStatus = value;\n    }\n\n    /**\n     * Status  of symbol base\n     * 棋子状态\n     */\n    protected _status: SymbolBoardStatus;\n    get status(): SymbolBoardStatus {\n        return this._status;\n    }\n    set status(value: SymbolBoardStatus) {\n        this._status = value;\n        if (value === SymbolBoardStatus.Stopped) {\n            this.playSpineByConfig(this.spineShowAfterStopConfigName);\n        }\n        if (value === SymbolBoardStatus.Ready) {\n            let matchedLines: number[][] = null;\n            if (SlotGameStageBase.spinResults) {\n                let slot = SlotGameStageBase.spinResults.slots[this.cell.reel.symbolBoard.index];\n                matchedLines = slot.matchedLines;\n            }\n            if (!matchedLines || matchedLines.length == 0) {\n                this.playSpineByConfig(this.spineShowForStationaryBoardConfigName);\n            }\n        }\n    }\n    /**\n     * 棋子spine动画组件名称\n     * 一个棋子支持多个spine动画组件\n     * 请参照SlotGameStageBase的symbolSpineUrls\n     * 资源的顺序与组件的顺序一致\n     */\n    protected abstract get spineComponentNames(): string[];\n    /**\n     * 棋子停止时需要播放动画的设置\n     */\n    protected abstract get spineShowAfterStop(): SymbolSpineShowConfig[];\n    /**\n     * Gets spine show for stationary board config name\n     * 获取棋盘静止时需要播放的spine动画配置名称\n     * （静止的含义是无棋子替换、无连线展示、无筹码结算时的棋盘，准备好下一次spin时的状态）\n     */\n    protected abstract get spineShowForStationaryBoardConfigName(): string;\n    /**\n     * Gets spine show after stop config name\n     * 获取棋子停下时播放的spine动画配置名称\n     */\n    protected abstract get spineShowAfterStopConfigName(): string;\n\n    /**\n     * 棋子中奖展示是需要播放动画的设置\n     */\n    protected abstract get spineShowForPrize(): SymbolSpineShowConfig[];\n    /**\n     * Gets spine show for prize config name\n     * 获取棋子展示中奖连线时播放的spine动画配置名称\n     */\n    protected abstract get spineShowForPrizeConfigName(): string;\n    /**\n     * Gets spine show configs\n     * 获取spine展示配置\n     */\n    protected abstract get spineShowConfigs(): { [key: string]: SymbolSpineShowConfig[] };\n\n    /**\n     * 棋子的spine动画组件，这是通过spineComponentNames名称加载的\n     */\n    private _spineComponents: Map<string, sp.Skeleton> = new Map<string, sp.Skeleton>();\n\n    /**\n     * 保存棋子在棋盘上连续编码的位置\n     * 当中奖展示效果结束后，会将这个位置报告给棋盘\n     */\n    protected _finalPosition: number;\n    private _index: number;\n    private _code: number;\n    private _isFinal: boolean = false;\n    private _assets: number;\n    private _gameStage: SlotGameStageBase;\n    protected symbolGroup: fgui.GGroup;\n    private _trackEntries: SpineTrackEntryCount[];\n    private isPlayByConfig: boolean = false;\n    private playByConfigCallback: Function;\n    protected get codeControllerName(): string {\n        return \"code\";\n    }\n    /**\n     * 获取fairygui编辑器设置的inline控制器名称\n     */\n    protected get inLineControllerName(): string {\n        return \"inLine\";\n    }\n    /**\n     * 获取展示inline效果的控制器编码\n     */\n    protected get inLineControllerCode(): number {\n        return 1;\n    }\n    protected get symbolGroupComponentName(): string {\n        return \"symbolGroup\";\n    }\n\n    public set code(code: number) {\n        if (code >= SymbolBoardConst.FINAL_CODE_OFFSET) {\n            this._isFinal = true;\n            code = code - SymbolBoardConst.FINAL_CODE_OFFSET;\n        } else {\n            this._isFinal = false;\n        }\n        this._code = code;\n        this.setControllerProperty(this.codeControllerName, code);\n    }\n    public get code(): number {\n        return this._code;\n    }\n    get isFinal(): boolean {\n        return this._isFinal;\n    }\n    public get assets(): number {\n        return this._assets;\n    }\n    public set assets(value: number) {\n        this._assets = value;\n    }\n    public get index(): number {\n        return this._index;\n    }\n    public set index(value: number) {\n        this._index = value;\n    }\n    /**\n     * 播放一组动画中的最后一个动画的trackEntry列表\n     * （每一个spine组件对应一个trackEntry）\n     * 我们用这个trackEntry来监听这一组动画播放结束\n     * （我们定义一组动画播放完成一次的含义是这一组动画所有的动画播放一次）\n     */\n    protected get trackEntries(): SpineTrackEntryCount[] {\n        return this._trackEntries;\n    }\n    /**\n     * 获取棋子spine组件列表\n     */\n    protected get spineComponents(): Map<string, sp.Skeleton> {\n        return this._spineComponents;\n    }\n    /**\n     * 获取棋子spine资源\n     */\n    protected get spineResources(): SymbolSpineResource {\n        // if (!this._gameStage) {\n        //     this._gameStage = this.findGameStage();\n        //     if (!this._gameStage) {\n        //         return null;\n        //     }\n        // }\n        let resources = null; //this._gameStage.getSymbolSpineResourcesByCode(this.code);\n        if (resources == null) {\n            resources = MogafaSlotsGameStage.gameStages[this.stageCode].symbolSpineResources.find(\n                (s) => s.code == this.code\n            );\n        }\n        return resources;\n    }\n    protected allChildCreated(): void {\n        super.allChildCreated();\n        if (this.symbolGroupComponentName) {\n            const component = this.getChild(this.symbolGroupComponentName);\n            if (component) {\n                this.symbolGroup = component.asGroup;\n            }\n        }\n    }\n    private findGameStage(): SlotGameStageBase {\n        let parent = this.parent;\n        while (parent.parent) {\n            parent = parent.parent;\n        }\n        return (parent as unknown) as SlotGameStageBase;\n    }\n    protected createChildComponents() {\n        if (this.spineComponentNames) {\n            for (let i = 0; i < this.spineComponentNames.length; i++) {\n                let spineContainer = this.getChild(this.spineComponentNames[i]).asGraph;\n                if (!spineContainer) {\n                    cc.error(`包${this.packageName}或spine容器${this.spineComponentNames}不存在`);\n                    return;\n                }\n                const spineComponent = spineContainer.node.addComponent(sp.Skeleton);\n                this._spineComponents.set(this.spineComponentNames[i], spineComponent);\n                spineComponent.setCompleteListener(this.onSpineCompletedOnce.bind(this));\n            }\n        }\n    }\n    public stopShow(): void {\n        const stopShow = this.spineShowAfterStop.filter((c) => c.code == this.code);\n        if (stopShow) {\n            for (let i = 0; i < stopShow.length; i++) {\n                this.spinePlay(stopShow[i]);\n            }\n        }\n    }\n    public startMove(): void { }\n    private onSpineCompletedOnce(trackEntry: any, loopCount: number): void {\n        if (!this.trackEntries) {\n            return;\n        }\n        let completed: boolean = false;\n        for (let i = 0; i < this._trackEntries.length; i++) {\n            const trackEntryCount = this.trackEntries[i];\n            let tracks = trackEntryCount.trackEntries.filter(\n                (t) => t.trackEntry.animation.name == trackEntry.animation.name\n            );\n            if (tracks && tracks.length > 0) {\n                for (let i = 0; i < tracks.length; i++) {\n                    const track = tracks[i];\n                    completed = trackEntryCount.completedOnce(track);\n                }\n                //break;\n            }\n        }\n        if (completed) {\n            this.checkAllSpineShowForPrizeCompleted();\n        }\n    }\n    private checkAllSpineShowForPrizeCompleted(): void {\n        let allCompleted: boolean = true;\n        for (let trackEntryCount of this._trackEntries) {\n            if (!trackEntryCount.completed) {\n                allCompleted = false;\n                break;\n            }\n        }\n        if (allCompleted) {\n            if (this.isPlayByConfig) {\n                if (this.playByConfigCallback) {\n                    if (this.symbolGroup) {\n                        this.symbolGroup.visible = true;\n                    }\n                    this.playByConfigCallback();\n                }\n            } else {\n                this.prizeShowEnd();\n            }\n        }\n    }\n    protected spinePlay(spine: SymbolSpineShowConfig): any {\n        const spineComponent = this._spineComponents.get(spine.spineComponentName);\n        const spineResource = this.spineResources.resources.get(spine.spineName);\n        let tarckEntry: any;\n        if (spineComponent && spineResource) {\n            spineComponent.node.active = true;\n            if (this.symbolGroup) {\n                this.symbolGroup.visible = false;\n            }\n            spineComponent.skeletonData = spineResource;\n\n            let count = spine.playParameters.length;\n            if (spine.skin) {\n                spineComponent.setSkin(spine.skin);\n            }\n\n            if (spine.scale) {\n                spineResource.scale = spine.scale\n                spineComponent.node.scale = spine.scale\n            }\n\n            spineComponent.premultipliedAlpha = spine.premultipliedAlpha\n\n            for (let i = 0; i < spine.playParameters.length; i++) {\n                const animation = spine.playParameters[i];\n                const isLast = i == count - 1;\n                const isLoop = isLast ? animation.isLoop : false;\n                if (i == 0) {\n                    tarckEntry = spineComponent.setAnimation(0, animation.animationName, isLoop);\n                } else {\n                    tarckEntry = spineComponent.addAnimation(0, animation.animationName, isLoop);\n                }\n            }\n        }\n        return tarckEntry;\n    }\n    public startPrizeShow(finalPosition: number): void {\n        // console.log(\"startPrizeShow\")\n        this.isPlayByConfig = false;\n        this.playByConfigCallback = null;\n        this._finalPosition = finalPosition;\n        if (this.inLineControllerName) {\n            this.setControllerProperty(this.inLineControllerName, this.inLineControllerCode);\n        }\n        const playing = this.spineShow(this.spineShowForPrize);\n        if (!playing) {\n            this.playPrizeShow();\n        }\n    }\n    private spineShow(configs: SymbolSpineShowConfig[]): boolean {\n        this._trackEntries = [];\n        let canBeShow: boolean = false;\n        const prizeShowConfigs = configs.filter((s) => s.code == this.code);\n        if (!this.spineComponents || !prizeShowConfigs || prizeShowConfigs.length == 0) {\n            return canBeShow;\n        }\n        for (let i = 0; i < prizeShowConfigs.length; i++) {\n            let tarckEntry = this.spinePlay(prizeShowConfigs[i]);\n            if (tarckEntry) {\n                let trackCount = this._trackEntries.find(\n                    (t) => t.componentName == prizeShowConfigs[i].spineComponentName\n                );\n                if (!trackCount) {\n                    trackCount = new SpineTrackEntryCount(\n                        prizeShowConfigs[i].spineComponentName,\n                        prizeShowConfigs[i].completeCount\n                    );\n                    trackCount.addTrackEntry(tarckEntry);\n                    this._trackEntries.push(trackCount);\n                }\n                canBeShow = true;\n            }\n        }\n        return canBeShow;\n    }\n    protected playPrizeShow(): void {\n        setTimeout(() => this.prizeShowEnd(), 500);\n    }\n    protected prizeShowEnd(): void {\n        if (this.symbolGroup) {\n            this.symbolGroup.visible = true;\n        }\n        for (let spineComponent of this._spineComponents) {\n            spineComponent[1].node.active = false;\n            spineComponent[1].clearTracks();\n            spineComponent[1].skeletonData = null;\n        }\n        this.setControllerProperty(this.inLineControllerName, 0);\n        this.notifyPrizeShowCompleted();\n    }\n    protected notifyPrizeShowCompleted(): void {\n        const parent = (this.parent as unknown) as CellBase;\n        if (parent) {\n            parent.receivePrizeShowCompleted(this._finalPosition);\n        }\n    }\n    /**\n     * 根据配置名称播放spine动画\n     *\n     * @param configName spine配置名称\n     * @param callback spine执行完后回调\n     */\n    public playSpineByConfig(configName: string, callback?: Function): void {\n        if (!configName) {\n            if (callback) {\n                callback();\n            }\n            return;\n        }\n        const configs = this.spineShowConfigs[configName];\n        if (configs) {\n            this.isPlayByConfig = true;\n            this.playByConfigCallback = callback;\n            const playing = this.spineShow(configs);\n            if (!playing) {\n                if (callback) {\n                    if (this.symbolGroup) {\n                        this.symbolGroup.visible = true;\n                    }\n                    callback();\n                }\n            }\n        } else {\n            if (callback) {\n                if (this.symbolGroup) {\n                    this.symbolGroup.visible = true;\n                }\n                callback();\n            }\n        }\n    }\n    public reset(): void {\n        if (this.symbolGroup) {\n            this.symbolGroup.visible = true;\n        }\n        for (let spineComponent of this._spineComponents) {\n            spineComponent[1].node.active = false;\n            spineComponent[1].clearTracks();\n            spineComponent[1].skeletonData = null;\n        }\n        this.setControllerProperty(this.inLineControllerName, 0);\n        this._trackEntries = [];\n        this._isFinal = false;\n        this.unscheduleAllCallbacks();\n    }\n    doubleChessShow(): void {\n        if (this.assets == 2 && (this.code == 1 || this.code == 0)) {\n            this.setControllerProperty(\"doubleShow\", 1);\n        } else {\n            this.setControllerProperty(\"doubleShow\", 0);\n        }\n    }\n    public fixedCellShow(): void { }\n    public fixedCellHide(): void { }\n}\n"]}