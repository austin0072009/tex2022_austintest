{"version":3,"sources":["assets\\Script\\modules\\@mogafa\\fairygui-component\\lib\\analytics\\mogafa\\mogafaEventReporter.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"/","sourcesContent":["import EventReporter from \"../EventReporter\";\nimport CommonEventParameter from \"../commonEventParameter\";\nimport EventParameter from \"../EventParameter\";\nimport ReportableObject from \"../reportableObject\";\nimport AssetGetter from \"./assetGettable\";\nimport MogafaCommonEventParameter from \"./mogafaCommonEventParameter\";\nimport MogafaReportableObject from \"./mogafaReportableObject\";\nimport { HttpResponse } from \"../../../../utils/lib/HttpInterface\";\nimport HttpApi from \"../../../../../@slotsmaster/ui-common/lib/HttpApi\";\nconst REPORT_LOCAL_NAME = \"reportData\";\ninterface ReportResponse {\n    requestId: string;\n    timestamp: number;\n    data: any;\n}\nexport default class MoagfaEventReporter implements EventReporter {\n    private readonly MaxEventCount: number = 100;\n    private readonly ReportInterval: number = 5000;\n    private readonly reportUrl: string = \"https://0q7op0mbp1.execute-api.us-west-2.amazonaws.com/prod/events\";\n    private readonly assetGetter: AssetGetter;\n    private _isReporting = false;\n    private commonParameter: MogafaCommonEventParameter;\n    constructor(assetGetter: AssetGetter) {\n        this.assetGetter = assetGetter;\n    }\n    initialize(commonParamter: CommonEventParameter): void {\n        this.commonParameter = commonParamter as MogafaCommonEventParameter;\n        //todo:从本地获取之前保存的数据，然后上报\n        this.readFromLocal();\n        setInterval(() => {\n            this.callLogEventReportUp();\n        }, 10000);\n    }\n    private logEventReportableObject(reportableObject: ReportableObject): void {\n        let mogafaReportableObject = reportableObject as MogafaReportableObject;\n        mogafaReportableObject.assets = this.assetGetter.getAssets();\n        this.commonParameter.addEvent(reportableObject);\n        if (this.commonParameter.events.length >= this.MaxEventCount) {\n            //调用http请求\n            this.callLogEventReportUp();\n            this.commonParameter.clearEvents();\n        }\n        //todo:存储在本地\n        this.saveToLocal(this.commonParameter);\n    }\n\n    private async reportUp(commonParameter: MogafaCommonEventParameter) {\n        let rst: HttpResponse<ReportResponse> = await HttpApi.http.post(this.reportUrl, commonParameter, {\n            headers: {\n                gameId: commonParameter.appId,\n            },\n        })\n        if (rst.code != 0) {\n            this.saveToLocal(commonParameter);\n        }\n    }\n\n    private callLogEventReportUp() {\n        if (!this._isReporting) {\n            this._isReporting = true;\n            this.reportUp(this.commonParameter);\n        }\n    }\n\n    /**\n     *存储到本地，防止丢数据\n     */\n    private saveToLocal(commonParameter: MogafaCommonEventParameter) {\n        let saveData = commonParameter.toEventParameters();\n        let saveLocal = JSON.stringify(saveData);\n        cc.sys.localStorage.setItem(REPORT_LOCAL_NAME, saveLocal);\n        this.commonParameter.clearEvents();\n    }\n\n    /**\n     *获取本地缓存，并清空本地缓村\n     */\n    private readFromLocal() {\n        let sysValue = cc.sys.localStorage.getItem(REPORT_LOCAL_NAME);\n        if (sysValue) {\n            cc.sys.localStorage.removeItem(REPORT_LOCAL_NAME);\n            let reportData: CommonEventParameter = JSON.parse(sysValue);\n            if (reportData) {\n                let reportObj = reportData as MogafaCommonEventParameter;\n                //上报\n                this.reportUp(reportObj);\n            }\n        }\n    }\n\n    logEvent(name: any): void;\n    logEvent(name: any, parameterName: string, parameterValue: number): void;\n    logEvent(name: any, parameterName: string, parameterValue: string): void;\n    logEvent(name: any, ...parameters: EventParameter[]): void;\n    logEvent(name: any, parameterName?: any, parameterValue?: any, ...rest: any[]) {\n        if (!this.instanceOfReportableObject(name)) {\n            return;\n        }\n        this.logEventReportableObject((name as unknown) as ReportableObject);\n    }\n    private instanceOfReportableObject(object: any): object is ReportableObject {\n        return \"eventName\" in object || \"toEventParameters\" in object;\n    }\n}\n"]}