{"version":3,"sources":["assets\\Script\\BaseFrame\\RecordUiLayer.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"/","sourcesContent":["import voiceNative from \"./VoiceNative\";\nexport default class RecordUiLayer {\n    private static _instance: RecordUiLayer;\n\n    public static instance() {\n        if (!this._instance) {\n            this._instance = new RecordUiLayer();\n        }\n        return this._instance;\n    }\n\n\n    public SoundBtnNode: cc.Node;\n    public _lastPlayTime: number;\n    // onLoad() {\n    //     voiceNative.init();\n    //     this.SoundBtnNode.active = true;\n    //     this.showMicBtn(true);\n    // }\n\n    init(node: cc.Node) {\n        this.SoundBtnNode = node;\n        voiceNative.init();\n        this.SoundBtnNode.active = true;\n        this.showMicBtn(true);\n    }\n\n    //是否显示麦克风按钮，并根据显示状态注册监听事件\n    public showMicBtn(enable) {\n        let self = this;\n        cc.log(\"GameManager ShowMicBtn: \" + enable);\n        let lastTouchTime = null;\n        self.SoundBtnNode.active = enable;\n        let micBtnDown = function (event) {\n            cc.log(\"GameManager micBtn event down\");\n            lastTouchTime = Date.now();\n            //开始录音\n            voiceNative.prepare(\"record.amr\");\n        };\n\n        let micBtnUp = function (event) {\n            cc.log(\"GameManager micBtn event up\");\n            // voiceNativeCall.SetMicMute(true);\n            if (Date.now() - lastTouchTime < 100) {\n                voiceNative.cancel();\n                cc.log(\"时间小于一秒\");\n                // require(\"TipsUtil\").ShowFloatText(\"时间小于1秒\", require(\"TipsUtil\").FloatType.type2);\n            } else {\n                if (lastTouchTime != null) {\n                    // 录音结束\n                    voiceNative.release();\n                    // 录音时间\n                    var time = Date.now() - lastTouchTime;\n                    cc.log(\"现在时间。。。。。  \" + Date.now());\n                    cc.log(\"开始时间。。。。。  \" + lastTouchTime);\n                    cc.log(\"录音时间。。。。。  \" + time);\n                    // 读取录音文件\n                    var msgStr = voiceNative.getVoiceData(\"record.amr\");\n                    cc.log(\" 发送的字符串录音文件。。。。。  \" + msgStr);\n                    // 等待发送\n                    // var baseData = require(\"BaseScript\")._utf8_encode(msgStr);\n                    // cc.log(\" base64 打包录音文件。。。。。  \" + baseData);\n                    // 直接发送二进制 \n                    //   require(\"VoiceMsgHandler\").GetCS_VoiceChatReq(time, msgStr);\n\n                    //  本地测试测试\n                    setTimeout(function () {\n                        // 间隔两秒播放录音\n                        var msgfile = \"record.amr\";\n                        voiceNative.play(msgfile);\n                        // 到这里结束\n                        //voiceNative.writeVoice 根据msgStr 文件  和命名 把后端发送过来的语音存放本地\n                        // 本地测试不需要这步\n                        voiceNative.writeVoice(msgfile, msgStr);\n                        cc.log(\"即将要播放的语音内容\" + msgStr);\n                        self.showSpeaker(msgfile);\n                        self._lastPlayTime = Date.now() + time;\n                    }, 2000)\n\n                }\n            }\n        };\n        let micBtnCancel = function (event) {\n            cc.log(\"GameManager micBtn event cancel\");\n            voiceNative.cancel();\n        };\n\n        if (this.SoundBtnNode.active == true) {\n            this.SoundBtnNode.on(cc.Node.EventType.TOUCH_START, micBtnDown);\n            this.SoundBtnNode.on(cc.Node.EventType.TOUCH_END, micBtnUp);\n            this.SoundBtnNode.on(cc.Node.EventType.TOUCH_CANCEL, micBtnCancel);\n        } else {\n            this.SoundBtnNode.off(cc.Node.EventType.TOUCH_START, micBtnDown);\n            this.SoundBtnNode.off(cc.Node.EventType.TOUCH_END, micBtnUp);\n            this.SoundBtnNode.off(cc.Node.EventType.TOUCH_CANCEL, micBtnCancel);\n        }\n    }\n    // 播放语音通知 \n    PlayVoiceNotes(time, data) {\n        var msgfile = \"cord.amr\";\n        var self = this;\n        // var baseData = require(\"BaseScript\")._utf8_decode(data);\n        var dataView = new Uint8Array(data.buffer, data.offset);\n        // cc.log(\"dataView=\" + dataView);\n        voiceNative.writeVoice(msgfile, dataView);\n        cc.log(\"即将要播放的语音内容\" + dataView);\n        setTimeout(function () {\n            self.showSpeaker(msgfile);\n            self._lastPlayTime = Date.now() + time;\n        }, 100)\n    }\n\n    showSpeaker(msgfile) {\n        voiceNative.play(msgfile);\n    }\n\n    onPlayerOver() {\n        cc.audioEngine.resumeAll();\n    }\n    update(dt) {\n        if (this._lastPlayTime != null) {\n            if (Date.now() > this._lastPlayTime + 200) {\n                this.onPlayerOver();\n                this._lastPlayTime = null;\n            }\n        } else {\n            // FunctionUILayer.SetPlayVice();\n        }\n    }\n}"]}