{"version":3,"sources":["assets\\Script\\modules\\@slotsmaster\\ui-common\\lib\\Coin\\CoinSpread.ts"],"names":[],"mappings":";;;;;AAAA;;;;;;;GAOG;;AAEH;IAoCI,oBAAY,IAAa;QAnCzB,gBAAgB;QACR,2BAAsB,GAAW,EAAE,CAAC;QAE5C,WAAW;QACH,WAAM,GAAW,CAAC,CAAC;QAE3B,WAAW;QACH,WAAM,GAAW,CAAC,CAAC;QAE3B,UAAU;QACF,kBAAa,GAAW,CAAC,CAAC;QAElC,UAAU;QACF,kBAAa,GAAW,CAAC,CAAC;QAElC,SAAS;QACD,cAAS,GAAW,CAAC,CAAC;QAE9B,SAAS;QACD,cAAS,GAAW,CAAC,CAAC;QAE9B,cAAc;QACN,kBAAa,GAAW,CAAC,CAAC;QAO1B,kBAAa,GAAW,GAAG,CAAC;QAIpC,YAAY;QACJ,uBAAkB,GAAa,IAAI,CAAC;QAExC,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;IACrB,CAAC;IAED,2BAAM,GAAN,UAAO,EAAU;QACb,IAAI,IAAI,CAAC,gBAAgB,IAAI,IAAI,CAAC,aAAa,GAAG,CAAC,EAAE;YACjD,YAAY;YACZ,IAAI,CAAC,aAAa,IAAI,EAAE,CAAC;YACzB,UAAU;YACV,IAAI,CAAC,SAAS,IAAI,IAAI,CAAC,MAAM,GAAG,EAAE,CAAC;YACnC,UAAU;YACV,IAAI,CAAC,SAAS,IAAI,IAAI,CAAC,MAAM,GAAG,EAAE,CAAC;YACnC,WAAW;YACX,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,SAAS,EAAE,IAAI,CAAC,SAAS,CAAC,CAAC;YACtD,UAAU;YACV,IAAI,CAAC,MAAM,IAAI,IAAI,CAAC,aAAa,GAAG,EAAE,CAAC;YACvC,UAAU;YACV,IAAI,CAAC,MAAM,IAAI,IAAI,CAAC,aAAa,GAAG,EAAE,CAAC;YACvC,IAAI,IAAI,CAAC,MAAM,IAAI,CAAC,EAAE;gBAClB,IAAI,CAAC,aAAa,GAAG,CAAC,IAAI,CAAC;aAC9B;SACJ;aAAM,IAAI,IAAI,CAAC,gBAAgB,IAAI,IAAI,CAAC,aAAa,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE;YAC9E,IAAI,CAAC,IAAI,CAAC,cAAc,EAAE,CAAC;YAC3B,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE,CAAC;YACpB,IAAI,CAAC,kBAAkB,EAAE,CAAC;SAC7B;IACL,CAAC;IAED,+BAAU,GAAV,UAAW,QAAiB,EAAE,cAAuB,EAAE,KAAa,EAAE,QAAkB;QACpF,IAAI,CAAC,IAAI,CAAC,QAAQ,GAAG,EAAE,CAAC,EAAE,CAAC,QAAQ,CAAC,CAAC,EAAE,QAAQ,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;QACtD,IAAI,CAAC,IAAI,CAAC,CAAC,GAAG,GAAG,CAAC;QAClB,IAAI,CAAC,gBAAgB,GAAG,IAAI,CAAC;QAC7B,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;QACnB,IAAI,CAAC,kBAAkB,GAAG,QAAQ,CAAC;QACnC,IAAI,CAAC,IAAI,CAAC,KAAK,GAAG,GAAG,CAAC;QACtB,IAAI,CAAC,qBAAqB,CAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE,cAAc,CAAC,CAAC;IACnE,CAAC;IAED,0CAAqB,GAArB,UAAsB,QAAiB,EAAE,MAAe;QACpD,IAAI,CAAC,SAAS,GAAG,GAAG,CAAC;QACrB,IAAI,CAAC,SAAS,GAAG,CAAC,IAAI,CAAC;QAEvB,IAAI,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC;QAEvB,gDAAgD;QAChD,IAAI,QAAQ,CAAC,CAAC,GAAG,MAAM,CAAC,CAAC,GAAG,IAAI,CAAC,sBAAsB,EAAE;YACrD,IAAI,SAAS,GAAG,IAAI,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC;YAChD,IAAI,SAAS,GAAG,IAAI,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC;YAChD,YAAY;YACZ,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC,IAAI,CAAC,SAAS,GAAG,SAAS,GAAG,SAAS,GAAG,SAAS,CAAC,GAAG,KAAK,CAAC;YACtF,aAAa;YACb,IAAI,MAAM,GAAG,SAAS,GAAG,IAAI,CAAC,aAAa,CAAC;YAC5C,WAAW;YACX,IAAI,CAAC,MAAM,GAAG,SAAS,GAAG,IAAI,CAAC,aAAa,CAAC;YAC7C,qBAAqB;YACrB,IAAI,CAAC,aAAa,GAAG,CAAC,CAAC;YACvB,qBAAqB;YACrB,IAAI,MAAM,CAAC,CAAC,GAAG,QAAQ,CAAC,CAAC,EAAE;gBACvB,uCAAuC;gBACvC,IAAI,CAAC,MAAM,GAAG,CAAC,MAAM,GAAG,IAAI,CAAC,aAAa,CAAC;gBAC3C,WAAW;gBACX,IAAI,CAAC,aAAa,GAAG,CAAC,MAAM,GAAG,IAAI,CAAC,aAAa,CAAC;aACrD;iBAAM;gBACH,uCAAuC;gBACvC,IAAI,CAAC,MAAM,GAAG,MAAM,GAAG,IAAI,CAAC,aAAa,CAAC;gBAC1C,WAAW;gBACX,IAAI,CAAC,aAAa,GAAG,MAAM,GAAG,IAAI,CAAC,aAAa,CAAC;aACpD;SACJ;QACD,oCAAoC;aAC/B;YACD,IAAI,SAAS,GAAG,QAAQ,CAAC,CAAC,GAAG,MAAM,CAAC,CAAC,CAAC;YACtC,IAAI,SAAS,GAAG,IAAI,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC;YAChD,IAAI,CAAC,aAAa,GAAG,CAAC,CAAC;YACvB,gBAAgB;YAChB,IAAI,CAAC,MAAM,GAAG,SAAS,GAAG,IAAI,CAAC,aAAa,CAAC;YAC7C,kBAAkB;YAClB,IAAI,CAAC,aAAa,GAAG,CAAC,CAAC;YACvB,4DAA4D;YAC5D,IAAI,QAAQ,GAAG,IAAI,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC,EAAE,MAAM,CAAC,CAAC,CAAC,GAAG,SAAS,CAAC;YAC1D,+DAA+D;YAC/D,IAAI,EAAE,GAAG,QAAQ,GAAG,QAAQ,CAAC,CAAC,CAAC;YAC/B,IAAI,EAAE,GAAG,QAAQ,GAAG,MAAM,CAAC,CAAC,CAAC;YAC7B,UAAU;YACV,IAAI,EAAE,GAAG,IAAI,CAAC,aAAa,GAAG,CAAC,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC,EAAE,GAAG,EAAE,CAAC,CAAC,CAAC;YACvD,UAAU;YACV,IAAI,EAAE,GAAG,IAAI,CAAC,aAAa,GAAG,EAAE,CAAC;YACjC,4BAA4B;YAC5B,IAAI,CAAC,aAAa,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,GAAG,CAAC,EAAE,GAAG,EAAE,CAAC,CAAC;YAC3C,mDAAmD;YACnD,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,aAAa,GAAG,EAAE,CAAC;SACzC;IACL,CAAC;IACL,iBAAC;AAAD,CAjIA,AAiIC,IAAA","file":"","sourceRoot":"/","sourcesContent":["/*\n * @Author: 田鑫\n * @Date: 2020-03-25 14:13:09\n * @LastEditors: 田鑫\n * @LastEditTime: 2020-06-14 11:19:40\n * @Version: CocosCreator V2.2.2\n * @Description: 金币挥洒动画\n */\n\nexport default class CoinSpread {\n    //* Y轴是否是匀速运动的阈值\n    private Y_ACCELERATE_THRESHOLD: number = 30;\n\n    //* X轴的初始速度\n    private xSpeed: number = 0;\n\n    //* Y轴的初始速度\n    private ySpeed: number = 0;\n\n    //* X轴的加速度\n    private xAcceleration: number = 0;\n\n    //* Y轴的加速度\n    private yAcceleration: number = 0;\n\n    //* 开始X坐标\n    private xStartPos: number = 0;\n\n    //* 开始Y坐标\n    private yStartPos: number = 0;\n\n    //* 计算出的总的移动时间\n    private moveTotalTime: number = 0;\n\n    private isMovingForTouch: boolean;\n\n    //* 移动速度\n    private speed: number;\n\n    private parabolaSpeed: number = 1.5;\n\n    //* 节点\n    private node: cc.Node;\n    //* 金币挥洒回调函数\n    private coinSpreadCallback: Function = null;\n    constructor(node: cc.Node) {\n        this.node = node;\n    }\n\n    update(dt: number) {\n        if (this.isMovingForTouch && this.moveTotalTime > 0) {\n            //* 每帧更新移动时间\n            this.moveTotalTime -= dt;\n            //* 更新X轴坐标\n            this.xStartPos -= this.xSpeed * dt;\n            //* 更新Y轴坐标\n            this.yStartPos -= this.ySpeed * dt;\n            //* 更新节点的位置\n            this.node.setPosition(this.xStartPos, this.yStartPos);\n            //* 更新X轴速度\n            this.xSpeed -= this.xAcceleration * dt;\n            //* 更新Y轴速度\n            this.ySpeed -= this.yAcceleration * dt;\n            if (this.ySpeed >= 0) {\n                this.yAcceleration = -2800;\n            }\n        } else if (this.isMovingForTouch && this.moveTotalTime <= 0 && this.node.isValid) {\n            this.node.stopAllActions();\n            this.node.destroy();\n            this.coinSpreadCallback();\n        }\n    }\n\n    coinSpread(startPos: cc.Vec2, targetposition: cc.Vec2, speed: number, callback: Function) {\n        this.node.position = cc.v3(startPos.x, startPos.y, 0);\n        this.node.x = 250;\n        this.isMovingForTouch = true;\n        this.speed = speed;\n        this.coinSpreadCallback = callback;\n        this.node.scale = 0.6;\n        this.calcParabolaEfficient(this.node.position, targetposition);\n    }\n\n    calcParabolaEfficient(startPos: cc.Vec3, endPos: cc.Vec2) {\n        this.xStartPos = 960;\n        this.yStartPos = -1080;\n\n        let speed = this.speed;\n\n        //* 起始点与结束点高度差大于阈值，半条抛物线也就是只有加速过程, Y轴匀速运动，X轴加速运动\n        if (startPos.y - endPos.y > this.Y_ACCELERATE_THRESHOLD) {\n            let xDistance = Math.abs(startPos.x - endPos.x);\n            let yDistance = Math.abs(startPos.y - endPos.y);\n            //* 计算总的移动时间\n            this.moveTotalTime = Math.sqrt(xDistance * xDistance + yDistance * yDistance) / speed;\n            //* 计算X轴的平均速度\n            let xSpeed = xDistance / this.moveTotalTime;\n            //* 计算Y轴的速度\n            this.ySpeed = yDistance / this.moveTotalTime;\n            //* Y轴匀速运动，不需要加速度，设为0\n            this.yAcceleration = 0;\n            //* 根据起始点的坐标判断移动速度的方向\n            if (endPos.x > startPos.x) {\n                //* 计算初始速度，调整参数\"parabolaSpeed\"可以改变抛物线形状\n                this.xSpeed = -xSpeed * this.parabolaSpeed;\n                //* 计算X轴加速度\n                this.xAcceleration = -xSpeed / this.moveTotalTime;\n            } else {\n                //* 计算初始速度，调整参数\"parabolaSpeed\"可以改变抛物线形状\n                this.xSpeed = xSpeed * this.parabolaSpeed;\n                //* 计算X轴加速度\n                this.xAcceleration = xSpeed / this.moveTotalTime;\n            }\n        }\n        //* 需要Y轴做加速运动形成抛物线，因为小于阈值，所以需要先到达最高点\n        else {\n            let xDistance = startPos.x - endPos.x;\n            let yDistance = Math.abs(startPos.y - endPos.y);\n            this.moveTotalTime = 2;\n            //* X轴匀速运动，X轴的速度\n            this.xSpeed = xDistance / this.moveTotalTime;\n            //* 匀速运动不需要加速度，设为0\n            this.xAcceleration = 0;\n            //* 计算最高点的位置，距离设为2倍高度差，可以调整参数y_distance的系数来改变抛物线最高点，来调整抛物线形状\n            let highestY = Math.max(startPos.y, endPos.y) + yDistance;\n            //* 抛物线移动氛围两段，一段是移动到最高点，另一段是从最高点移动到目标点，因为x轴匀速运动，所以我们只需要关心Y轴就可以了\n            let d1 = highestY - startPos.y;\n            let d2 = highestY - endPos.y;\n            //* 上升段的时间\n            let t1 = this.moveTotalTime / (1 + Math.sqrt(d1 / d2));\n            //* 下降段的时间\n            let t2 = this.moveTotalTime - t1;\n            //* 因为是匀加速运动，所以用任何一段计算加速度都可以\n            this.yAcceleration = -(2 * d1) / (t1 * t1);\n            //* 计算Y轴的初始速度，因为是匀减速，且到达最高点时速度一定为零，所以可以直接计算得出Y轴初始速度\n            this.ySpeed = this.yAcceleration * t1;\n        }\n    }\n}\n"]}