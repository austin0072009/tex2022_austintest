{"version":3,"sources":["assets\\GameHall\\script\\Lobby\\career\\TexasBase.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"/","sourcesContent":["\n/// <summary>\n/// 德州扑克牌的数据类   \n\nimport { UIUtil } from \"../../../../Script/Common/UIUtil\";\nimport { TexUserInfoSD } from \"./CareerNetDataStruct\";\n\n/// </summary>\nexport class TexasBase {\n\n    /// <summary>\n    /// 黑\n    /// </summary>\n    private static arrSpade: number[] = [102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114];\n    /// <summary>\n    /// 红\n    /// </summary>\n    private static arrHeart: number[] = [202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214];\n    /// <summary>\n    /// 梅\n    /// </summary>\n    private static arrClub: number[] = [302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314];\n    /// <summary>\n    /// 方\n    /// </summary>\n    private static arrDiamond: number[] = [402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414];\n\n    private static twoPos: string[] = [\"SB\", \"BB\"];\n    private static threePos: string[] = [\"SB\", \"BB\", \"BTN\"];\n    private static fourPos: string[] = [\"SB\", \"BB\", \"UTG\", \"BTN\"];\n    private static fivePos: string[] = [\"SB\", \"BB\", \"UTG\", \"CO\", \"BTN\"];\n    private static sixPos: string[] = [\"SB\", \"BB\", \"UTG\", \"HJ\", \"CO\", \"BTN\"];\n    private static sevenPos: string[] = [\"SB\", \"BB\", \"UTG\", \"MP1\", \"HJ\", \"CO\", \"BTN\"];\n    private static eightPos: string[] = [\"SB\", \"BB\", \"UTG\", \"UTG+1\", \"MP1\", \"HJ\", \"CO\", \"BTN\"];\n    private static ninePos: string[] = [\"SB\", \"BB\", \"UTG\", \"UTG+1\", \"MP1\", \"MP2\", \"HJ\", \"CO\", \"BTN\"];\n    private static curPos: string[] = [];\n\n    /// <summary>\n    /// 一付Poker 52张\n    /// </summary>\n    private ALLPoker: number[];\n\n    /// <summary>\n    /// 不要大小王\n    /// </summary>\n    private static mNumALLPoker: number = 52;\n    /// <summary>\n    /// 单个用户牌的个数\n    /// </summary>\n    private static _NumPerUser: number = 2;\n\n    /// <summary>\n    /// 洗牌， 让所有纸牌，随机顺序\n    /// </summary>\n    private Shuffle() {\n\n    }\n\n\n\n    // #region   排序 \n\n    /// <summary>\n    /// 去掉花色 从大到小排序 \n    /// </summary>\n    /// <param name=\"paiarr\"></param>\n    /// <returns></returns>\n    public static OrderPaiNoColor(paiarr: number[]): number[] {\n        let _tempList: number[] = [];\n        UIUtil.Concat(_tempList, paiarr);\n        for (var i = 0; i < _tempList.length; i++) {\n            if (_tempList[i] > 100) _tempList[i] %= 100;\n        }\n        let temparr: number[] = [];\n        UIUtil.Concat(temparr, _tempList);\n        temparr = temparr.sort((n1, n2) => n1 - n2);\n        let _ASCList: number[] = [];\n        UIUtil.Concat(_ASCList, temparr);\n        _ASCList.reverse();//默认是升序反转一下就降序了\n        return _ASCList;\n    }\n    /// <summary>\n    ///  从大到小排序      保留花色\n    /// </summary>\n    /// <param name=\"paiarr\"></param>\n    /// <returns></returns>\n    public static OrderPaiWithColor(paiarr: number[]): number[] {\n        let _tempList: number[] = [];\n        UIUtil.Concat(_tempList, paiarr);\n        for (var i = 0; i < _tempList.length; i++) {\n            if (_tempList[i] > 100) _tempList[i] %= 100;\n        }\n        let temparr: number[] = [];\n        UIUtil.Concat(temparr, _tempList);\n        temparr.sort((n1, n2) => n1 - n2);\n        let _ASCList: number[] = [];\n        UIUtil.Concat(_ASCList, temparr);\n        _ASCList.reverse();//默认是升序反转一下就降序了\n\n        //带上花色，有点小复杂 \n        let _dicPoker2Count: Map<number, number> = this.GetPoker_Count(_ASCList);\n        let _dicPoker2CountUsed: Map<number, number> = new Map<number, number>();\n        for (var j = 0; j < _ASCList.length; j++) {\n            if (!_dicPoker2CountUsed.has(_ASCList[j])) _dicPoker2CountUsed.set(_ASCList[j], 1);\n\n            for (var c = _dicPoker2CountUsed.get(_ASCList[j]); c <= 4; c++) {\n                _dicPoker2CountUsed.set(_ASCList[j], _dicPoker2CountUsed.get(_ASCList[j]) + 1);\n                if (paiarr.indexOf(_ASCList[j] + 100 * c) >= 0) {\n                    _ASCList[j] = _ASCList[j] + 100 * c;\n                    break;\n                }\n            }\n        }\n        return _ASCList;\n    }\n\n    /// <summary>\n    ///    带上花色，从手牌中查找       传入的参数都是排序过的\n    /// </summary>\n    /// <param name=\"_shoupai\"></param>\n    /// <param name=\"pokervalue\"></param>\n    /// <returns></returns>\n    public static GetPaiColor(_shoupai: number[], pokervalue: number[]): number[] {\n        let _ASCList: number[] = [];\n        UIUtil.Concat(_ASCList, pokervalue);\n        //带上花色，有点小复杂 \n        let _dicPoker2Count: Map<number, number> = this.GetPoker_Count(_ASCList);\n        let _dicPoker2CountUsed: Map<number, number> = new Map<number, number>();\n        for (var j = 0; j < _ASCList.length; j++) {\n            if (!_dicPoker2CountUsed.has(_ASCList[j])) _dicPoker2CountUsed.set(_ASCList[j], 1);\n\n            for (var c = _dicPoker2CountUsed.get(_ASCList[j]); c <= 4; c++) {\n                _dicPoker2CountUsed.set(_ASCList[j], _dicPoker2CountUsed.get(_ASCList[j]) + 1);\n                if (_shoupai.indexOf(_ASCList[j] + 100 * c) >= 0) {\n                    _ASCList[j] = _ASCList[j] + 100 * c;\n                    break;\n                }\n            }\n        }\n        return _ASCList;\n    }\n\n    //获取花色\n    public static GetCardColor(cbCardData: number): number {\n        return cbCardData / 100;\n    }\n\n    public static GetPoker_Count(paiList: number[]): Map<number, number> {\n        let _dicPoker2Count: Map<number, number> = new Map<number, number>();\n        paiList.forEach(poke => {\n            if (_dicPoker2Count.has(poke)) _dicPoker2Count.set(poke, _dicPoker2Count.get(poke) + 1);\n            else _dicPoker2Count.set(poke, 1);\n        });\n        return _dicPoker2Count;\n    }\n\n    /// <summary>\n    ///  是否同花 \n    /// </summary>\n    /// <param name=\"cardlist\">===***需要带花色的牌***===</param>\n    /// <returns></returns>\n    public static IsFlush(cardlist: number[]): boolean {\n        let _isflush = true;\n        let flush0 = UIUtil.NumberToInt(cardlist[0] / 100);\n        for (var i = 1; i < cardlist.length; i++) {\n            if (flush0 != UIUtil.NumberToInt(cardlist[i] / 100)) {\n                _isflush = false;\n            }\n        }\n\n        return _isflush;\n    }\n    /// <summary> \n    /// 判断牌组是否为顺子  支持3个以前的顺子判断\n    /// </summary> \n    /// <param name=\"PG\">牌组 需要去色与从大到小排序</param> \n    /// <returns>是否为顺子</returns> \n    public static IsStraight(PG: number[]): boolean {\n        let _IsStraight = false;\n        for (var i = 0; i < PG.length - 1; i++) {\n            if (PG[i] - 1 == PG[i + 1]) _IsStraight = true;\n            else {\n                _IsStraight = false;\n                break;\n            }\n        }\n        if (!_IsStraight) {//14 转 1 针对特殊顺子处理\n            let _tempArr: number[] = [];\n            UIUtil.Concat(_tempArr, PG);\n            for (var i = 0; i < _tempArr.length; i++) {\n                if (_tempArr[i] == 14) _tempArr[i] = 1;\n            }\n            _tempArr = this.OrderPaiNoColor(_tempArr);//需要从大到小排序一下\n            for (var i = 0; i < _tempArr.length - 1; i++) {\n                if (_tempArr[i] - 1 == _tempArr[i + 1]) _IsStraight = true;\n                else {\n                    _IsStraight = false;\n                    break;\n                }\n            }\n        }\n        return _IsStraight;\n    }\n    /// <summary> \n    /// 判断牌组是否为顺子  123   14,3,2\n    /// </summary> \n    /// <param name=\"PG\">牌组</param> \n    /// <returns>是否为顺子</returns> \n    private static IsSunZhi123(cardlist: number[]): boolean {\n        if (cardlist[0] == 14 && cardlist[1] == 3 && cardlist[2] == 2) return true;\n        return false;\n    }\n\n\n    //获取类型:\n    public static GetTexasType(shoupai: number[]): PokerTexasType {\n        let _shoupai: number[] = [];\n        UIUtil.Concat(_shoupai, shoupai);\n        if (_shoupai.length < 2) return PokerTexasType.Error;//之前是5张显示牌型，现在是发2张牌后就要显示自己的牌型 ,2张手牌只显示高牌和一对\n        let cbSameColor: boolean = TexasBase.IsFlush(_shoupai);\n        let _tempNoColor: number[] = this.OrderPaiNoColor(_shoupai);\n        let cbLineCard = this.IsStraight(_tempNoColor);\n\n        if (cbSameColor && cbLineCard && _shoupai.length > 2) {\n            if (Math.max.apply(null, _tempNoColor) == 14 && Math.max.apply(null, _tempNoColor) == 10) {\n                return PokerTexasType.Five_Flush_RoyalStraight;\n            }\n            else return PokerTexasType.Five_Flush_Straight;\n        }\n        if ((cbSameColor == false) && (cbLineCard == true) && _shoupai.length > 2) return PokerTexasType.Five_Straight;\n        if ((cbSameColor == true) && (cbLineCard == false) && _shoupai.length > 2) return PokerTexasType.Five_Flush;\n\n        //扑克分析\n        let _splitHelper: TexasSplitHelper = new TexasSplitHelper();\n        _splitHelper.Split(_shoupai);\n        //类型判断\n        if (_splitHelper._four.length == 1 && _shoupai.length > 2) return PokerTexasType.Five_Bomb;\n        if ((_splitHelper._three.length == 1) && (_splitHelper._two.length == 2) && _shoupai.length > 2) return PokerTexasType.Five_THREE_TWO;\n        if ((_splitHelper._three.length == 1) && (_splitHelper._two.length == 1) && _shoupai.length > 2) return PokerTexasType.Five_THREE;\n        if (_splitHelper._two.length == 2 && _shoupai.length > 2) return PokerTexasType.Five_TWO_PAIR;\n        if ((_splitHelper._two.length == 1) && (_splitHelper._one.length == _shoupai.length - 1)) return PokerTexasType.Five_ONE_PAIR;//两张牌的时候可能是一对\n        return PokerTexasType.Five_Single;\n    }\n\n    //最大牌型\n    public static GetFiveFromSeven(cbHandCardData: number[], cbCenterCardData: number[], allCount: number = 7): number[] {\n        let cbTempCardData: number[] = [];//临时变量\n        UIUtil.Concat(cbTempCardData, cbHandCardData);\n        UIUtil.Concat(cbTempCardData, cbCenterCardData);\n        if (cbTempCardData.length != allCount || cbTempCardData.length < 2) return [];//之前是5张显示牌型，现在是发2张牌后就要显示自己的牌型 \n\n        let _tempCardCompare = this.OrderPaiWithColor(cbTempCardData);\n\n        let cbLastCardData = [];\n        if (_tempCardCompare.length < 5) {\n            UIUtil.Concat(cbLastCardData, _tempCardCompare);\n        } else {\n            cbLastCardData.push(_tempCardCompare[0]);\n            cbLastCardData.push(_tempCardCompare[1]);\n            cbLastCardData.push(_tempCardCompare[2]);\n            cbLastCardData.push(_tempCardCompare[3]);\n            cbLastCardData.push(_tempCardCompare[4]);\n        }\n        let cbCardKind: PokerTexasType = this.GetTexasType(cbTempCardData);\n        let cbTempCardKind: PokerTexasType = 0;\n\n        let cbTempLastCardData: number[] = [0, 0, 0, 0, 0];//只做初始暂位用\n        //组合算法\n        for (var i = 0; i < allCount - 4; i++) {\n            for (var j = i + 1; j < allCount - 3; j++) {\n                for (var k = j + 1; k < allCount - 2; k++) {\n                    for (var l = k + 1; l < allCount - 1; l++) {\n                        for (var m = l + 1; m < allCount; m++) {   //获取数据\n                            cbTempLastCardData[0] = _tempCardCompare[i];\n                            cbTempLastCardData[1] = _tempCardCompare[j];\n                            cbTempLastCardData[2] = _tempCardCompare[k];\n                            cbTempLastCardData[3] = _tempCardCompare[l];\n                            cbTempLastCardData[4] = _tempCardCompare[m];\n\n                            cbTempCardKind = this.GetTexasType(cbTempLastCardData);//获取牌型\n\n                            //牌型大小\n                            if (this.ComparePoker_nn(cbTempLastCardData, cbLastCardData) == TexasEnmuResult.Win) {\n                                cbCardKind = cbTempCardKind;\n                                cbLastCardData = []\n                                UIUtil.Concat(cbLastCardData, cbTempLastCardData);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n        return cbLastCardData;\n    }\n\n    /// <summary>\n    /// 相同牌型牌值平分\n    /// </summary>\n    /// <param name=\"applycard\"></param>\n    /// <param name=\"cardlist\"></param>\n    /// <returns></returns>\n    public static ComparePoker_nn(applycard: number[], cardlist: number[]): TexasEnmuResult {\n        let _applytype: PokerTexasType = this.GetTexasType(applycard);\n        let _type: PokerTexasType = this.GetTexasType(cardlist);\n        return this.ComparePoker(applycard, _applytype, cardlist, _type);\n    }\n    /// <summary>\n    /// applycard 表示申请比牌的人\n    /// </summary>\n    /// <param name=\"applycard\"></param>\n    /// <param name=\"_applytype\"></param>\n    /// <param name=\"cardlist\"></param>\n    /// <param name=\"_type\"></param>\n    /// <returns></returns>\n    private static ComparePoker(applycard: number[], _applytype: PokerTexasType, cardlist: number[], _type: PokerTexasType): TexasEnmuResult {\n        if (_applytype > _type) return TexasEnmuResult.Win;\n        else if (_applytype < _type) return TexasEnmuResult.Lost;\n        else {   //相同类型 需要根据规则再处理一次，  \n            let _tapplyList: number[] = this.OrderPaiNoColor(applycard);\n            let _targetCardList: number[] = this.OrderPaiNoColor(cardlist);\n            switch (_applytype) {\n                case PokerTexasType.Five_Single:\n                case PokerTexasType.Five_Flush:\n                    return this.CompareListOneByOne(_tapplyList, _targetCardList);\n                case PokerTexasType.Five_Straight:\n                case PokerTexasType.Five_Flush_Straight:\n                    _tapplyList = this.DealA2345(_tapplyList);\n                    _targetCardList = this.DealA2345(_targetCardList);\n                    return this.CompareListOneByOne(_tapplyList, _targetCardList);\n                case PokerTexasType.Five_ONE_PAIR:\n                    let _applyMoreOne_P1: number[] = this.GetMoreOneList(_tapplyList);\n                    let _targetMoreOne_P1: number[] = this.GetMoreOneList(_targetCardList);\n                    let _tempPair1: TexasEnmuResult = this.CompareListOneByOne(_applyMoreOne_P1, _targetMoreOne_P1, 1);\n                    if (_tempPair1 == TexasEnmuResult.Draw) {\n                        let _applyOnlyOne: number[] = this.GetOnlyOneList(_tapplyList);\n                        let _targetOnlyOne: number[] = this.GetOnlyOneList(_targetCardList);\n                        return this.CompareListOneByOne(_applyOnlyOne, _targetOnlyOne, 3);\n                    }\n                    else\n                        return _tempPair1;\n                case PokerTexasType.Five_TWO_PAIR:\n                    let _applyMoreOne_P2: number[] = this.GetMoreOneList(_tapplyList);\n                    let _targetMoreOne_P2: number[] = this.GetMoreOneList(_targetCardList);\n                    let _tempPair2: TexasEnmuResult = this.CompareListOneByOne(_applyMoreOne_P2, _targetMoreOne_P2, 2);\n                    if (_tempPair2 == TexasEnmuResult.Draw) {\n                        let _applyOnlyOne = this.GetOnlyOneList(_tapplyList);\n                        let _targetOnlyOne = this.GetOnlyOneList(_targetCardList);\n                        return this.CompareListOneByOne(_applyOnlyOne, _targetOnlyOne, 1);\n                    }\n                    else\n                        return _tempPair2;\n                case PokerTexasType.Five_THREE:\n                case PokerTexasType.Five_THREE_TWO://Texas因为有公牌 可能一样的牌，需要进行对子比较\n                    let _applyMoreOne_3: number[] = this.GetMoreOneList(_tapplyList, 3);\n                    let _targetMoreOne_3: number[] = this.GetMoreOneList(_targetCardList, 3);\n                    let _tempPair3: TexasEnmuResult = this.CompareListOneByOne(_applyMoreOne_3, _targetMoreOne_3, 1);\n                    if (_tempPair3 == TexasEnmuResult.Draw) {\n                        let _applyMoreOne_2: number[] = this.GetMoreOneList(_tapplyList, 2);\n                        let _targetMoreOne_2: number[] = this.GetMoreOneList(_targetCardList, 2);\n                        return this.CompareListOneByOne(_applyMoreOne_2, _targetMoreOne_2, 1);\n                    }\n                    else\n                        return _tempPair3;\n                case PokerTexasType.Five_Bomb://Texas因为有公牌 需要再次比较\n                    let _applyMoreOne_4: number[] = this.GetMoreOneList(_tapplyList, 4);\n                    let _targetMoreOne_4: number[] = this.GetMoreOneList(_targetCardList, 4);\n                    let _tempPair4: TexasEnmuResult = this.CompareListOneByOne(_applyMoreOne_4, _targetMoreOne_4, 1);\n                    if (_tempPair4 == TexasEnmuResult.Draw) {\n                        let _applyOnlyOne: number[] = this.GetOnlyOneList(_tapplyList);\n                        let _targetOnlyOne: number[] = this.GetOnlyOneList(_targetCardList);\n                        return this.CompareListOneByOne(_applyOnlyOne, _targetOnlyOne, 1);\n                    }\n                    else\n                        return _tempPair4;\n                default:\n                    return TexasEnmuResult.Draw;\n            }\n        }\n    }\n\n    /// <summary>\n    /// 一样大 平局不需要比花色\n    /// </summary>\n    /// <param name=\"applycard\">从大到小排序 没有花色</param>\n    /// <param name=\"cardlist\">从大到小排序 没有花色</param>\n    /// <returns></returns>\n    private static CompareListOneByOne(applylist: number[], cardlist: number[], CompareLen = 5): TexasEnmuResult {\n        if (applylist[0] > cardlist[0]) return TexasEnmuResult.Win;\n        else if (applylist[0] < cardlist[0]) return TexasEnmuResult.Lost;\n        else {\n            if (CompareLen == 1) {\n                return TexasEnmuResult.Draw;\n            }\n            else {\n                if (applylist[1] > cardlist[1]) return TexasEnmuResult.Win;\n                else if (applylist[1] < cardlist[1]) return TexasEnmuResult.Lost;\n                else {\n                    if (CompareLen == 2) {\n                        return TexasEnmuResult.Draw;\n                    }\n                    else {\n                        if (applylist[2] > cardlist[2]) return TexasEnmuResult.Win;\n                        else if (applylist[2] < cardlist[2]) return TexasEnmuResult.Lost;\n                        else {\n                            if (CompareLen == 3) {\n                                return TexasEnmuResult.Draw;\n                            }\n                            else {\n                                if (applylist[3] > cardlist[3]) return TexasEnmuResult.Win;\n                                else if (applylist[3] < cardlist[3]) return TexasEnmuResult.Lost;\n                                else {\n                                    if (applylist[4] > cardlist[4]) return TexasEnmuResult.Win;\n                                    else if (applylist[4] < cardlist[4]) return TexasEnmuResult.Lost;\n                                    else {\n                                        return TexasEnmuResult.Draw;\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    /// <summary>\n    /// A2345转成12345\n    /// </summary>\n    /// <param name=\"applycard\">需要去色，排序，从大到小，</param> \n    /// <returns></returns>\n    private static DealA2345(shouPai: number[]): number[] {\n        if (shouPai[0] == 14 && shouPai[1] == 5 && shouPai[2] == 4 && shouPai[3] == 3 && shouPai[4] == 2) {\n            let s12345: number[] = shouPai;\n            s12345[0] = 1;//需要比较成最小的\n            s12345 = this.OrderPaiNoColor(s12345);\n            return s12345;\n        }\n        return shouPai;\n    }\n\n    /// <summary>\n    ///     \n    /// </summary>\n    /// <param name=\"_shouPai\">需要去色，排序，从大到小，</param>\n    /// <param name=\"_num\"></param>\n    /// <returns></returns>\n    private static GetMoreOneList(_shouPai: number[], _num = 2): number[] {\n        let _splitHelper: TexasSplitHelper = new TexasSplitHelper();\n        _splitHelper.Split(_shouPai);\n        let _retList: number[] = [];\n        switch (_num) {\n            case 2:\n                _retList = _splitHelper._two;\n                break;\n            case 3:\n                _retList = _splitHelper._three;\n                break;\n            case 4:\n                _retList = _splitHelper._four;\n                break;\n            default: break;\n        }\n        return _retList;\n    }\n\n    /// <summary>\n    ///     \n    /// </summary>\n    /// <param name=\"_shouPai\">需要去色，排序，从大到小，</param>\n    /// <param name=\"_num\"></param>\n    /// <returns></returns>\n    private static GetOnlyOneList(_shouPai: number[]): number[] {\n        let _splitHelper: TexasSplitHelper = new TexasSplitHelper();\n        _splitHelper.Split(_shouPai);\n        let _retList: number[] = _splitHelper._onlyOne;\n        return _retList;\n    }\n\n\n    private static _dicType2String: DicHelper[] = [];\n\n    public static GetNameByType(_type: PokerTexasType): string {\n        if (this._dicType2String.length == 0) {\n            this._dicType2String.push(new DicHelper(PokerTexasType.Five_Single, \"高牌\"));\n            this._dicType2String.push(new DicHelper(PokerTexasType.Five_ONE_PAIR, \"一对\"));\n            this._dicType2String.push(new DicHelper(PokerTexasType.Five_TWO_PAIR, \"两对\"));\n            this._dicType2String.push(new DicHelper(PokerTexasType.Five_THREE, \"三条\"));\n            this._dicType2String.push(new DicHelper(PokerTexasType.Five_Straight, \"顺子\"));\n            this._dicType2String.push(new DicHelper(PokerTexasType.Five_Flush, \"同花\"));\n            this._dicType2String.push(new DicHelper(PokerTexasType.Five_THREE_TWO, \"葫芦\"));\n            this._dicType2String.push(new DicHelper(PokerTexasType.Five_Bomb, \"四条\"));\n            this._dicType2String.push(new DicHelper(PokerTexasType.Five_Flush_Straight, \"同花顺\"));\n            this._dicType2String.push(new DicHelper(PokerTexasType.Five_Flush_RoyalStraight, \"皇家同花顺\"));\n\n        }\n        var name = this._dicType2String.find((_dh) => { return _dh._t == _type; });\n        if (name == null) {\n            console.log(\"  error type:\" + _type.toString());\n            return \"\";\n        }\n        return name._name;\n        return \"\";\n    }\n    public static GetTexasName(cards: number[]): string {\n        var _type = this.GetTexasType(cards);\n        return this.GetNameByType(_type);\n    }\n\n    public static GetMaxTypeCards(cards: number[]): number[] {\n        let tempCards: number[] = []\n        switch (this.GetTexasType(cards)) {\n            case PokerTexasType.Five_Single:\n\n                break;\n            case PokerTexasType.Five_ONE_PAIR:\n                tempCards = this.GetSameValeCards(cards, 2);\n                break;\n            case PokerTexasType.Five_TWO_PAIR:\n                tempCards = this.GetSameValeCards(cards, 2);\n                break;\n            case PokerTexasType.Five_THREE:\n                tempCards = this.GetSameValeCards(cards, 3);\n                break;\n            case PokerTexasType.Five_Straight:\n                UIUtil.Concat(tempCards, cards);\n                break;\n            case PokerTexasType.Five_Flush:\n                UIUtil.Concat(tempCards, cards);\n                break;\n            case PokerTexasType.Five_THREE_TWO:\n                UIUtil.Concat(tempCards, cards);\n                break;\n            case PokerTexasType.Five_Bomb:\n                tempCards = this.GetSameValeCards(cards, 4);\n                break;\n            case PokerTexasType.Five_Flush_Straight:\n                UIUtil.Concat(tempCards, cards);\n                break;\n            case PokerTexasType.Five_Flush_RoyalStraight:\n                UIUtil.Concat(tempCards, cards);\n                break;\n            case PokerTexasType.Error:\n                break;\n        }\n        return tempCards;\n    }\n\n    private static GetSameValeCards(cards: number[], sameCount: number): number[] {\n        let tempCards: number[] = [];\n\n        let tempDic: Map<number, number[]> = new Map<number, number[]>();\n        cards.forEach(poke => {\n            let key = UIUtil.NumberToInt(poke % 100);\n            if (tempDic.has(key))\n                tempDic.get(key).push(poke);\n            else {\n                let cardList: number[] = [];\n                cardList.push(poke);\n                tempDic.set(key, cardList);\n            }\n        });\n\n        tempDic.forEach(temp => {\n            if (temp.length == sameCount)\n                UIUtil.Concat(tempCards, temp);\n        });\n        return tempCards;\n    }\n    public static getPlayerPosType(pos: number, bpos: number, tList: TexUserInfoSD[]): string {\n        let posType = \"\";\n        this.curPos = [];\n        if (tList == null || tList.length <= 0) return posType;\n        switch (tList.length) {\n            case 2:\n                this.curPos = this.twoPos;\n                break;\n            case 3:\n                this.curPos = this.threePos;\n                break;\n            case 4:\n                this.curPos = this.fourPos;\n                break;\n            case 5:\n                this.curPos = this.fivePos;\n                break;\n            case 6:\n                this.curPos = this.sixPos;\n                break;\n            case 7:\n                this.curPos = this.sevenPos;\n                break;\n            case 8:\n                this.curPos = this.eightPos;\n                break;\n            case 9:\n                this.curPos = this.ninePos;\n                break;\n        }\n        let hpos = this.GetHandlePos(pos, bpos, tList);\n        if (this.curPos == null || this.curPos.length <= 0 || this.curPos.length < hpos || hpos <= 0) return posType;\n        else return this.curPos[hpos - 1];\n    }\n\n    private static GetHandlePos(pos: number, bpos: number, tList: TexUserInfoSD[]): number {\n        let hPos = 0;\n        let curUser: TexUserInfoSD = tList.find(item => { return item.pos == pos });\n        let bUser: TexUserInfoSD = tList.find(item => { return item.pos == bpos });\n\n        if (tList == null || tList.length < 2 || curUser == null || bUser == null) return hPos;\n        let newList: TexUserInfoSD[] = [];\n        newList = tList;\n        newList.sort((x, y) => { return x.pos - y.pos; });\n        let sPos = 0;\n        let bIndx: number = newList.findIndex(item => item.pos == bpos);\n        let cIndx: number = newList.findIndex(item => item.pos == pos);\n        if (newList.length == 2) {\n            sPos = bIndx;\n        }\n        else {\n            sPos = bIndx - 1 >= 0 ? bIndx - 1 : bIndx - 1 + newList.length;\n\n        }\n        hPos = sPos - cIndx < 0 ? sPos - cIndx + newList.length + 1 : sPos - cIndx + 1;\n        return hPos;\n    }\n}\n\nexport class TexasSplitHelper {\n    /// <summary>\n    /// 没有颜色的\n    /// </summary>\n    public _shouPai: number[];\n    public _shouPaiColor: number[];\n\n    public _onlyOne: number[] = [];\n    /// <summary>\n    /// 散牌，A，2，3，4，5 不算散牌了  个数为1且不在连子中。\n    /// </summary>\n    public _uron5One: number[] = [];\n    public _uron5OneColor: number[] = [];\n    //基础结构 \n    public _one: number[] = [];\n    public _two: number[] = [];\n    public _three: number[] = [];\n    public _four: number[] = [];\n\n    public _straight: number[][] = [];  //连子 从3~A的最长单连   可能是两个连子\n\n    public _dicColor2List: Map<number, number[]> = new Map<number, number[]>();\n    public Split(shoupai: number[]) {\n        this._shouPaiColor = [];\n        UIUtil.Concat(this._shouPaiColor, shoupai);\n        this.SearchColor();\n        this._shouPai = [];\n        UIUtil.Concat(this._shouPai, shoupai);\n        this._shouPai = TexasBase.OrderPaiNoColor(this._shouPai);\n        this.SearchBase();\n\n        this._straight = [];\n        this.SearchStraight();\n        this.SearchStraightA();\n\n        this._uron5One = [];\n        this.SearchUnron();\n    }\n\n    public SearchColor() {\n        this._shouPaiColor.forEach(pai => {\n            let _color = TexasBase.GetCardColor(pai);\n            if (!this._dicColor2List.has(_color)) this._dicColor2List.set(_color, []);\n            this._dicColor2List.get(_color).push(pai);\n        });\n    }\n    //分成四个数组\n    public SearchBase() {\n        let _dicPoker2Count: Map<number, number> = TexasBase.GetPoker_Count(this._shouPai);\n        let _temp: number[] = [];\n        _dicPoker2Count.forEach((value, key) => {\n            if (_dicPoker2Count.get(key) == 4) {\n                this._one.push(key);\n                this._two.push(key);\n                this._three.push(key);\n                this._four.push(key);\n            }\n            else if (_dicPoker2Count.get(key) == 3) {\n                this._one.push(key);\n                this._two.push(key);\n                this._three.push(key);\n            }\n            else if (_dicPoker2Count.get(key) == 2) {\n                this._one.push(key);\n                this._two.push(key);\n            }\n            else if (_dicPoker2Count.get(key) == 1) {\n                this._one.push(key);\n                this._onlyOne.push(key);\n            }\n        });\n        this._one = TexasBase.OrderPaiNoColor(this._one);\n        this._two = TexasBase.OrderPaiNoColor(this._two);\n        this._three = TexasBase.OrderPaiNoColor(this._three);\n        this._four = TexasBase.OrderPaiNoColor(this._four);\n    }\n\n    /// <summary>\n    /// \n    /// </summary>\n    private SearchStraight() {\n        if (this._shouPai.length < 5) return;//不足5个牌就不处理的    \n        let _tempone: number[] = this._one;\n        let _minStraight: number[] = [];\n        for (var i = 0; i < _tempone.length - 1; i++) {\n            if (_tempone[i] - 1 == _tempone[i + 1]) {\n                _minStraight.push(_tempone[i]);\n                if (i + 1 == _tempone.length - 1) _minStraight.push(_tempone[i + 1]);//最后一个要加上\n            }\n            else {//可能会出现刚才好5个，而后还有牌，搜索不到\n                _minStraight.push(_tempone[i]);\n                if (_minStraight.length >= 5) this._straight.push(_minStraight);\n                _minStraight = [];\n            }\n        }\n        if (_minStraight.length >= 5) this._straight.push(_minStraight);//最后一组必须加进去 不然一个长连子没搜索到\n    }\n    /// <summary>\n    /// 只处理A2345   \n    /// </summary>\n    private SearchStraightA() {\n        if (this._shouPai.length < 5) return;//不足5个牌就不处理的  \n        if (this._shouPai.indexOf(14) == -1) return;//没有A就不处理了\n        let _tempShouPai: number[] = this._shouPai;\n        for (var i = 0; i < _tempShouPai.length - 1; i++) {\n            if (_tempShouPai[i] == 14) _tempShouPai[i] = 1;\n        }\n\n        let _minStraight: number[] = [];\n        for (var i = 0; i < _tempShouPai.length - 1; i++) {\n            if (_tempShouPai[i] - 1 == _tempShouPai[i + 1]) {\n                _minStraight.push(_tempShouPai[i]);\n                if (i + 1 == _tempShouPai.length - 1) _minStraight.push(_tempShouPai[i + 1]);//最后一个要加上\n            }\n            else {//可能会出现刚才好5个，而后还有牌，搜索不到\n                _minStraight.push(_tempShouPai[i]);\n                if (_minStraight.length >= 5) this._straight.push(_minStraight);\n                _minStraight = [];\n            }\n        }\n        if (_minStraight.length >= 5 && _minStraight.indexOf(1) >= 0) {\n            for (var i = 0; i < _tempShouPai.length - 1; i++) {\n                if (_tempShouPai[i] == 1) _tempShouPai[i] = 14;\n            }\n            this._straight.push(_minStraight);//最后一组必须加进去 不然一个长连子没搜索到\n        }\n    }\n    /// <summary>\n    /// 搜索散牌 个数不能大于1，不在连子中。\n    /// </summary>\n    private SearchUnron() {\n        let _tempUnron: number[] = this._onlyOne;\n        this._straight.forEach(_tempStraight => {\n            _tempStraight.forEach(_cardVal => {\n                if (_tempUnron.indexOf(_cardVal) >= 0) _tempUnron.splice(_tempUnron.indexOf(_cardVal), 1);\n            });\n        });\n        this._uron5One = _tempUnron;\n        this._uron5OneColor = this._uron5One;\n        for (var i = 0; i < this._uron5OneColor.length; i++) {\n            this._shouPaiColor.forEach(_cl => {\n                if (_cl % 100 == this._uron5OneColor[i]) {\n                    this._uron5OneColor[i] = _cl;\n                }\n            });\n        }\n    }\n    public GetMinUnron(): number {\n        if (this._uron5OneColor.length < 0) return 0;\n        let _temp: number[] = TexasBase.OrderPaiNoColor(this._uron5One);\n        let _minCard = _temp[_temp.length - 1];\n        return _minCard;\n    }\n}\n\n/// <summary>\n///  同花顺〉四条〉三条+一对〉同花〉顺〉三条〉两条〉一对〉大无赖\n/// </summary>\nexport enum PokerTexasType {\n    //扑克类型\n    Error = 0,\n    Five_Single = 1,// 单张 专业也叫高牌牌型\n    Five_ONE_PAIR = 2,    //一对牌型\n    Five_TWO_PAIR = 3,    //两对牌型\n    Five_THREE = 4,       //三条牌型\n    Five_Straight = 5,    //顺子牌型\n    Five_Flush = 6,       //同花牌型\n    Five_THREE_TWO = 7,   //葫芦牌型\n    Five_Bomb = 8,        //四条牌型\n    Five_Flush_Straight = 9,     //同花顺牌型\n    Five_Flush_RoyalStraight = 10,  //皇家同花顺牌型\n}\nexport enum TexasEnmuResult {\n    Draw = 0,\n    Lost = 1,\n    Win = 2\n}\nexport enum TexasTurnEnum {\n    Init = -1,\n    /// <summary>\n    /// 盲注阶段 手牌数为0--小盲当庄：自动压房间低分的一分 大盲注为小盲注的下家，自动压房间的最低分，从小盲注开始发牌，Token交给大盲注\n    /// </summary>\n    Turn1_0 = 1,\n    /// <summary>\n    /// 手牌数为2+3 公开牌为数为3  \n    /// </summary>\n    Turn2_3 = 2,\n    /// <summary>\n    /// 手牌数为2+4 公开牌为数为4  \n    /// </summary>\n    Turn3_4 = 3,\n    /// <summary>\n    /// 手牌数为2+5 公开牌为数为5 \n    /// </summary>\n    Turn4_5 = 4,\n    /// <summary>\n    /// 比牌状态了\n    /// </summary>\n    TrunCompare = 5,\n}\nexport enum TexasTurnActionEnum {\n    Init = -1,\n    /// <summary>\n    /// 小盲\n    /// </summary>\n    sb = 1,\n    /// <summary>\n    /// 大盲\n    /// </summary>\n    bb = 2,\n    /// <summary>\n    /// stradlle\n    /// </summary>\n    stradlle = 3,\n    /// <summary>\n    /// 跟\n    /// </summary>\n    call = 4,\n    /// <summary>\n    /// 弃牌\n    /// </summary>\n    fold = 5,\n    /// <summary>\n    /// allin\n    /// </summary>\n    allin = 6,\n    /// <summary>\n    /// 让牌\n    /// </summary>\n    Check = 7,\n    /// <summary>\n    /// 加注 2/3\n    /// </summary>\n    B2_3 = 8,\n    /// <summary>\n    /// 加注 1/2 \n    /// </summary>\n    B1_2 = 9,\n    /// <summary>\n    /// 加注 1\n    /// </summary>\n    B1 = 10,\n    /// <summary>\n    /// 全部加注操作\n    /// </summary>\n    B = 11,\n    /// <summary>\n    /// 比牌\n    /// </summary>\n    showdonw = 15,\n    /// <summary>\n    /// 保险类型 可能需要详细的保险流程\n    /// </summary>\n    Ins = 20,\n}\n\nexport class DicHelper {\n    constructor(t: PokerTexasType, name: string) {\n        this._t = t;\n        this._name = name;\n        return this;\n    }\n    public _t: PokerTexasType;\n    public _name: string;\n}\n\n"]}