{"version":3,"sources":["assets\\Script\\Common\\ToolsEx.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"/","sourcesContent":["\nconst CryptoJS = require(\"crypto\");  \nexport class ToolsEx\n{\n\n    private static _instance: ToolsEx; //类型为这个类 \n\n    private constructor()\n    {  \n        \n    }\n\n    //单例\n    static get Singleton() \n    {\n      if (!this._instance) {\n        this._instance = new ToolsEx();\n      }\n      return this._instance;\n    } \n\n    \n    /// <summary>\n    /// Get the rootmost object of the specified game object.\n    /// </summary>\n\n    public  GetRoot(go:fgui.GComponent):fgui.GComponent\n    {\n        //let t = go.node;\n        let t = null;\n        for (; ; )\n        {\n            let parent = go.parent;\n            if (parent == null) break;\n            t = parent;\n        }\n        return t;\n    }\n\n\t/// <summary>\n\t/// 是否包含激活的子对象\n\t/// </summary>\n\tpublic HasActiveChild(trans:fgui.GComponent ):boolean\n\t{\n\t\tif( trans == null )\n\t\t\treturn false;\n\t\tlet len:number = trans.node.childrenCount;\n\t\tfor( var i=0; i<len; ++i )\n\t\t{\n\t\t\tif( trans.node.children[i].active )\n\t\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}\n\n    public GetMiddlePosition(vlist:cc.Vec3[]):cc.Vec3\n    {\n        if (vlist == null || vlist.length == 0 || vlist.length == 1) return cc.v3(0,0,0);\n        let rev = cc.v3(0,0,0);\n        while(vlist.length  != 1)\n        {\n           rev = this.GetMiddlePositionEx(vlist[0], vlist[1]);\n           vlist.shift() ;\n           vlist[0] = rev;\n        }        \n        return rev;\n    }\n    private GetMiddlePositionEx(v1:cc.Vec3, v2:cc.Vec3):cc.Vec3\n    { //A+(B-A)/2 = A+(B/2)-(A/2) = (A-A/2)+(B/2) = (1A - (1/2)A) + (B/2) = (1/2)A + (B/2) = (A/2) + (B/2) = (A+B)/2\n        let rev = cc.v3(0,0,0);\n        let v2_v1 = cc.v3(v2.x-v1.x,v2.y-v1.y,v2.z-v1.z);\n        rev = cc.v3((v1.x+v2_v1.x)/2,(v1.y+v2_v1.y)/2,(v1.z+v2_v1.z)/2);\n        return rev;\n    }\n\n    public DecryptCryptoJS(data:string, _key:string):string\n    {\n        let key = CryptoJS.enc.Utf8.parse(_key);//fucktheworld\n        var iv = CryptoJS.enc.Utf8.parse(key);\n        let decrypted = CryptoJS.AES.decrypt(data, key, {\n            keySize: 128 / 8,\n            iv: iv,\n            mode: CryptoJS.mode.CBC,\n            padding: CryptoJS.pad.Pkcs7\n        });\n        return decrypted;\n    }\n\n    \n    public EncryptionPWD(pwd: string) {\n        let str = \"fdjf,jkgfkl\";\n        let byte1 = this.strToByte(str);\n        let byte2 = this.strToByte(pwd);\n        let arr = [];\n        let i;\n        let len;\n        for (i = 0, len = byte2.length; i < len; i++) {\n            arr[i] = byte2[i];\n        }\n        arr[i++] = 163;\n        arr[i++] = 172;\n        arr[i++] = 161;\n        arr[i++] = 163;\n        for (let j = 0, lens = byte1.length; j < lens; j++) {\n            arr[i] = byte1[j];\n            i++;\n        }\n        let pwdbyte = CryptoJS.createHash('md5').update(Buffer.from(arr)).digest(\"hex\");\n        return pwdbyte;\n\n    }\n    private strToByte(str) {\n        let bytes = new Array();\n        let len, c;\n        len = str.length;\n        for (let i = 0; i < len; i++) {\n            c = str.charCodeAt(i);\n            if (c >= 0x010000 && c <= 0x10FFFF) {\n                bytes.push(((c >> 18) & 0x07) | 0xF0);\n                bytes.push(((c >> 12) & 0x3F) | 0x80);\n                bytes.push(((c >> 6) & 0x3F) | 0x80);\n                bytes.push((c & 0x3F) | 0x80);\n            } else if (c >= 0x000800 && c <= 0x00FFFF) {\n                bytes.push(((c >> 12) & 0x0F) | 0xE0);\n                bytes.push(((c >> 6) & 0x3F) | 0x80);\n                bytes.push((c & 0x3F) | 0x80);\n            } else if (c >= 0x000080 && c <= 0x0007FF) {\n                bytes.push(((c >> 6) & 0x1F) | 0xC0);\n                bytes.push((c & 0x3F) | 0x80);\n            } else {\n                bytes.push(c & 0xFF);\n            }\n        }\n        return bytes;\n    }\n    /// <summary>\n    /// 如果已存则COPY值   此方法仅能在编辑器下使用\n    /// </summary>\n//     public static T CopyComponent<T>(T original, GameObject destination) where T : Component\n//     {\n//         System.Type type = original.GetType();\n//         Component copy = null;\n// #if UNITY_EDITOR\n//         copy = destination.GetComponent(type);\n//         if (copy == null) { copy = destination.AddComponent(type); }\n//         if (copy == null)\n//         {\n//             Debug.LogError(\" copy == null\");\n//             return null;\n//         }\n//         if (UnityEditorInternal.ComponentUtility.CopyComponent(original))\n//         {\n//             if (UnityEditorInternal.ComponentUtility.PasteComponentValues(copy))\n//             {\n//                 //Debug.Log(\"DONE\");\n//             }\n//         }\n// #endif\n\n// #if UNITY_IPHONE || UNITY_ANDROID  \n\n//         copy = destination.AddComponent(type);\n//         System.Reflection.FieldInfo[] fields = type.GetFields();\n//         foreach (System.Reflection.FieldInfo field in fields)\n//         {\n//             field.SetValue(copy, field.GetValue(original));\n//         }\n// #endif\n//         return copy as T;\n//     }\n    \n    /// <summary>\n    /// Oblique Frustum\n    /// </summary>\n    /// <param name=\"horizObl\">在1或-1之间</param>\n    /// <param name=\"vertObl\"></param>\n    /// <param name=\"cam\"></param>\n    // public static void SetObliqueness(float horizObl, float vertObl, Camera cam)\n    // {\n    //     Matrix4x4 mat = cam.projectionMatrix;\n    //     mat[0, 2] = horizObl;\n    //     mat[1, 2] = vertObl;\n    //     cam.projectionMatrix = mat;\n    // }\n    // /// <summary>\n    /// 设置局部旋转\n    /// </summary>\n    /// <param name=\"tf\"></param>\n    /// <param name=\"rot\"></param>\n    // public static void SetLocalRotation(Transform tf, Vector3 rot)\n    // {\n    //     Quaternion qua = new Quaternion();\n    //     qua.eulerAngles = new Vector3(rot.x, rot.y, rot.z);\n    //     tf.localRotation = qua;\n    // }\n   \n    /// <summary>\n    /// 全局种子， 用静态才有用\n    /// </summary>\n    // private static int Seeds = 0;\n    /// <summary>\n    /// add by jsw 20140120\n    /// </summary>\n    /// <param name=\"min\">可以取下界值</param>\n    /// <param name=\"max\">不能取上界值</param>\n    /// <returns></returns>\n    // public static int GetRandom(int min, int max)\n    // {\n    //     object obj = new object();\n    //     lock (obj)\n    //     {\n    //         Seeds += Convert.ToInt32(DateTime.Now.Ticks & 0xffff);\n    //         Seeds = Seeds * (Seeds / 7);\n    //         if (max < min)\n    //         {\n    //             return min;\n    //         }\n    //         if (Seeds >= int.MaxValue)\n    //         {\n    //             return 0;\n    //         }\n    //     }\n    //     return new System.Random(Seeds).Next(min, max);\n    // }\n    // public static int GetRandomRemove(int min, int max, int remove)\n    // {\n    //     if (max == min) return 0;\n    //     int r = 0;\n    //     do\n    //     {\n    //         r = GetRandom(min, max);\n    //     }\n    //     while (r == remove);\n    //     return r;\n    // }\n     \n    /// <summary>\n    /// 不支持Flash或4.6以前版本。 Finds the specified component on the game object or one of its parents.\n    /// </summary>\n\n    // public static T FindInParents<T>(Transform trans) where T : Component\n    // {\n    //     if (trans == null) return null;\n\n    //     return trans.GetComponentInParent<T>();\n    // }\n    /// <summary>\n    /// 不支持Flash或4.6以前版本。 Finds the specified component on the game object or one of its parents.\n    /// </summary>\n\n    // public static T FindInParents<T>(Transform trans, string eName) where T : Component\n    // {\n    //     if (trans == null) return null;\n\n    //     foreach (T e in trans.GetComponentsInParent<T>(true))\n    //     {\n    //         if (e.gameObject.name == eName)\n    //         {\n    //             return e;\n    //         }   \n    //     }\n \n    //     return null; \n    // }\n    /// <summary>\n    /// 用于反射不能手动输入类型的\n    /// </summary>\n    /// <param name=\"_go\"></param>\n    /// <param name=\"type\"></param>\n    /// <param name=\"elementName\"></param>\n    /// <returns></returns>\n    // public static Component FindScriptInChild(GameObject _go, Type type, string elementName)\n    // {\n    //     if (_go == null) return null;\n    //     //Debug.LogError(\"go:\" + _go.name + \"type:\" + type + \"eName:\" + elementName);\n    //     Component[] tempcom = _go.GetComponentsInChildren(type, true);\n    //     //UnityEngine.Debug.Log(tempcom.Length + \" tempcom.Length  elementName:\" + elementName + \" _go.active :\" + _go.activeSelf);\n    //     foreach (Component element in tempcom)\n    //     {\n    //         if (element.gameObject.name == elementName)\n    //         {\n    //             //UnityEngine.Debug.Log(element.name);\n    //             return element;\n    //         }\n    //     }    \n    //     return null;\n    // }\n    /// <summary>\n    /// 获取第一个相同名称的组件\n    /// </summary>\n    /// <typeparam name=\"T\"></typeparam>\n    /// <param name=\"_go\"></param>\n    /// <param name=\"elementName\"></param>\n    /// <returns></returns>\n    // public static T FindScriptInChilds<T>(GameObject _go, string elementName) where T : Component\n    // {\n    //     if (_go == null) return null;\n    //     T[] arr = _go.GetComponentsInChildren<T>(true);\n    //     foreach (T element in arr)\n    //     {\n    //         if (element.gameObject.name == elementName)\n    //         {\n    //             return element;\n    //         }            \n    //     }\n    //     return null;\n    // }\n\n    /// <summary>\n    /// 根据组件名称 包含查找（模糊查找）反回对象列表\n    /// </summary>\n    /// <typeparam name=\"T\"></typeparam>\n    /// <param name=\"_go\"></param>\n    /// <param name=\"elementName\"></param>\n    /// <returns></returns>\n    // public static List<T> FindScriptsInChild<T>(GameObject _go, string elementName) where T : Component\n    // {\n    //     if (_go == null) return null;\n    //     List<T> tlist = new List<T>();\n    //     foreach (T element in _go.GetComponentsInChildren<T>(true))\n    //     {\n    //         if (element.gameObject.name.IndexOf(elementName) != -1)\n    //         {\n    //             tlist.Add(element);\n    //         }\n    //     }\n    //     return tlist;\n    // }\n    /// <summary>\n    /// 根据组件名称 包含查找（模糊查找）反回对象列表\n    /// </summary>\n    /// <typeparam name=\"T\"></typeparam>\n    /// <param name=\"_go\"></param>\n    /// <param name=\"elementName\"></param>\n    /// <returns></returns>\n    // public static List<T> FindScriptsInChild<T>(GameObject _go) where T : Component\n    // {\n    //     if (_go == null) return null;\n    //     List<T> tlist = new List<T>();\n    //     foreach (T element in _go.GetComponentsInChildren<T>(true))\n    //     {          \n    //             tlist.Add(element); \n    //     }\n    //     return tlist;\n    // }\n    /// <summary>\n    /// 找到第一个指定类型的脚本\n    /// </summary>\n    /// <typeparam name=\"T\"></typeparam>\n    /// <param name=\"_go\"></param>\n    /// <returns></returns>\n    // public static T FindScriptInChild<T>(GameObject _go) where T : Component\n    // {\n    //     if (_go == null) return null;\n    //     foreach (T element in _go.GetComponentsInChildren<T>(true))\n    //     {\n    //         return element;\n    //     }\n    //     return null;\n    // }\n    /// <summary>\n    /// 找到第一个指定类型的脚本\n    /// </summary>\n    /// <typeparam name=\"T\"></typeparam>\n    /// <param name=\"_go\"></param>\n    /// <returns></returns>\n    // public static T FindScriptInChild<T>(GameObject _go, string name) where T : Component\n    // {\n    //     if (_go == null) return null;\n    //     foreach (T element in _go.GetComponentsInChildren<T>(true))\n    //     {\n    //         return element;\n    //     }\n    //     return null;\n    // }\n    /// <summary>\n    /// 找到根节点下所有的指定脚本\n    /// </summary>\n    /// <typeparam name=\"T\"></typeparam>\n    /// <param name=\"_go\"></param>\n    /// <returns></returns>\n    // public static List<T> FindScriptInChilds<T>(GameObject _go) where T : Component\n    // {\n    //     if (_go == null) return null;\n    //     List<T> tlist = new List<T>();\n    //     foreach (T element in _go.GetComponentsInChildren<T>(true))\n    //     {\n    //         tlist.Add(element);\n    //     }\n    //     return tlist;\n    // }\n     \n    // public static GameObject FindGameObject(GameObject rootObject, string goName)\n    // {\n    //     if (rootObject == null) return null;\n    //     foreach (Transform t in rootObject.GetComponentsInChildren<Transform>(true))\n    //     {\n    //         if (t.gameObject.name == goName)// if (t.gameObject.name.Contains(goName))\n    //         {\n    //             return t.gameObject;\n    //         }\n    //     }\n    //     return null;\n    // } \n \n    /// <summary>\n    /// 通过物体来找到脚本，查找 其子类的\n    /// </summary>\n    /// <typeparam name=\"T\"> 类型</typeparam>\n    /// <param name=\"_go\"> 需要查找的物体</param>\n    /// <returns></returns>\n    // public static T FindScriptInChildren<T>(GameObject _go) where T : Component\n    // {\n    //     foreach (T element in _go.GetComponentsInChildren<T>(true))\n    //     {\n    //         return element;\n    //     }\n    //     return null;\n    // }\n    /// <summary>\n    /// 通过物体来找到脚本，查找自身和其子类的\n    /// </summary>\n    /// <typeparam name=\"T\"></typeparam>\n    /// <param name=\"_go\"></param>\n    /// <returns></returns>\n    // public static T FindScriptSelf_Children<T>(GameObject _go, string name) where T : Component\n    // {\n    //     if (_go == null) return null;\n    //     foreach (T element in _go.GetComponents<T>())\n    //     {\n    //         if (element.gameObject.name == name) return element;\n    //     }\n\n    //     foreach (T element in _go.GetComponentsInChildren<T>(true))\n    //     {\n    //         if (element.gameObject.name == name)  return element;\n    //     }\n    //     return null;\n    // }\n    /// <summary>\n    /// 通过物体来找到脚本，查找自身和其子类的\n    /// </summary>\n    /// <typeparam name=\"T\"></typeparam>\n    /// <param name=\"_go\"></param>\n    /// <returns></returns>\n    // public static T FindScriptSelf_Children<T>(GameObject _go) where T : Component\n    // {\n    //     if (_go == null) return null;\n    //     foreach (T element in _go.GetComponents<T>())\n    //     {\n    //         return element;\n    //     }\n\n    //     foreach (T element in _go.GetComponentsInChildren<T>(true))\n    //     {\n    //         return element;\n    //     }\n    //     return null;\n    // }\n    /// <summary>\n    /// 获取指定数的第几位的值 ，肯定小于10的值 \n    /// </summary>\n    /// <param name=\"num\"></param>\n    /// <param name=\"wei\">0个，1十，2百</param>\n    /// <returns>-1 是错误值 </returns>\n    // public static int GetNumbyNum(int num, int wei)\n    // {\n    //     string strnum = num.ToString();\n    //     if (wei >= strnum.Length) return -1;\n    //     return Convert.ToInt32(strnum.Substring(wei, 1));\n    // }\n\n    /// <summary>\n    /// 把秒 转换成 时间格式的字符串 如：01:10:56\n    /// </summary>\n    /// <param name=\"seconds\">秒</param>\n    /// <returns></returns>\n    // public static string ConverttoData(int seconds)\n    // {\n    //     TimeSpan ts = new TimeSpan(0, 0, seconds);\n    //     return string.Format(\"{0}:{1}:{2}\", ts.Hours <= 9 ? \"0\" + ts.Hours : \"\"+ts.Hours ,\n    //          ts.Minutes <= 9 ? \"0\" + ts.Minutes : \"\" + ts.Minutes,\n    //          ts.Seconds <= 9 ? \"0\" + ts.Seconds : \"\" + ts.Seconds); \n    // }\n\n    // public static string CoverttoCountdown(int seconds)\n    // {\n    //     TimeSpan ts = new TimeSpan(0, 0, 0, seconds);\n    //     int h = ts.Days * 24 + ts.Hours;\n    //     return string.Format(\"{0}:{1}:{2}\", h <= 9 ? \"0\" + h : \"\" + h,\n    //          ts.Minutes <= 9 ? \"0\" + ts.Minutes : \"\" + ts.Minutes,\n    //          ts.Seconds <= 9 ? \"0\" + ts.Seconds : \"\" + ts.Seconds);\n    // }\n\n    // public static string coverttoDatetime(string timeStamp)\n    // {\n    //     DateTime dateTimeStart = TimeZone.CurrentTimeZone.ToLocalTime(new DateTime(1970, 1, 1));\n    //     long lTime = long.Parse(timeStamp + \"0000\");\n    //     TimeSpan toNow = new TimeSpan(lTime);\n    //     return dateTimeStart.Add(toNow).ToString(\"yyyy-MM-dd HH:mm:ss\");\n    // }\n\n    // public static string battleResult(int resultType)\n    // {\n    //     string res = \"\";\n    //     //if (resultType == 0)\n    //     //    res = BeanFactory.getLanguageContent(10061);\n    //     //if (resultType == 1)\n    //     //    res = BeanFactory.getLanguageContent(10063);\n    //     //if (resultType == 2)\n    //     //    res = BeanFactory.getLanguageContent(10040);\n    //     //if (resultType == 3)\n    //     //    res = BeanFactory.getLanguageContent(10062);\n    //     return res;\n    // }\n\n    // public static string ConverttoDataALL(int sec)\n    // {\n    //     DateTime dt = new DateTime(0, 0, 0, 0, 0, sec);\n    //     return dt.ToLongTimeString();\n    // }\n    /// <summary>\n    /// 删除指定对象的所有子物体 \n    /// </summary>\n    /// <param name=\"go\"></param>\n    public ClearChildren(playerInfoNode:fgui.GComponent, strtemplate:string)\n    {\n        if (playerInfoNode == null) return;\n        //清空玩家信息列表\n        let listToClear:cc.Node[] = [];\n        for (var i = 0; i < playerInfoNode.node.childrenCount; i++)\n        {\n            let playerInfo = playerInfoNode.node.children[i];\n            if (playerInfo.name != strtemplate)\n            {//加入删除列表\n                listToClear.push(playerInfo);\n            }\n        }\n\n        listToClear.forEach((value)=>{\n            value.destroy();\n        })\n    }\n\n    /// <summary>\n    /// 设置指定物体的层级 Layer \n    /// </summary>\n    /// <param name=\"_go\"></param>\n    /// <param name=\"_layer\"></param>\n    // public static void SetGameObjectLayer(GameObject _go, int _layer)\n    // {\n    //     if (_go == null) return;\n    //     _go.layer = _layer;\n    //     Transform trans = _go.transform;\n    //     for (int i = 0, imax = trans.childCount; i < imax; ++i)\n    //     {\n    //         Transform t = trans.GetChild(i);\n    //         SetGameObjectLayer(t.gameObject, _layer);\n    //     }\n    // }\n\n    /// <summary>\n    /// 产生空的物件\n    /// </summary>\n    /// <param name=\"_pa\"></param>\n    /// <returns></returns>\n    // public static GameObject CreateObj(Transform _pa)\n    // {\n    //     GameObject _obj = new GameObject();\n    //     if(_pa != null)\n    //     {\n    //         _obj.transform.parent = _pa.transform;\n    //     }\n    //     _obj.transform.localPosition = Vector3.zero;\n    //     _obj.transform.localRotation = Quaternion.identity;\n    //     _obj.transform.localScale = Vector3.one;\n    //     return _obj;\n    // }\n    // public static GameObject CreateCube_test(Transform _pa)\n    // {\n    //     GameObject _obj =   GameObject.CreatePrimitive(PrimitiveType.Cube);\n    //     if (_pa != null)\n    //     {\n    //         _obj.transform.parent = _pa.transform;\n    //     }\n    //     _obj.transform.localPosition = Vector3.zero;\n    //     _obj.transform.localRotation = Quaternion.identity;\n    //     _obj.transform.localScale = Vector3.one;\n    //     return _obj;\n    // }\n     \n\n\n    // private static Material mat_img_gray;\n    // public static void SetImageGray(Image img)\n    // {\n    //     if (img == null) return;\n    //     if(mat_img_gray == null)\n    //     {\n    //         mat_img_gray = new Material(Shader.Find(\"Custom/UGUIGray\"));\n    //     }\n    //     img.material = mat_img_gray;      \n    // }\n    // public static void SetImageDefault(Image img)\n    // {\n    //     if (img == null) return;\n    //     img.material = null;      \n    // }\n\n    // public static float angle_360(Vector3 from_, Vector3 to_)\n    // {\n\n    //     Vector3 v3 = Vector3.Cross(from_, to_);\n    //     if (v3.z > 0)\n\n    //         return Vector3.Angle(from_, to_);\n\n    //     else\n\n    //         return 360 - Vector3.Angle(from_, to_);\n\n    // }\n    /// <summary>\n    /// 转换坐标\n    /// st ： 地图坐标，TileW ：地图块宽度 TileH ：地图块高度，x0，y0 ，地图起始坐标\n    /// 地图0,0 坐标Vector2(128,0);\n    /// </summary>\n    // public static Vector2 ConvertToLocalPos(Vector2 st, int TileW, int TileH, int x0, int y0)\n    // {\n    //     int N = (int)((st.x + st.y) * TileW * 0.5f) + x0;\n    //     int M = (int)((st.y - st.x) * TileH * 0.5f) + y0;\n    //     //string news = System.String.Format(\"N is  : {0}, M is : {1}\",N,M);\n    //     return new Vector2(N, M);\n    // }\n    /// <summary>\n    /// 直接赋值Transform\n    /// </summary>\n    /// <param name=\"ori\"></param>\n    /// <param name=\"target\"></param>\n    // public static void SetTranform(Transform ori, Transform target)\n    // {\n    //     target.localPosition = ori.localPosition;\n    //     target.localRotation = ori.localRotation;\n    //     target.localScale = ori.localScale;\n    // }\n    /// <summary>\n    /// 清除所有子对象对当前对象的所有组件  等于创建一个空的GameObject 但引用不变\n    /// </summary>\n    /// <param name=\"go\"></param>\n    // public static void DestoryOnlyKeepTranform(GameObject go)\n    // { \n    //     GameObject[] _goarr = go.getChilds();\n\n    //     for (int i = _goarr.Length - 1; i >= 0; i-- )\n    //     {\n    //         GameObject.Destroy(_goarr[i]);\n    //     }\n    //     Component[] _tfarr = go.GetComponents<Component>();\n    //     for (int j = _tfarr.Length - 1; j >= 0; j-- )\n    //     {\n    //         if (_tfarr[j] is Transform) continue;\n    //         GameObject.Destroy(_tfarr[j]);\n    //     }\n    // }\n    /// <summary>\n    /// Clone一个对象 手动添加所有子节目与 当前节点的所有组件， 等于实例化，但引用不变\n    /// </summary>\n    /// <param name=\"ori\"></param>\n    /// <param name=\"target\"></param>\n    // public static void CloneGameObjectNoDestory(Transform ori, Transform target)\n    // {\n    //     //Copy所有子对象 Copy 之前同步Transformer所有值 \n    //     GameObject[] _goarr = ori.gameObject.getChilds();\n    //     for (int i = _goarr.Length - 1; i >= 0; i--)\n    //     {\n    //         _goarr[i].transform.parent = target;\n    //     }\n     \n    //     //当前对象的组件\n    //     Component[] _tfarr = ori.GetComponents<Component>();\n    //     for (int j = _tfarr.Length - 1; j >= 0; j--)\n    //     {\n    //         if (_tfarr[j] is Transform) continue;\n    //         //if (_tfarr[j] is Transform) CopyComponent<Transform>(ori, target.gameObject);\n    //         if (_tfarr[j] is Animation) CopyComponent<Animation>(_tfarr[j] as Animation, target.gameObject);\n    //         if (_tfarr[j] is BoxCollider) CopyComponent<BoxCollider>(_tfarr[j] as BoxCollider, target.gameObject);\n    //         if (_tfarr[j] is CharactorHolder) CopyComponent<CharactorHolder>(_tfarr[j] as CharactorHolder, target.gameObject);\n    //         if (_tfarr[j] is Rigidbody) CopyComponent<Rigidbody>(_tfarr[j] as Rigidbody, target.gameObject);\n    //         if (_tfarr[j] is UnityEngine.AI.NavMeshAgent) CopyComponent<UnityEngine.AI.NavMeshAgent>(_tfarr[j] as UnityEngine.AI.NavMeshAgent, target.gameObject);          \n    //     }\n    // }\n    /// <summary>\n    /// 点绕某个向量旋转angle后的坐标\n    /// </summary>\n    /// <returns></returns>\n    // public static Vector3 RotateByDir(Vector3 p, Vector3 n, float angle)\n    // {\n    //     float nx = n.x;\n    //     float ny = n.y;\n    //     float nz = n.z;\n    //     double sin = Math.Sin(angle);\n    //     double cos = Math.Cos(angle);\n    //     double i_cos = (1 - cos);\n\n    //     double x = p.x * (nx * nx * i_cos + cos) + p.y * (nx * ny * i_cos - nz * sin) + p.z * (nx * nz * i_cos + ny * sin);\n    //     double y = p.x * (nx * ny * i_cos + nz * sin) + p.y * (ny * ny * i_cos + cos) + p.z * (ny * nz * i_cos - nx * sin);\n    //     double z = p.x * (nx * nz * i_cos - ny * sin) + p.y * (ny * nx * i_cos + nx * sin) + p.z * (nz * nz * i_cos + cos);\n    //     p = new Vector3((float)x, (float)y, (float)z);\n    //     return p;\n    // }\n\n    ///<summay>\n    ///继承MonoBehaviour的，自动查找UI \n    /// </summary>\n    // public static void AutoSetUIProperty<T>(T view, GameObject WinPrefab)\n    // {\n    //     Type tempt = view.GetType();\n    //     foreach (FieldInfo fi in tempt.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public))\n    //     {\n    //         if (!fi.Name.Contains(\"ui_\")) continue;\n    //         //Debug.LogError(fi.FieldType.Name + \". fi.PropertyType.Name..\" + fi.Name); \n    //         Component tempcom = ToolsEx.FindScriptInChild(WinPrefab, fi.FieldType, fi.Name.Replace(\"ui_\", \"\"));\n    //         if (tempcom == null)\n    //         {\n    //             Debug.LogError(fi.Name + \". is not find in \" + tempt.Name);\n    //             continue;\n    //         }\n    //         // GenerateLSCODE(tempcom, tempt.Name);   //\n    //         fi.SetValue(view, tempcom);\n    //         //Debug.LogError(fi.Name);\n    //     }\n    // }  \n\n\n\n    ///<summary>\n    ///当数字达到10W以上转换为10万\n    ///</summary>\n    // public static string intTransformstring(int count)\n    // {\n    //     string append = string.Empty;\n    //     string str = count.ToString();\n    //     if (str.Length >= 6)\n    //     {\n    //         append = (count / 10000).ToString() + \"万\";\n\n    //     }\n    //     else\n    //     {\n    //         append = count.ToString();\n    //     }\n    //     return append;\n    // }\n\n    // public static string intTransformStringKTM(int count)\n    // {\n    //     string appennd = string.Empty;\n    //     string str = count.ToString();\n    //     if (str.Length >= 4 && str.Length < 7)\n    //         appennd = (count / 1000).ToString() + \"K\";\n    //     else if (str.Length >= 7)\n    //         appennd = (count / 1000000).ToString() + \"M\";\n    //     else\n    //         appennd = count.ToString(); \n    //     return appennd;\n    // }\n\n\t///<summary>\n\t///当数字达到1000上转换为1k\n\t///</summary>\n\t// public static string intTransformstringK(int count)\n\t// {\n\t// \tstring append = string.Empty;\n\t// \tstring str = count.ToString();\n\t// \tif (str.Length >= 4)\n\t// \t{\n\t// \t\tappend = (count / 1000).ToString() + \"k\";\n\t\t\t\n\t// \t}\n\t// \telse\n\t// \t{\n\t// \t\tappend = count.ToString();\n\t// \t}\n\t// \treturn append;\n\t// }\n\n    /// <summary>\n    /// 当排行榜的 名次小于等于6位数的时候 显示 第xxxxxx名\n    ///            名次大于等于6位数的时候 显示 xxxxxxxx名\n    /// </summary>\n    /// <param name=\"rank\"></param>\n    /// <returns></returns>\n//     public static string rankTransformstring(int rank)\n//     {\n\n//         string append = string.Empty;\n//         string str = rank.ToString();\n//         if (str.Length <= 5)\n//         {\n//             append =\"第\"+rank+ \"名\";\n\n//         }\n//         else\n//         {\n//             append = (rank / 10000).ToString() + \"名\";\n//         }\n//         return append;\n//     }     \n\n}\n\n//We are improving the documentation on Custom Defines, \n//and it's important to update these threads with the correct way of using them in the current versions of Unity.\n//If you want to modify only global defines, you should use Scripting Define Symbols in Player Settings, because this will cover all the compilers.\n//If you choose the .rsp files instead, you'll have to provide one file for every compiler Unity uses, \n//and you won't know when one or another compiler is used. To do this you must add a text file with the extra directives to the \"Assets/\" folder:\n\n//[td]C#[/td]\n//[td]<Project Path>/Assets/smcs.rsp[/td]\n\n//[td]C# - Editor Scripts[/td]\n//[td]<Project Path>/Assets/gmcs.rsp[/td]\n\n//[td]UnityScript[/td]\n//[td]<Project Path>/Assets/us.rsp[/td]\n\n//[td]Boo[/td]\n//[td]<Project Path>/Assets/boo.rsp[/td]\n\n\n//As an example, if you include the single line \"-define:UNITY_DEBUG\" \n//in your smcs.rsp file the define UNITY_DEBUG will exist as a global define for C# scripts,\n//except for Editor scripts. Every time you make changes to .rsp files you will need to recompile for them to be effective.\n//You can do this by updating or reimporting a single script (.js, .cs or .boo) file. All this information is being added to our documentation."]}