{"version":3,"sources":["assets\\Script\\modules\\@mogafa\\utils\\lib\\WebSocket.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"/","sourcesContent":["/**\n * 请求timer\n */\nimport Message from './Message';\nimport { proto } from \"./proto/MessageID.pb\";\nimport { HotfixMessage } from \"./proto/HotfixMessage.pb\";\nimport { OuterMessage } from \"./proto/OuterMessage.pb\";\nimport { ReconnectManager } from '../../../../BaseFrame/ReconnectManager';\n\ninterface IRequestTimer {\n    [key: string]: any;\n}\n\ninterface IConnectOptions {\n    clientType: string;\n    clientVersion?: string;\n    successCallback?: () => {};\n}\n\ndeclare const window: any;\n\nexport default class WebSocket {\n    //* pinus\n    private _pinus: any = window.pinus;\n    //* 大门端口号\n    private _gatePort: string = null;\n    //* 大门主机\n    private _gateHost: string = null;\n    //* 是否重连\n    private _reConnect: boolean = false;\n    //* 连接次数\n    private _connectCount: number = 0;\n    //* 最多连接次数\n    private _connectMaxCount: number = 3;\n    //* 请求timer\n    private _requestTimer: IRequestTimer = {};\n    private _isInit: boolean = false;\n    private reconnectCallback: Function;\n    private reconnectByAccount: Function;\n    public disconnectCallback: Function;\n    public topAccountCallback: Function;\n    public _isTopAccount: boolean = false;\n    private _isManualBreak: boolean = false; // 是否是手动断开\n    private _reconnectCount: number = 0;\n    public _refreshCallback: Function = null; // 掉帧之后请求最新数据\n\n    protected _keepAliveTimer: any = null;                                  // 心跳定时器\n    protected _receiveMsgTimer: any = null;                                 // 接收数据定时器\n    protected _reconnectTimer: any = null;                                  // 重连定时器\n    protected _heartTime: number = 10000;                                   // 心跳间隔\n    protected _receiveTime: number = 20000;                               // 多久没收到数据断开\n\n    constructor() {\n        // this.init();\n    }\n    /**\n     * 初始化pinus\n     */\n    private init(cb: string = \"init\") {\n        console.log(\"websocket init:\" + cb);\n        this._pinus.off(\"heartbeat timeout\");\n        this._pinus.off(\"io-error\");\n        this._pinus.off(\"close\");\n        this._pinus.off(\"error\");\n        this._pinus.on(\"heartbeat timeout\", (event) => { this.onHeartBet(event) });\n        this._pinus.on(\"io-error\", (event) => { this.onError(event) });\n        this._pinus.on(\"close\", (event) => { this.onClose(event) });\n        this._pinus.on(\"error\", (event) => { console.log(event); });\n        this.createConnect();\n    }\n\n    // onHeartBet\n    protected onHeartBet(event) {\n        console.log(\"heartbeat timeout !\");\n    }\n\n    // onError\n    protected onError(event) {\n        console.log(\"websocket onError !\");\n    }\n\n    // onClose\n    protected onClose(event) {\n        console.log(\"websocket onClose !\", event);\n        if (this._pinus.WebSocket != event.currentTarget) {\n            console.log(\"this._pinus.WebSocket != event.currentTarget\");\n            return;\n        } else {\n            console.log(\"this._pinus.WebSocket == event.currentTarget\");\n        }\n        this._isInit = false;\n        this.clearTimer(); // 清除心跳回调\n        // 顶号或者主动断开\n        if (this._isTopAccount || this._isManualBreak) {\n            return;\n        }\n        this._reconnectCount += 1;\n        console.log(\"this._reconnectCount == \", this._reconnectCount);\n        if (this._reconnectCount >= this._connectMaxCount) {\n            this._reconnectCount = 0;\n            if (this.disconnectCallback) {\n                this.disconnectCallback();\n                this.disconnect();\n            }\n        } else {\n            // this.disconnect();\n            // ReconnectManager.getInstance.reconnect(() => {\n            //     console.log(\"重连成功！\");\n            // }, () => {\n            //     if (this.disconnectCallback) {\n            //         this.disconnectCallback();\n            //         this.disconnect();\n            //     }\n            // }, false)\n            this._reconnectCount = 0;\n            if (this.disconnectCallback) {\n                this.disconnectCallback();\n                this.disconnect();\n            }\n        }\n    }\n\n    public createConnect() {\n        return new Promise<void>((resolve, reject) => {\n            let params = {\n                host: this._gateHost,\n                port: this._gatePort,\n                log: true,\n            }\n            this._pinus.init(params, (res) => {\n                cc.log(\"初始化成功，建立连接\");\n                this._isTopAccount = false;\n                this._isManualBreak = false;\n                this._isInit = true;\n                this._reconnectCount = 0;\n                resolve();\n                this.connect();\n            }, this.encode.bind(this), this.decode.bind(this))\n        });\n    }\n\n    private websocketRequest(\n        route: any,\n        msg: any,\n        successCallback: Function,\n        failCallback?: Function,\n        timeOutCallback?: Function,\n        timeOutDelay: number = 8000\n    ) {\n        let timeOutIndex: number = null;\n        let isReply: boolean = false;\n        let timeout = () => {\n            if (!!isReply) return;\n            if (!!timeOutCallback) timeOutCallback();\n            console.error(\"request timeout:\", route, msg);\n        };\n\n        //* clearTimeout\n        let clear = () => {\n            if (timeOutIndex != null) {\n                this.removeRequestTimeout(timeOutIndex);\n                timeOutIndex = null;\n            }\n        };\n        this._pinus.request(route, msg, (ret: any) => {\n            clear();\n            isReply = true;\n            if (!!successCallback) {\n                if (ret && ret.RpcId > 0) {\n                    successCallback(ret);\n                } else {\n                    //console.error(`路由地址：${route}, 错误码：${ret.code}, 错误信息：${ret.message}`);\n                    if (failCallback) {\n                        failCallback();\n                    }\n                }\n            }\n        });\n\n        //* 有超时 回调才添加超时处理\n        if (timeOutCallback) {\n            timeOutDelay = timeOutDelay || 10000;\n            timeOutIndex = this.addRequestTimeout(timeout, timeOutDelay);\n        }\n    }\n\n    /**\n     * 发起pinus请求\n     * @param route 请求路由\n     * @param msg 请求信息\n     * @param successCallback 成功回调\n     * @param timeOutCallback 超时回调\n     * @param timeOutDelay 超时延时时间\n     */\n    public async request(\n        route: any,\n        msg: any,\n        successCallback: Function,\n        failCallback?: Function,\n        timeOutCallback?: Function,\n        timeOutDelay: number = 8000\n    ) {\n        if (!this._isInit) {\n            // await this.init(\"await\");\n            // this.websocketRequest(route, msg, successCallback, failCallback, timeOutCallback, timeOutDelay);\n        } else {\n            this.websocketRequest(route, msg, successCallback, failCallback, timeOutCallback, timeOutDelay);\n        }\n    }\n\n    /**\n     * 清除超时\n     * @param timeOutIndex\n     */\n    private removeRequestTimeout(timeOutIndex: number) {\n        clearTimeout(timeOutIndex);\n        delete this._requestTimer[timeOutIndex];\n    }\n\n    /**\n     * 添加超时\n     * @param timeoutCallback\n     * @param timeDelay\n     */\n    private addRequestTimeout(timeoutCallback: Function, timeDelay: number) {\n        let timeOutIndex: number = setTimeout(timeoutCallback, timeDelay);\n        this._requestTimer[timeOutIndex] = timeOutIndex;\n        return timeOutIndex;\n    }\n\n    /**\n     * 设置大门连接\n     * @param host\n     * @param port\n     */\n    private setGateConnection(host: string, port: string) {\n        this._gatePort = port;\n        this._gateHost = host;\n    }\n\n    /**\n     * 重新连接服务器、切换服务器端口\n     * @param params 新的host和port、回调\n     */\n    public reconnect(params?: any) {\n        if (params) {\n            this._gatePort = params.port;\n            this._gateHost = params.host;\n            this.reconnectCallback = params.callback;\n        } else {\n            this.reconnectCallback = null;\n        }\n        this.init();\n    }\n\n    //获取当前socket状态\n    public getConnectState() {\n        return this._isInit;\n    }\n\n    /**\n     * 建立连接\n     */\n    private connect() {\n        this.connectGate(this._gateHost, this._gatePort);\n    }\n\n    /**\n     * 断开连接\n     */\n    public disconnect() {\n        console.log(\"断开连接 disconnect\");\n        this._isManualBreak = true;\n        this._isInit = false;\n        this._pinus.disconnect();\n        this.clearTimer();\n    }\n\n    /**\n     * 绑定各类事件，心跳超时、返回错误等事件\n     * @param host\n     * @param port\n     * @param options\n     */\n    private connectGate(host: string, port: string) {\n        if (!host || !port) {\n            console.error(\"主机地址或端口不能为空\");\n            return;\n        }\n        if (this.reconnectCallback) {\n            this.reconnectCallback();\n            this.reconnectCallback = null;\n        }\n        this.resetHearbeatTimer();\n    }\n\n    public setReconnectByAccount(func: Function) {\n        console.log(\"setReconnectByAccount\");\n        this.reconnectByAccount = func;\n    }\n\n    public setHeartBeatCallback(func: Function) {\n        this.disconnectCallback = func;\n    }\n\n    public setTopAccountCallback(func: Function) {\n        this.topAccountCallback = func;\n    }\n\n    // 设置延迟游戏刷新回调\n    public setRefreshCallback(func: Function) {\n        this._refreshCallback = func;\n    }\n\n    public setActorMessageCallback(func: Function) {\n        this._pinus.setActorMessageCallback(func);\n    }\n\n    public encode(msgId: number, msg: any): ArrayBuffer {\n        let cls = msg.constructor;\n        let buf = cls.encode(msg).finish();\n        return Message.toBuffer(msgId, buf);\n    }\n    public decode(data: ArrayBuffer): any {\n        let msg = Message.fromBuffer(data);\n        let msgName = proto.MsgID[msg.msgid];\n\n        let dsseee = HotfixMessage[msgName]\n        if (dsseee) {\n            return HotfixMessage[msgName].decode(msg.data);\n        }\n        dsseee = OuterMessage[msgName]\n        if (dsseee) {\n            return OuterMessage[msgName].decode(msg.data);\n        }\n        return null;\n    }\n\n\n    /********************** 心跳、超时相关处理 *********************/\n    public resetReceiveMsgTimer() {\n        if (this._receiveMsgTimer !== null) {\n            clearTimeout(this._receiveMsgTimer);\n        }\n\n        this._receiveMsgTimer = setTimeout(() => {\n            console.warn(\"NetNode recvieMsgTimer close socket!\");\n            this.disconnect();\n            if (this.disconnectCallback) {\n                this.disconnectCallback();\n            }\n        }, this._receiveTime);\n    }\n\n    public resetHearbeatTimer() {\n        if (this._keepAliveTimer !== null) {\n            clearTimeout(this._keepAliveTimer);\n        }\n\n        this._keepAliveTimer = setTimeout(() => {\n            console.log(\"NetNode keepAliveTimer send Hearbeat\");\n            let heartbeat = OuterMessage.C2G_Heartbeat.create();\n            this.request(proto.MsgID.C2G_Heartbeat, heartbeat, this.Heartbeat_Back.bind(this));\n        }, this._heartTime);\n    }\n\n    public clearTimer() {\n        if (this._receiveMsgTimer !== null) {\n            clearTimeout(this._receiveMsgTimer);\n        }\n        if (this._keepAliveTimer !== null) {\n            clearTimeout(this._keepAliveTimer);\n        }\n        if (this._reconnectTimer !== null) {\n            clearTimeout(this._reconnectTimer);\n        }\n    }\n\n    //心跳包回复\n    public Heartbeat_Back() {\n        console.log(\"Heartbeat_Back\");\n        // 接受到数据，重新定时收数据计时器\n        this.resetReceiveMsgTimer();\n        // 重置心跳包发送器\n        this.resetHearbeatTimer();\n    }\n}\n"]}