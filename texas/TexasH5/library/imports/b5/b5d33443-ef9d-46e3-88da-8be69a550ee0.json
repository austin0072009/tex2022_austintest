{
  "__type__": "cc.TextAsset",
  "_name": "SpinResultsSlot.d",
  "_objFlags": 0,
  "_native": "",
  "text": "import SpinResultsColumn from \"./SpinResultsColumn\";\nimport SpinResultsSymbol from \"./SpinResultsSymbol\";\nimport SpinResultsEvent from \"./SpinResultsEvent\";\nimport { SpinResultsGameMode } from \"./SpinResultsGameMode\";\nimport SpinResultsWheel from \"./SpinResultsWheel\";\nimport SpinResultsWheelItem from \"./SpinResultsWheeItem\";\nexport default class SpinResultsSlot {\n    private _columns;\n    private _matchedLines;\n    private _ofAKind;\n    private _events;\n    private _extraChesses;\n    private _gameMode;\n    private _nextGameMode;\n    private _wheels;\n    private _replaceCodes;\n    private _symbolEvents;\n    constructor(columns?: SpinResultsColumn[], matchedLines?: number[][], ofAKind?: number);\n    /**\n     * 获取列结果集\n     */\n    get columns(): SpinResultsColumn[];\n    /**\n     * 设置列结果集\n     */\n    set columns(value: SpinResultsColumn[]);\n    /**\n     * 获取连线数据\n     */\n    get matchedLines(): number[][];\n    /**\n     * 设置连线数据\n     */\n    set matchedLines(value: number[][]);\n    /**\n     * 获取5、6、7连\n     */\n    get ofAKind(): number;\n    /**\n     * 设置5、6、7连\n     */\n    set ofAKind(value: number);\n    get extraChesses(): SpinResultsSymbol[];\n    set extraChesses(value: SpinResultsSymbol[]);\n    get events(): SpinResultsEvent[];\n    set events(value: SpinResultsEvent[]);\n    get gameMode(): SpinResultsGameMode;\n    set gameMode(value: SpinResultsGameMode);\n    get nextGameMode(): SpinResultsGameMode;\n    set nextGameMode(value: SpinResultsGameMode);\n    get wheels(): SpinResultsWheel[];\n    set wheels(value: SpinResultsWheel[]);\n    get replaceCodes(): number[][];\n    /**\n     * Gets whether has matched lines\n     * 是否有连线\n     */\n    get hasMatchedLines(): boolean;\n    get hasReplaceCodes(): boolean;\n    private getReplaceCodes;\n    /**\n     * 更新cell数据\n     *\n     * @param {number} column 列号\n     * @param {number} row 行号\n     * @param {number} code 棋子编码\n     * @param {number} [assets=0] 资产值\n     * @param {boolean} [fixed=false] 是否固定\n     * @param {number} [extraCode=-1] 额外棋子编码\n     * @param {number} [extraAssets=-1] 额外棋子资产\n     * @param {number} [extraPosition=-1] 额外棋子位置\n     * @param {SpinResultsWheel} [wheel=null] 转盘数据，比如大章鱼选择框\n     * @param {SpinResultsEvent[]} [events=[]] 事件\n     * @memberof SpinResults\n     */\n    updateCell(column: number, row: number, code: number, assets?: number, mockCodes?: number[], fixed?: boolean, extraCode?: number, extraAssets?: number, extraPosition?: number, wheel?: SpinResultsWheel, events?: SpinResultsEvent[]): void;\n    /**\n     * 更新格子资产\n     *\n     * @param {number} column 列号\n     * @param {number} row 行号\n     * @param {number} assets 资产值\n     * @memberof SpinResultsSlot\n     */\n    updateCellAssets(column: number, row: number, assets: number): void;\n    /**\n     * 更新格子固定标记\n     *\n     * @param {number} column 列号\n     * @param {number} row 行号\n     * @param {boolean} fixed 是否固定\n     * @memberof SpinResultsSlot\n     */\n    updateCellFixed(column: number, row: number, fixed: boolean): void;\n    /**\n     * 更新格子额外棋子相关数据\n     *\n     * @param {number} column 列号\n     * @param {number} row 行号\n     * @param {number} extraCode 额外棋子编码\n     * @param {number} [extraAssets=-1] 额外棋子资产\n     * @param {number} [extraPosition=-1] 额外棋子位置\n     * @memberof SpinResultsSlot\n     */\n    updateCellExtraCode(column: number, row: number, extraCode: number, extraAssets?: number, extraPosition?: number): void;\n    /**\n     * 更新格子转盘数据\n     * - 比如海洋关的大章鱼棋子，让用户选择，结果已经预定，相当于转盘\n     *\n     * @param {number} column 列号\n     * @param {number} row 行号\n     * @param {SpinResultsWheel} wheel 转盘数据\n     * @memberof SpinResultsSlot\n     */\n    updateCellWheel(column: number, row: number, values: SpinResultsWheelItem[], finalValue: SpinResultsWheelItem): void;\n    /**\n     * 更新格子事件\n     *\n     * @param {number} column 列号\n     * @param {number} row 行号\n     * @param {SpinResultsEvent[]} events 事件\n     * @memberof SpinResultsSlot\n     */\n    updateCellEvents(column: number, row: number, events: SpinResultsEvent[]): void;\n    /**\n     * 更新发生变化的棋子的mockCodes值，同时更新code值\n     *\n     * @param {number[]} hand 更新的手牌数据，变化的棋子位置才有值，没变化的棋子值为-1\n     * @param {number} columnSize 列数\n     * @param {number} rowSize 行数\n     * @memberof SpinResults\n     */\n    updateChangeCodeMockCodes(hand: number[], columnSize: number, rowSize: number): void;\n    /**\n     * 更新mockCodes值，同时更新code值\n     *\n     * @param {number[]} currentHand 当前手牌数据\n     * @param {number[]} previousHand 之前的手牌数据\n     * @param {number} columnSize 列数\n     * @param {number} rowSize 行数\n     * @memberof SpinResults\n     */\n    updateMockCodes(currentHand: number[], previousHand: number[], columnSize: number, rowSize: number): void;\n    /**\n     * 更新列的isHoldWin\n     *\n     * @param {number} column 列号\n     * @param {boolean} isHoldWin 是否hold win\n     * @memberof SpinResults\n     */\n    updateColumnHoldWin(column: number, isHoldWin: boolean): void;\n    /**\n     * 更新格子code\n     *\n     * @param {number[]} hand 手牌数据\n     * @param {number} rowSize 棋盘行数\n     * @memberof SpinResultsSlot\n     */\n    updateCells(hand: number[], rowSize: number): void;\n    /**\n     * 初始化SpinResultSlot\n     *\n     * @param {number[]} hand 手牌\n     * @param {number} columnSize 列数\n     * @param {number} rowSize 行数\n     * @memberof SpinResultsSlot\n     */\n    init(hand: number[], columnSize: number, rowSize: number): void;\n}\n"
}