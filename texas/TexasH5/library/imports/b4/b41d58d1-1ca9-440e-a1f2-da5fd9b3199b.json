{
  "__type__": "cc.TextAsset",
  "_name": "fairygui.d",
  "_objFlags": 0,
  "_native": "",
  "text": "declare namespace fgui {\n    class AsyncOperation {\n        callback: (obj: GObject) => void;\n        private _node;\n        createObject(pkgName: string, resName: string): void;\n        createObjectFromURL(url: string): void;\n        cancel(): void;\n        private internalCreateObject;\n        private completed;\n    }\n}\ndeclare namespace fgui {\n    class Controller extends cc.EventTarget {\n        private _selectedIndex;\n        private _previousIndex;\n        private _pageIds;\n        private _pageNames;\n        private _actions?;\n        name: string;\n        parent: GComponent;\n        autoRadioGroupDepth?: boolean;\n        changing?: boolean;\n        constructor();\n        dispose(): void;\n        get selectedIndex(): number;\n        set selectedIndex(value: number);\n        onChanged(callback: Function, target?: any): void;\n        offChanged(callback: Function, target?: any): void;\n        setSelectedIndex(value: number): void;\n        get previsousIndex(): number;\n        get selectedPage(): string;\n        set selectedPage(val: string);\n        setSelectedPage(value: string): void;\n        get previousPage(): string;\n        get pageCount(): number;\n        getPageName(index: number): string;\n        addPage(name?: string): void;\n        addPageAt(name: string, index: number): void;\n        removePage(name: string): void;\n        removePageAt(index: number): void;\n        clearPages(): void;\n        hasPage(aName: string): boolean;\n        getPageIndexById(aId: string): number;\n        getPageIdByName(aName: string): string;\n        getPageNameById(aId: string): string;\n        getPageId(index: number): string;\n        get selectedPageId(): string;\n        set selectedPageId(val: string);\n        set oppositePageId(val: string);\n        get previousPageId(): string;\n        runActions(): void;\n        setup(buffer: ByteBuffer): void;\n    }\n}\ndeclare namespace fgui {\n    class DragDropManager {\n        private _agent;\n        private _sourceData;\n        private static _inst;\n        static get inst(): DragDropManager;\n        constructor();\n        get dragAgent(): GObject;\n        get dragging(): boolean;\n        startDrag(source: GObject, icon: string, sourceData?: any, touchId?: number): void;\n        cancel(): void;\n        private onDragEnd;\n    }\n}\ndeclare namespace fgui {\n    enum ButtonMode {\n        Common = 0,\n        Check = 1,\n        Radio = 2\n    }\n    enum AutoSizeType {\n        None = 0,\n        Both = 1,\n        Height = 2,\n        Shrink = 3\n    }\n    enum AlignType {\n        Left = 0,\n        Center = 1,\n        Right = 2\n    }\n    enum VertAlignType {\n        Top = 0,\n        Middle = 1,\n        Bottom = 2\n    }\n    enum LoaderFillType {\n        None = 0,\n        Scale = 1,\n        ScaleMatchHeight = 2,\n        ScaleMatchWidth = 3,\n        ScaleFree = 4,\n        ScaleNoBorder = 5\n    }\n    enum ListLayoutType {\n        SingleColumn = 0,\n        SingleRow = 1,\n        FlowHorizontal = 2,\n        FlowVertical = 3,\n        Pagination = 4\n    }\n    enum ListSelectionMode {\n        Single = 0,\n        Multiple = 1,\n        Multiple_SingleClick = 2,\n        None = 3\n    }\n    enum OverflowType {\n        Visible = 0,\n        Hidden = 1,\n        Scroll = 2\n    }\n    enum PackageItemType {\n        Image = 0,\n        MovieClip = 1,\n        Sound = 2,\n        Component = 3,\n        Atlas = 4,\n        Font = 5,\n        Swf = 6,\n        Misc = 7,\n        Unknown = 8,\n        Spine = 9,\n        DragonBones = 10\n    }\n    enum ObjectType {\n        Image = 0,\n        MovieClip = 1,\n        Swf = 2,\n        Graph = 3,\n        Loader = 4,\n        Group = 5,\n        Text = 6,\n        RichText = 7,\n        InputText = 8,\n        Component = 9,\n        List = 10,\n        Label = 11,\n        Button = 12,\n        ComboBox = 13,\n        ProgressBar = 14,\n        Slider = 15,\n        ScrollBar = 16,\n        Tree = 17,\n        Loader3D = 18\n    }\n    enum ProgressTitleType {\n        Percent = 0,\n        ValueAndMax = 1,\n        Value = 2,\n        Max = 3\n    }\n    enum ScrollBarDisplayType {\n        Default = 0,\n        Visible = 1,\n        Auto = 2,\n        Hidden = 3\n    }\n    enum ScrollType {\n        Horizontal = 0,\n        Vertical = 1,\n        Both = 2\n    }\n    enum FlipType {\n        None = 0,\n        Horizontal = 1,\n        Vertical = 2,\n        Both = 3\n    }\n    enum ChildrenRenderOrder {\n        Ascent = 0,\n        Descent = 1,\n        Arch = 2\n    }\n    enum GroupLayoutType {\n        None = 0,\n        Horizontal = 1,\n        Vertical = 2\n    }\n    enum PopupDirection {\n        Auto = 0,\n        Up = 1,\n        Down = 2\n    }\n    enum RelationType {\n        Left_Left = 0,\n        Left_Center = 1,\n        Left_Right = 2,\n        Center_Center = 3,\n        Right_Left = 4,\n        Right_Center = 5,\n        Right_Right = 6,\n        Top_Top = 7,\n        Top_Middle = 8,\n        Top_Bottom = 9,\n        Middle_Middle = 10,\n        Bottom_Top = 11,\n        Bottom_Middle = 12,\n        Bottom_Bottom = 13,\n        Width = 14,\n        Height = 15,\n        LeftExt_Left = 16,\n        LeftExt_Right = 17,\n        RightExt_Left = 18,\n        RightExt_Right = 19,\n        TopExt_Top = 20,\n        TopExt_Bottom = 21,\n        BottomExt_Top = 22,\n        BottomExt_Bottom = 23,\n        Size = 24\n    }\n    enum FillMethod {\n        None = 0,\n        Horizontal = 1,\n        Vertical = 2,\n        Radial90 = 3,\n        Radial180 = 4,\n        Radial360 = 5\n    }\n    enum FillOrigin {\n        Top = 0,\n        Bottom = 1,\n        Left = 2,\n        Right = 3\n    }\n    enum ObjectPropID {\n        Text = 0,\n        Icon = 1,\n        Color = 2,\n        OutlineColor = 3,\n        Playing = 4,\n        Frame = 5,\n        DeltaTime = 6,\n        TimeScale = 7,\n        FontSize = 8,\n        Selected = 9\n    }\n}\ndeclare namespace fgui {\n    class GObject {\n        data?: any;\n        packageItem?: PackageItem;\n        static draggingObject: GObject;\n        protected _x: number;\n        protected _y: number;\n        protected _alpha: number;\n        protected _visible: boolean;\n        protected _touchable: boolean;\n        protected _grayed?: boolean;\n        protected _draggable?: boolean;\n        protected _skewX: number;\n        protected _skewY: number;\n        protected _pivotAsAnchor?: boolean;\n        protected _sortingOrder: number;\n        protected _internalVisible: boolean;\n        protected _handlingController?: boolean;\n        protected _tooltips?: string;\n        protected _blendMode: BlendMode;\n        protected _pixelSnapping?: boolean;\n        protected _dragTesting?: boolean;\n        protected _dragStartPos?: cc.Vec2;\n        protected _relations: Relations;\n        protected _group: GGroup;\n        protected _gears: GearBase[];\n        protected _node: cc.Node;\n        protected _dragBounds?: cc.Rect;\n        sourceWidth: number;\n        sourceHeight: number;\n        initWidth: number;\n        initHeight: number;\n        minWidth: number;\n        minHeight: number;\n        maxWidth: number;\n        maxHeight: number;\n        _parent: GComponent;\n        _width: number;\n        _height: number;\n        _rawWidth: number;\n        _rawHeight: number;\n        _id: string;\n        _name: string;\n        _underConstruct: boolean;\n        _gearLocked?: boolean;\n        _sizePercentInGroup: number;\n        _touchDisabled?: boolean;\n        _partner: GObjectPartner;\n        _treeNode?: GTreeNode;\n        private _hitTestPt?;\n        static _defaultGroupIndex: number;\n        constructor();\n        get id(): string;\n        get name(): string;\n        set name(value: string);\n        get x(): number;\n        set x(value: number);\n        get y(): number;\n        set y(value: number);\n        setPosition(xv: number, yv: number): void;\n        get xMin(): number;\n        set xMin(value: number);\n        get yMin(): number;\n        set yMin(value: number);\n        get pixelSnapping(): boolean;\n        set pixelSnapping(value: boolean);\n        center(restraint?: boolean): void;\n        get width(): number;\n        set width(value: number);\n        get height(): number;\n        set height(value: number);\n        setSize(wv: number, hv: number, ignorePivot?: boolean): void;\n        makeFullScreen(): void;\n        ensureSizeCorrect(): void;\n        get actualWidth(): number;\n        get actualHeight(): number;\n        get scaleX(): number;\n        set scaleX(value: number);\n        get scaleY(): number;\n        set scaleY(value: number);\n        setScale(sx: number, sy: number): void;\n        get skewX(): number;\n        set skewX(value: number);\n        get skewY(): number;\n        set skewY(value: number);\n        setSkew(xv: number, yv: number): void;\n        get pivotX(): number;\n        set pivotX(value: number);\n        get pivotY(): number;\n        set pivotY(value: number);\n        setPivot(xv: number, yv: number, asAnchor?: boolean): void;\n        get pivotAsAnchor(): boolean;\n        get touchable(): boolean;\n        set touchable(value: boolean);\n        get grayed(): boolean;\n        set grayed(value: boolean);\n        get enabled(): boolean;\n        set enabled(value: boolean);\n        get rotation(): number;\n        set rotation(value: number);\n        get alpha(): number;\n        set alpha(value: number);\n        get visible(): boolean;\n        set visible(value: boolean);\n        get _finalVisible(): boolean;\n        get internalVisible3(): boolean;\n        get sortingOrder(): number;\n        set sortingOrder(value: number);\n        requestFocus(): void;\n        get tooltips(): string;\n        set tooltips(value: string);\n        get blendMode(): BlendMode;\n        set blendMode(value: BlendMode);\n        get onStage(): boolean;\n        get resourceURL(): string;\n        set group(value: GGroup);\n        get group(): GGroup;\n        getGear(index: number): GearBase;\n        protected updateGear(index: number): void;\n        checkGearController(index: number, c: Controller): boolean;\n        updateGearFromRelations(index: number, dx: number, dy: number): void;\n        addDisplayLock(): number;\n        releaseDisplayLock(token: number): void;\n        private checkGearDisplay;\n        get gearXY(): GearXY;\n        get gearSize(): GearSize;\n        get gearLook(): GearLook;\n        get relations(): Relations;\n        addRelation(target: GObject, relationType: number, usePercent?: boolean): void;\n        removeRelation(target: GObject, relationType: number): void;\n        get node(): cc.Node;\n        get parent(): GComponent;\n        removeFromParent(): void;\n        findParent(): GObject;\n        get root(): GRoot;\n        get asCom(): GComponent;\n        get asButton(): GButton;\n        get asLabel(): GLabel;\n        get asProgress(): GProgressBar;\n        get asTextField(): GTextField;\n        get asRichTextField(): GRichTextField;\n        get asTextInput(): GTextInput;\n        get asLoader(): GLoader;\n        get asList(): GList;\n        get asTree(): GTree;\n        get asGraph(): GGraph;\n        get asGroup(): GGroup;\n        get asSlider(): GSlider;\n        get asComboBox(): GComboBox;\n        get asImage(): GImage;\n        get asMovieClip(): GMovieClip;\n        static cast(obj: cc.Node): GObject;\n        get text(): string;\n        set text(value: string);\n        get icon(): string;\n        set icon(value: string);\n        get treeNode(): GTreeNode;\n        dispose(): void;\n        protected onEnable(): void;\n        protected onDisable(): void;\n        protected onUpdate(): void;\n        protected onDestroy(): void;\n        onClick(listener: Function, target?: any): void;\n        onceClick(listener: Function, target?: any): void;\n        offClick(listener: Function, target?: any): void;\n        clearClick(): void;\n        hasClickListener(): boolean;\n        on(type: string, listener: Function, target?: any): void;\n        once(type: string, listener: Function, target?: any): void;\n        off(type: string, listener?: Function, target?: any): void;\n        get draggable(): boolean;\n        set draggable(value: boolean);\n        get dragBounds(): cc.Rect;\n        set dragBounds(value: cc.Rect);\n        startDrag(touchId?: number): void;\n        stopDrag(): void;\n        get dragging(): boolean;\n        localToGlobal(ax?: number, ay?: number, result?: cc.Vec2): cc.Vec2;\n        globalToLocal(ax?: number, ay?: number, result?: cc.Vec2): cc.Vec2;\n        localToGlobalRect(ax?: number, ay?: number, aw?: number, ah?: number, result?: cc.Rect): cc.Rect;\n        globalToLocalRect(ax?: number, ay?: number, aw?: number, ah?: number, result?: cc.Rect): cc.Rect;\n        handleControllerChanged(c: Controller): void;\n        protected handleAnchorChanged(): void;\n        handlePositionChanged(): void;\n        protected handleSizeChanged(): void;\n        protected handleGrayedChanged(): void;\n        handleVisibleChanged(): void;\n        hitTest(globalPt: cc.Vec2, forTouch?: boolean): GObject;\n        protected _hitTest(pt: cc.Vec2, globalPt: cc.Vec2): GObject;\n        getProp(index: number): any;\n        setProp(index: number, value: any): void;\n        constructFromResource(): void;\n        setup_beforeAdd(buffer: ByteBuffer, beginPos: number): void;\n        setup_afterAdd(buffer: ByteBuffer, beginPos: number): void;\n        private onRollOver;\n        private onRollOut;\n        private initDrag;\n        private dragBegin;\n        private dragEnd;\n        private onTouchBegin_0;\n        private onTouchMove_0;\n        private onTouchEnd_0;\n    }\n    class GObjectPartner extends cc.Component {\n        _emitDisplayEvents: boolean;\n        callLater(callback: Function, delay?: number): void;\n        onClickLink(evt: Event, text: string): void;\n        protected onEnable(): void;\n        protected onDisable(): void;\n        protected update(dt: any): void;\n        protected onDestroy(): void;\n    }\n}\ndeclare namespace fgui {\n    class GComponent extends GObject {\n        hitArea?: IHitTest;\n        private _sortingChildCount;\n        private _opaque;\n        private _applyingController?;\n        private _rectMask?;\n        private _maskContent?;\n        protected _margin: Margin;\n        protected _trackBounds: boolean;\n        protected _boundsChanged: boolean;\n        protected _childrenRenderOrder: ChildrenRenderOrder;\n        protected _apexIndex: number;\n        _buildingDisplayList: boolean;\n        _children: Array<GObject>;\n        _controllers: Array<Controller>;\n        _transitions: Array<Transition>;\n        _container: cc.Node;\n        _scrollPane?: ScrollPane;\n        _alignOffset: cc.Vec2;\n        _customMask?: cc.Mask;\n        constructor();\n        dispose(): void;\n        get displayListContainer(): cc.Node;\n        addChild(child: GObject): GObject;\n        addChildAt(child: GObject, index: number): GObject;\n        private getInsertPosForSortingChild;\n        removeChild(child: GObject, dispose?: boolean): GObject;\n        removeChildAt(index: number, dispose?: boolean): GObject;\n        removeChildren(beginIndex?: number, endIndex?: number, dispose?: boolean): void;\n        getChildAt(index: number): GObject;\n        getChild(name: string): GObject;\n        getChildByPath(path: String): GObject;\n        getVisibleChild(name: string): GObject;\n        getChildInGroup(name: string, group: GGroup): GObject;\n        getChildById(id: string): GObject;\n        getChildIndex(child: GObject): number;\n        setChildIndex(child: GObject, index: number): void;\n        setChildIndexBefore(child: GObject, index: number): number;\n        private _setChildIndex;\n        swapChildren(child1: GObject, child2: GObject): void;\n        swapChildrenAt(index1: number, index2: number): void;\n        get numChildren(): number;\n        isAncestorOf(child: GObject): boolean;\n        addController(controller: Controller): void;\n        getControllerAt(index: number): Controller;\n        getController(name: string): Controller;\n        removeController(c: Controller): void;\n        get controllers(): Array<Controller>;\n        private onChildAdd;\n        private buildNativeDisplayList;\n        applyController(c: Controller): void;\n        applyAllControllers(): void;\n        adjustRadioGroupDepth(obj: GObject, c: Controller): void;\n        getTransitionAt(index: number): Transition;\n        getTransition(transName: string): Transition;\n        isChildInView(child: GObject): boolean;\n        getFirstChildInView(): number;\n        get scrollPane(): ScrollPane;\n        get opaque(): boolean;\n        set opaque(value: boolean);\n        get margin(): Margin;\n        set margin(value: Margin);\n        get childrenRenderOrder(): ChildrenRenderOrder;\n        set childrenRenderOrder(value: ChildrenRenderOrder);\n        get apexIndex(): number;\n        set apexIndex(value: number);\n        get mask(): GObject;\n        set mask(value: GObject);\n        setMask(value: GObject, inverted: boolean): void;\n        private onMaskReady;\n        private onMaskContentChanged;\n        get _pivotCorrectX(): number;\n        get _pivotCorrectY(): number;\n        get baseUserData(): string;\n        protected setupScroll(buffer: ByteBuffer): void;\n        protected setupOverflow(overflow: OverflowType): void;\n        protected handleAnchorChanged(): void;\n        protected handleSizeChanged(): void;\n        protected handleGrayedChanged(): void;\n        handleControllerChanged(c: Controller): void;\n        protected _hitTest(pt: cc.Vec2, globalPt: cc.Vec2): GObject;\n        setBoundsChangedFlag(): void;\n        private refresh;\n        ensureBoundsCorrect(): void;\n        protected updateBounds(): void;\n        setBounds(ax: number, ay: number, aw: number, ah?: number): void;\n        get viewWidth(): number;\n        set viewWidth(value: number);\n        get viewHeight(): number;\n        set viewHeight(value: number);\n        getSnappingPosition(xValue: number, yValue: number, resultPoint?: cc.Vec2): cc.Vec2;\n        childSortingOrderChanged(child: GObject, oldValue: number, newValue?: number): void;\n        constructFromResource(): void;\n        constructFromResource2(objectPool: Array<GObject>, poolIndex: number): void;\n        protected constructExtension(buffer: ByteBuffer): void;\n        protected onConstruct(): void;\n        setup_afterAdd(buffer: ByteBuffer, beginPos: number): void;\n        protected onEnable(): void;\n        protected onDisable(): void;\n    }\n}\ndeclare namespace fgui {\n    class GButton extends GComponent {\n        protected _titleObject: GObject;\n        protected _iconObject: GObject;\n        private _mode;\n        private _selected;\n        private _title;\n        private _selectedTitle;\n        private _icon;\n        private _selectedIcon;\n        private _sound;\n        private _soundVolumeScale;\n        private _buttonController;\n        private _relatedController?;\n        private _relatedPageId;\n        private _changeStateOnClick;\n        private _linkedPopup?;\n        private _downEffect;\n        private _downEffectValue;\n        private _downColor?;\n        private _downScaled?;\n        private _down;\n        private _over;\n        static UP: string;\n        static DOWN: string;\n        static OVER: string;\n        static SELECTED_OVER: string;\n        static DISABLED: string;\n        static SELECTED_DISABLED: string;\n        constructor();\n        get icon(): string;\n        set icon(value: string);\n        get selectedIcon(): string;\n        set selectedIcon(value: string);\n        get title(): string;\n        set title(value: string);\n        get text(): string;\n        set text(value: string);\n        get selectedTitle(): string;\n        set selectedTitle(value: string);\n        get titleColor(): cc.Color;\n        set titleColor(value: cc.Color);\n        get titleFontSize(): number;\n        set titleFontSize(value: number);\n        get sound(): string;\n        set sound(val: string);\n        get soundVolumeScale(): number;\n        set soundVolumeScale(value: number);\n        set selected(val: boolean);\n        get selected(): boolean;\n        get mode(): ButtonMode;\n        set mode(value: ButtonMode);\n        get relatedController(): Controller;\n        set relatedController(val: Controller);\n        get relatedPageId(): string;\n        set relatedPageId(val: string);\n        get changeStateOnClick(): boolean;\n        set changeStateOnClick(value: boolean);\n        get linkedPopup(): GObject;\n        set linkedPopup(value: GObject);\n        getTextField(): GTextField;\n        fireClick(): void;\n        protected setState(val: string): void;\n        protected setCurrentState(): void;\n        handleControllerChanged(c: Controller): void;\n        protected handleGrayedChanged(): void;\n        getProp(index: number): any;\n        setProp(index: number, value: any): void;\n        protected constructExtension(buffer: ByteBuffer): void;\n        setup_afterAdd(buffer: ByteBuffer, beginPos: number): void;\n        private onRollOver_1;\n        private onRollOut_1;\n        private onTouchBegin_1;\n        private onTouchEnd_1;\n        private onClick_1;\n    }\n}\ndeclare namespace fgui {\n    class GComboBox extends GComponent {\n        dropdown: GComponent;\n        protected _titleObject: GObject;\n        protected _iconObject: GObject;\n        protected _list: GList;\n        private _items;\n        private _values;\n        private _icons?;\n        private _visibleItemCount;\n        private _itemsUpdated;\n        private _selectedIndex;\n        private _buttonController;\n        private _popupDirection;\n        private _selectionController;\n        private _over;\n        private _down;\n        constructor();\n        get text(): string;\n        set text(value: string);\n        get icon(): string;\n        set icon(value: string);\n        get titleColor(): cc.Color;\n        set titleColor(value: cc.Color);\n        get titleFontSize(): number;\n        set titleFontSize(value: number);\n        get visibleItemCount(): number;\n        set visibleItemCount(value: number);\n        get popupDirection(): PopupDirection;\n        set popupDirection(value: PopupDirection);\n        get items(): Array<string>;\n        set items(value: Array<string>);\n        get icons(): Array<string>;\n        set icons(value: Array<string>);\n        get values(): Array<string>;\n        set values(value: Array<string>);\n        get selectedIndex(): number;\n        set selectedIndex(val: number);\n        get value(): string;\n        set value(val: string);\n        get selectionController(): Controller;\n        set selectionController(value: Controller);\n        getTextField(): GTextField;\n        protected setState(val: string): void;\n        getProp(index: number): any;\n        setProp(index: number, value: any): void;\n        protected constructExtension(buffer: ByteBuffer): void;\n        handleControllerChanged(c: Controller): void;\n        private updateSelectionController;\n        dispose(): void;\n        setup_afterAdd(buffer: ByteBuffer, beginPos: number): void;\n        protected showDropdown(): void;\n        private onPopupClosed;\n        private onClickItem;\n        private onClickItem2;\n        private onRollOver_1;\n        private onRollOut_1;\n        private onTouchBegin_1;\n        private onTouchEnd_1;\n    }\n}\ndeclare namespace fgui {\n    class GGraph extends GObject {\n        _content: cc.Graphics;\n        private _type;\n        private _lineSize;\n        private _lineColor;\n        private _fillColor;\n        private _cornerRadius?;\n        private _sides?;\n        private _startAngle?;\n        private _polygonPoints?;\n        private _distances?;\n        private _hasContent;\n        constructor();\n        drawRect(lineSize: number, lineColor: cc.Color, fillColor: cc.Color, corner?: Array<number>): void;\n        drawEllipse(lineSize: number, lineColor: cc.Color, fillColor: cc.Color): void;\n        drawRegularPolygon(lineSize: number, lineColor: cc.Color, fillColor: cc.Color, sides: number, startAngle?: number, distances?: number[]): void;\n        drawPolygon(lineSize: number, lineColor: cc.Color, fillColor: cc.Color, points: Array<number>): void;\n        get distances(): number[];\n        set distances(value: number[]);\n        clearGraphics(): void;\n        get type(): number;\n        get color(): cc.Color;\n        set color(value: cc.Color);\n        private updateGraph;\n        private drawPath;\n        protected handleSizeChanged(): void;\n        protected handleAnchorChanged(): void;\n        getProp(index: number): any;\n        setProp(index: number, value: any): void;\n        protected _hitTest(pt: cc.Vec2): GObject;\n        setup_beforeAdd(buffer: ByteBuffer, beginPos: number): void;\n    }\n}\ndeclare namespace fgui {\n    class GGroup extends GObject {\n        private _layout;\n        private _lineGap;\n        private _columnGap;\n        private _excludeInvisibles;\n        private _autoSizeDisabled;\n        private _mainGridIndex;\n        private _mainGridMinSize;\n        private _boundsChanged;\n        private _percentReady;\n        private _mainChildIndex;\n        private _totalSize;\n        private _numChildren;\n        _updating: number;\n        constructor();\n        dispose(): void;\n        get layout(): number;\n        set layout(value: number);\n        get lineGap(): number;\n        set lineGap(value: number);\n        get columnGap(): number;\n        set columnGap(value: number);\n        get excludeInvisibles(): boolean;\n        set excludeInvisibles(value: boolean);\n        get autoSizeDisabled(): boolean;\n        set autoSizeDisabled(value: boolean);\n        get mainGridMinSize(): number;\n        set mainGridMinSize(value: number);\n        get mainGridIndex(): number;\n        set mainGridIndex(value: number);\n        setBoundsChangedFlag(positionChangedOnly?: boolean): void;\n        private _ensureBoundsCorrect;\n        ensureSizeCorrect(): void;\n        ensureBoundsCorrect(): void;\n        private updateBounds;\n        private handleLayout;\n        moveChildren(dx: number, dy: number): void;\n        resizeChildren(dw: number, dh: number): void;\n        handleAlphaChanged(): void;\n        handleVisibleChanged(): void;\n        setup_beforeAdd(buffer: ByteBuffer, beginPos: number): void;\n        setup_afterAdd(buffer: ByteBuffer, beginPos: number): void;\n    }\n}\ndeclare namespace fgui {\n    class GImage extends GObject {\n        _content: Image;\n        constructor();\n        get color(): cc.Color;\n        set color(value: cc.Color);\n        get flip(): FlipType;\n        set flip(value: FlipType);\n        get fillMethod(): FillMethod;\n        set fillMethod(value: FillMethod);\n        get fillOrigin(): FillOrigin;\n        set fillOrigin(value: FillOrigin);\n        get fillClockwise(): boolean;\n        set fillClockwise(value: boolean);\n        get fillAmount(): number;\n        set fillAmount(value: number);\n        constructFromResource(): void;\n        protected handleGrayedChanged(): void;\n        getProp(index: number): any;\n        setProp(index: number, value: any): void;\n        setup_beforeAdd(buffer: ByteBuffer, beginPos: number): void;\n    }\n}\ndeclare namespace fgui {\n    class GLabel extends GComponent {\n        protected _titleObject: GObject;\n        protected _iconObject: GObject;\n        constructor();\n        get icon(): string;\n        set icon(value: string);\n        get title(): string;\n        set title(value: string);\n        get text(): string;\n        set text(value: string);\n        get titleColor(): cc.Color;\n        set titleColor(value: cc.Color);\n        get titleFontSize(): number;\n        set titleFontSize(value: number);\n        set editable(val: boolean);\n        get editable(): boolean;\n        getTextField(): GTextField;\n        getProp(index: number): any;\n        setProp(index: number, value: any): void;\n        protected constructExtension(buffer: ByteBuffer): void;\n        setup_afterAdd(buffer: ByteBuffer, beginPos: number): void;\n    }\n}\ndeclare namespace fgui {\n    class GList extends GComponent {\n        itemRenderer: (index: number, item: GObject) => void;\n        itemProvider: (index: number) => string;\n        scrollItemToViewOnClick: boolean;\n        foldInvisibleItems: boolean;\n        private _layout;\n        private _lineCount;\n        private _columnCount;\n        private _lineGap;\n        private _columnGap;\n        private _defaultItem;\n        private _autoResizeItem;\n        private _selectionMode;\n        private _align;\n        private _verticalAlign;\n        private _selectionController?;\n        private _lastSelectedIndex;\n        private _pool;\n        private _virtual?;\n        private _loop?;\n        private _numItems;\n        private _realNumItems;\n        private _firstIndex;\n        private _curLineItemCount;\n        private _curLineItemCount2;\n        private _itemSize?;\n        private _virtualListChanged;\n        private _virtualItems?;\n        private _eventLocked?;\n        private itemInfoVer;\n        constructor();\n        dispose(): void;\n        get layout(): ListLayoutType;\n        set layout(value: ListLayoutType);\n        get lineCount(): number;\n        set lineCount(value: number);\n        get columnCount(): number;\n        set columnCount(value: number);\n        get lineGap(): number;\n        set lineGap(value: number);\n        get columnGap(): number;\n        set columnGap(value: number);\n        get align(): AlignType;\n        set align(value: AlignType);\n        get verticalAlign(): VertAlignType;\n        set verticalAlign(value: VertAlignType);\n        get virtualItemSize(): cc.Size;\n        set virtualItemSize(value: cc.Size);\n        get defaultItem(): string;\n        set defaultItem(val: string);\n        get autoResizeItem(): boolean;\n        set autoResizeItem(value: boolean);\n        get selectionMode(): ListSelectionMode;\n        set selectionMode(value: ListSelectionMode);\n        get selectionController(): Controller;\n        set selectionController(value: Controller);\n        get itemPool(): GObjectPool;\n        getFromPool(url?: string): GObject;\n        returnToPool(obj: GObject): void;\n        addChildAt(child: GObject, index: number): GObject;\n        addItem(url?: string): GObject;\n        addItemFromPool(url?: string): GObject;\n        removeChildAt(index: number, dispose?: boolean): GObject;\n        removeChildToPoolAt(index: number): void;\n        removeChildToPool(child: GObject): void;\n        removeChildrenToPool(beginIndex?: number, endIndex?: number): void;\n        get selectedIndex(): number;\n        set selectedIndex(value: number);\n        getSelection(result?: number[]): number[];\n        addSelection(index: number, scrollItToView?: boolean): void;\n        removeSelection(index: number): void;\n        clearSelection(): void;\n        private clearSelectionExcept;\n        selectAll(): void;\n        selectNone(): void;\n        selectReverse(): void;\n        handleArrowKey(dir: number): void;\n        private onClickItem;\n        protected dispatchItemEvent(item: GObject, evt: Event): void;\n        private setSelectionOnEvent;\n        resizeToFit(itemCount?: number, minSize?: number): void;\n        getMaxItemWidth(): number;\n        protected handleSizeChanged(): void;\n        handleControllerChanged(c: Controller): void;\n        private updateSelectionController;\n        getSnappingPosition(xValue: number, yValue: number, resultPoint?: cc.Vec2): cc.Vec2;\n        scrollToView(index: number, ani?: boolean, setFirst?: boolean): void;\n        getFirstChildInView(): number;\n        childIndexToItemIndex(index: number): number;\n        itemIndexToChildIndex(index: number): number;\n        setVirtual(): void;\n        setVirtualAndLoop(): void;\n        private _setVirtual;\n        get numItems(): number;\n        set numItems(value: number);\n        refreshVirtualList(): void;\n        private checkVirtualList;\n        private setVirtualListChangedFlag;\n        private _refreshVirtualList;\n        private __scrolled;\n        private getIndexOnPos1;\n        private getIndexOnPos2;\n        private getIndexOnPos3;\n        private handleScroll;\n        private static pos_param;\n        private handleScroll1;\n        private handleScroll2;\n        private handleScroll3;\n        private handleArchOrder1;\n        private handleArchOrder2;\n        private handleAlign;\n        protected updateBounds(): void;\n        setup_beforeAdd(buffer: ByteBuffer, beginPos: number): void;\n        protected readItems(buffer: ByteBuffer): void;\n        protected setupItem(buffer: ByteBuffer, obj: GObject): void;\n        setup_afterAdd(buffer: ByteBuffer, beginPos: number): void;\n    }\n}\ndeclare namespace fgui {\n    class GObjectPool {\n        private _pool;\n        private _count;\n        constructor();\n        clear(): void;\n        get count(): number;\n        getObject(url: string): GObject;\n        returnObject(obj: GObject): void;\n    }\n}\ndeclare namespace fgui {\n    class GLoader extends GObject {\n        _content: MovieClip;\n        private _url;\n        private _align;\n        private _verticalAlign;\n        private _autoSize;\n        private _fill;\n        private _shrinkOnly;\n        private _showErrorSign;\n        private _playing;\n        private _frame;\n        private _color;\n        private _contentItem;\n        private _container;\n        private _errorSign?;\n        private _content2?;\n        private _updatingLayout;\n        private static _errorSignPool;\n        constructor();\n        dispose(): void;\n        get url(): string;\n        set url(value: string);\n        get icon(): string;\n        set icon(value: string);\n        get align(): AlignType;\n        set align(value: AlignType);\n        get verticalAlign(): VertAlignType;\n        set verticalAlign(value: VertAlignType);\n        get fill(): LoaderFillType;\n        set fill(value: LoaderFillType);\n        get shrinkOnly(): boolean;\n        set shrinkOnly(value: boolean);\n        get autoSize(): boolean;\n        set autoSize(value: boolean);\n        get playing(): boolean;\n        set playing(value: boolean);\n        get frame(): number;\n        set frame(value: number);\n        get color(): cc.Color;\n        set color(value: cc.Color);\n        get fillMethod(): FillMethod;\n        set fillMethod(value: FillMethod);\n        get fillOrigin(): FillOrigin;\n        set fillOrigin(value: FillOrigin);\n        get fillClockwise(): boolean;\n        set fillClockwise(value: boolean);\n        get fillAmount(): number;\n        set fillAmount(value: number);\n        get showErrorSign(): boolean;\n        set showErrorSign(value: boolean);\n        get component(): GComponent;\n        get texture(): cc.SpriteFrame;\n        set texture(value: cc.SpriteFrame);\n        protected loadContent(): void;\n        protected loadFromPackage(itemURL: string): void;\n        protected loadExternal(): void;\n        private onLoaded;\n        protected freeExternal(texture: cc.SpriteFrame): void;\n        protected onExternalLoadSuccess(texture: cc.SpriteFrame): void;\n        protected onExternalLoadFailed(): void;\n        private setErrorState;\n        private clearErrorState;\n        private updateLayout;\n        private clearContent;\n        protected handleSizeChanged(): void;\n        protected handleAnchorChanged(): void;\n        protected handleGrayedChanged(): void;\n        protected _hitTest(pt: cc.Vec2, globalPt: cc.Vec2): GObject;\n        getProp(index: number): any;\n        setProp(index: number, value: any): void;\n        setup_beforeAdd(buffer: ByteBuffer, beginPos: number): void;\n    }\n}\ndeclare namespace fgui {\n    class GLoader3D extends GObject {\n        private _url;\n        private _align;\n        private _verticalAlign;\n        private _autoSize;\n        private _fill;\n        private _shrinkOnly;\n        private _playing;\n        private _frame;\n        private _loop;\n        private _animationName;\n        private _skinName;\n        private _color;\n        private _contentItem;\n        private _container;\n        private _content;\n        private _updatingLayout;\n        constructor();\n        dispose(): void;\n        get url(): string;\n        set url(value: string);\n        get icon(): string;\n        set icon(value: string);\n        get align(): AlignType;\n        set align(value: AlignType);\n        get verticalAlign(): VertAlignType;\n        set verticalAlign(value: VertAlignType);\n        get fill(): LoaderFillType;\n        set fill(value: LoaderFillType);\n        get shrinkOnly(): boolean;\n        set shrinkOnly(value: boolean);\n        get autoSize(): boolean;\n        set autoSize(value: boolean);\n        get playing(): boolean;\n        set playing(value: boolean);\n        get frame(): number;\n        set frame(value: number);\n        get animationName(): string;\n        set animationName(value: string);\n        get skinName(): string;\n        set skinName(value: string);\n        get loop(): boolean;\n        set loop(value: boolean);\n        get color(): cc.Color;\n        set color(value: cc.Color);\n        get content(): sp.Skeleton | dragonBones.ArmatureDisplay;\n        protected loadContent(): void;\n        protected loadFromPackage(itemURL: string): void;\n        private onLoaded;\n        setSpine(asset: sp.SkeletonData, anchor: cc.Vec2, pma?: boolean): void;\n        setDragonBones(asset: dragonBones.DragonBonesAsset, atlasAsset: dragonBones.DragonBonesAtlasAsset, anchor: cc.Vec2, pma?: boolean): void;\n        private onChange;\n        private onChangeSpine;\n        private onChangeDragonBones;\n        protected loadExternal(): void;\n        private onLoaded2;\n        private updateLayout;\n        private clearContent;\n        protected handleSizeChanged(): void;\n        protected handleAnchorChanged(): void;\n        protected handleGrayedChanged(): void;\n        getProp(index: number): any;\n        setProp(index: number, value: any): void;\n        setup_beforeAdd(buffer: ByteBuffer, beginPos: number): void;\n    }\n}\ndeclare namespace fgui {\n    class GMovieClip extends GObject {\n        _content: MovieClip;\n        constructor();\n        get color(): cc.Color;\n        set color(value: cc.Color);\n        get playing(): boolean;\n        set playing(value: boolean);\n        get frame(): number;\n        set frame(value: number);\n        get timeScale(): number;\n        set timeScale(value: number);\n        rewind(): void;\n        syncStatus(anotherMc: GMovieClip): void;\n        advance(timeInSeconds: number): void;\n        setPlaySettings(start?: number, end?: number, times?: number, endAt?: number, endCallback?: Function, callbackObj?: any): void;\n        protected handleGrayedChanged(): void;\n        protected handleSizeChanged(): void;\n        getProp(index: number): any;\n        setProp(index: number, value: any): void;\n        constructFromResource(): void;\n        setup_beforeAdd(buffer: ByteBuffer, beginPos: number): void;\n    }\n}\ndeclare namespace fgui {\n    class GProgressBar extends GComponent {\n        private _min;\n        private _max;\n        private _value;\n        private _titleType;\n        private _reverse;\n        private _titleObject;\n        private _aniObject;\n        private _barObjectH;\n        private _barObjectV;\n        private _barMaxWidth;\n        private _barMaxHeight;\n        private _barMaxWidthDelta;\n        private _barMaxHeightDelta;\n        private _barStartX;\n        private _barStartY;\n        constructor();\n        get titleType(): ProgressTitleType;\n        set titleType(value: ProgressTitleType);\n        get min(): number;\n        set min(value: number);\n        get max(): number;\n        set max(value: number);\n        get value(): number;\n        set value(value: number);\n        tweenValue(value: number, duration: number): GTweener;\n        update(newValue: number): void;\n        private setFillAmount;\n        protected constructExtension(buffer: ByteBuffer): void;\n        protected handleSizeChanged(): void;\n        setup_afterAdd(buffer: ByteBuffer, beginPos: number): void;\n    }\n}\ndeclare namespace fgui {\n    class GTextField extends GObject {\n        _label: cc.Label;\n        protected _font: string;\n        protected _realFont: string | cc.Font;\n        protected _fontSize: number;\n        protected _color: cc.Color;\n        protected _strokeColor?: cc.Color;\n        protected _shadowOffset?: cc.Vec2;\n        protected _shadowColor?: cc.Color;\n        protected _leading: number;\n        protected _text: string;\n        protected _ubbEnabled: boolean;\n        protected _templateVars?: {\n            [index: string]: string;\n        };\n        protected _autoSize: AutoSizeType;\n        protected _updatingSize: boolean;\n        protected _sizeDirty: boolean;\n        protected _outline?: cc.LabelOutline;\n        protected _shadow?: cc.LabelShadow;\n        constructor();\n        protected createRenderer(): void;\n        set text(value: string);\n        get text(): string;\n        get font(): string;\n        set font(value: string);\n        get fontSize(): number;\n        set fontSize(value: number);\n        get color(): cc.Color;\n        set color(value: cc.Color);\n        get align(): cc.Label.HorizontalAlign;\n        set align(value: cc.Label.HorizontalAlign);\n        get verticalAlign(): cc.Label.VerticalAlign;\n        set verticalAlign(value: cc.Label.VerticalAlign);\n        get leading(): number;\n        set leading(value: number);\n        get letterSpacing(): number;\n        set letterSpacing(value: number);\n        get underline(): boolean;\n        set underline(value: boolean);\n        get bold(): boolean;\n        set bold(value: boolean);\n        get italic(): boolean;\n        set italic(value: boolean);\n        get singleLine(): boolean;\n        set singleLine(value: boolean);\n        get stroke(): number;\n        set stroke(value: number);\n        get strokeColor(): cc.Color;\n        set strokeColor(value: cc.Color);\n        get shadowOffset(): cc.Vec2;\n        set shadowOffset(value: cc.Vec2);\n        get shadowColor(): cc.Color;\n        set shadowColor(value: cc.Color);\n        set ubbEnabled(value: boolean);\n        get ubbEnabled(): boolean;\n        set autoSize(value: AutoSizeType);\n        get autoSize(): AutoSizeType;\n        protected parseTemplate(template: string): string;\n        get templateVars(): {\n            [index: string]: string;\n        };\n        set templateVars(value: {\n            [index: string]: string;\n        });\n        setVar(name: string, value: string): GTextField;\n        flushVars(): void;\n        get textWidth(): number;\n        ensureSizeCorrect(): void;\n        protected updateText(): void;\n        protected assignFont(label: any, value: string | cc.Font): void;\n        protected assignFontColor(label: any, value: cc.Color): void;\n        protected updateFont(): void;\n        protected updateFontColor(): void;\n        protected updateStrokeColor(): void;\n        protected updateShadowColor(): void;\n        protected updateFontSize(): void;\n        protected updateOverflow(): void;\n        protected markSizeChanged(): void;\n        protected onLabelSizeChanged(): void;\n        protected handleSizeChanged(): void;\n        protected handleGrayedChanged(): void;\n        getProp(index: number): any;\n        setProp(index: number, value: any): void;\n        setup_beforeAdd(buffer: ByteBuffer, beginPos: number): void;\n        setup_afterAdd(buffer: ByteBuffer, beginPos: number): void;\n    }\n}\ndeclare namespace fgui {\n    class RichTextImageAtlas extends cc.SpriteAtlas {\n        getSpriteFrame(key: string): cc.SpriteFrame;\n    }\n    class GRichTextField extends GTextField {\n        _richText: cc.RichText;\n        private _bold;\n        private _italics;\n        private _underline;\n        linkUnderline: boolean;\n        linkColor: string;\n        constructor();\n        protected createRenderer(): void;\n        get align(): cc.Label.HorizontalAlign;\n        set align(value: cc.Label.HorizontalAlign);\n        get underline(): boolean;\n        set underline(value: boolean);\n        get bold(): boolean;\n        set bold(value: boolean);\n        get italic(): boolean;\n        set italic(value: boolean);\n        protected markSizeChanged(): void;\n        protected updateText(): void;\n        protected updateFont(): void;\n        protected updateFontColor(): void;\n        protected updateFontSize(): void;\n        protected updateOverflow(): void;\n        protected handleSizeChanged(): void;\n    }\n}\ndeclare namespace fgui {\n    class GRoot extends GComponent {\n        static contentScaleLevel: number;\n        private _modalLayer;\n        private _popupStack;\n        private _justClosedPopups;\n        private _modalWaitPane;\n        private _tooltipWin;\n        private _defaultTooltipWin;\n        private _volumeScale;\n        private _inputProcessor;\n        private _thisOnResized;\n        private static _inst;\n        static get inst(): GRoot;\n        static create(): GRoot;\n        constructor();\n        protected onDestroy(): void;\n        getTouchPosition(touchId?: number): cc.Vec2;\n        get touchTarget(): GObject;\n        get inputProcessor(): InputProcessor;\n        showWindow(win: Window): void;\n        hideWindow(win: Window): void;\n        hideWindowImmediately(win: Window): void;\n        bringToFront(win: Window): void;\n        showModalWait(msg?: string): void;\n        closeModalWait(): void;\n        closeAllExceptModals(): void;\n        closeAllWindows(): void;\n        getTopWindow(): Window;\n        get modalLayer(): GGraph;\n        get hasModalWindow(): boolean;\n        get modalWaiting(): boolean;\n        getPopupPosition(popup: GObject, target?: GObject, dir?: PopupDirection | boolean, result?: cc.Vec2): cc.Vec2;\n        showPopup(popup: GObject, target?: GObject, dir?: PopupDirection | boolean): void;\n        togglePopup(popup: GObject, target?: GObject, dir?: PopupDirection | boolean): void;\n        hidePopup(popup?: GObject): void;\n        get hasAnyPopup(): boolean;\n        private closePopup;\n        showTooltips(msg: string): void;\n        showTooltipsWin(tooltipWin: GObject): void;\n        hideTooltips(): void;\n        get volumeScale(): number;\n        set volumeScale(value: number);\n        playOneShotSound(clip: cc.AudioClip, volumeScale?: number): void;\n        private adjustModalLayer;\n        private onTouchBegin_1;\n        private onWinResize;\n        handlePositionChanged(): void;\n        private updateContentScaleLevel;\n    }\n}\ndeclare namespace fgui {\n    class GScrollBar extends GComponent {\n        private _grip;\n        private _arrowButton1;\n        private _arrowButton2;\n        private _bar;\n        private _target;\n        private _vertical;\n        private _scrollPerc;\n        private _fixedGripSize;\n        private _dragOffset;\n        private _gripDragging;\n        constructor();\n        setScrollPane(target: ScrollPane, vertical: boolean): void;\n        setDisplayPerc(value: number): void;\n        setScrollPerc(val: number): void;\n        get minSize(): number;\n        get gripDragging(): boolean;\n        protected constructExtension(buffer: ByteBuffer): void;\n        private onGripTouchDown;\n        private onGripTouchMove;\n        private onGripTouchEnd;\n        private onClickArrow1;\n        private onClickArrow2;\n        private onBarTouchBegin;\n    }\n}\ndeclare namespace fgui {\n    class GSlider extends GComponent {\n        private _min;\n        private _max;\n        private _value;\n        private _titleType;\n        private _reverse;\n        private _wholeNumbers;\n        private _titleObject;\n        private _barObjectH;\n        private _barObjectV;\n        private _barMaxWidth;\n        private _barMaxHeight;\n        private _barMaxWidthDelta;\n        private _barMaxHeightDelta;\n        private _gripObject;\n        private _clickPos;\n        private _clickPercent;\n        private _barStartX;\n        private _barStartY;\n        changeOnClick: boolean;\n        canDrag: boolean;\n        constructor();\n        get titleType(): ProgressTitleType;\n        set titleType(value: ProgressTitleType);\n        get wholeNumbers(): boolean;\n        set wholeNumbers(value: boolean);\n        get min(): number;\n        set min(value: number);\n        get max(): number;\n        set max(value: number);\n        get value(): number;\n        set value(value: number);\n        update(): void;\n        private updateWithPercent;\n        protected constructExtension(buffer: ByteBuffer): void;\n        protected handleSizeChanged(): void;\n        setup_afterAdd(buffer: ByteBuffer, beginPos: number): void;\n        private onGripTouchBegin;\n        private onGripTouchMove;\n        private onBarTouchBegin;\n    }\n}\ndeclare namespace fgui {\n    class GTextInput extends GTextField {\n        _editBox: cc.EditBox;\n        private _promptText;\n        constructor();\n        protected createRenderer(): void;\n        set editable(val: boolean);\n        get editable(): boolean;\n        set maxLength(val: number);\n        get maxLength(): number;\n        set promptText(val: string);\n        get promptText(): string;\n        set restrict(value: string);\n        get restrict(): string;\n        get password(): boolean;\n        set password(val: boolean);\n        get align(): cc.Label.HorizontalAlign;\n        set align(value: cc.Label.HorizontalAlign);\n        get verticalAlign(): cc.Label.VerticalAlign;\n        set verticalAlign(value: cc.Label.VerticalAlign);\n        get singleLine(): boolean;\n        set singleLine(value: boolean);\n        requestFocus(): void;\n        protected markSizeChanged(): void;\n        protected updateText(): void;\n        protected updateFont(): void;\n        protected updateFontColor(): void;\n        protected updateFontSize(): void;\n        protected updateOverflow(): void;\n        private onTextChanged;\n        private onTouchEnd1;\n        setup_beforeAdd(buffer: ByteBuffer, beginPos: number): void;\n    }\n}\ndeclare namespace fgui {\n    class GTree extends GList {\n        treeNodeRender: (node: GTreeNode, obj: GComponent) => void;\n        treeNodeWillExpand: (node: GTreeNode, expanded: boolean) => void;\n        private _indent;\n        private _clickToExpand;\n        private _rootNode;\n        private _expandedStatusInEvt;\n        constructor();\n        get rootNode(): GTreeNode;\n        get indent(): number;\n        set indent(value: number);\n        get clickToExpand(): number;\n        set clickToExpand(value: number);\n        getSelectedNode(): GTreeNode;\n        getSelectedNodes(result?: Array<GTreeNode>): Array<GTreeNode>;\n        selectNode(node: GTreeNode, scrollItToView?: boolean): void;\n        unselectNode(node: GTreeNode): void;\n        expandAll(folderNode?: GTreeNode): void;\n        collapseAll(folderNode?: GTreeNode): void;\n        private createCell;\n        _afterInserted(node: GTreeNode): void;\n        private getInsertIndexForNode;\n        _afterRemoved(node: GTreeNode): void;\n        _afterExpanded(node: GTreeNode): void;\n        _afterCollapsed(node: GTreeNode): void;\n        _afterMoved(node: GTreeNode): void;\n        private getFolderEndIndex;\n        private checkChildren;\n        private hideFolderNode;\n        private removeNode;\n        private __cellMouseDown;\n        private __expandedStateChanged;\n        protected dispatchItemEvent(item: GObject, evt: Event): void;\n        setup_beforeAdd(buffer: ByteBuffer, beginPos: number): void;\n        protected readItems(buffer: ByteBuffer): void;\n    }\n}\ndeclare namespace fgui {\n    class GTreeNode {\n        data?: any;\n        private _parent;\n        private _children;\n        private _expanded;\n        private _level;\n        private _tree;\n        _cell: GComponent;\n        _resURL?: string;\n        constructor(hasChild: boolean, resURL?: string);\n        set expanded(value: boolean);\n        get expanded(): boolean;\n        get isFolder(): boolean;\n        get parent(): GTreeNode;\n        get text(): string;\n        set text(value: string);\n        get icon(): string;\n        set icon(value: string);\n        get cell(): GComponent;\n        get level(): number;\n        _setLevel(value: number): void;\n        addChild(child: GTreeNode): GTreeNode;\n        addChildAt(child: GTreeNode, index: number): GTreeNode;\n        removeChild(child: GTreeNode): GTreeNode;\n        removeChildAt(index: number): GTreeNode;\n        removeChildren(beginIndex?: number, endIndex?: number): void;\n        getChildAt(index: number): GTreeNode;\n        getChildIndex(child: GTreeNode): number;\n        getPrevSibling(): GTreeNode;\n        getNextSibling(): GTreeNode;\n        setChildIndex(child: GTreeNode, index: number): void;\n        swapChildren(child1: GTreeNode, child2: GTreeNode): void;\n        swapChildrenAt(index1: number, index2: number): void;\n        get numChildren(): number;\n        expandToRoot(): void;\n        get tree(): GTree;\n        _setTree(value: GTree): void;\n    }\n}\ndeclare namespace fgui {\n    interface IUISource {\n        fileName: string;\n        loaded: boolean;\n        load(callback: Function, target: any): void;\n    }\n}\ndeclare namespace fgui {\n    class Margin {\n        left: number;\n        right: number;\n        top: number;\n        bottom: number;\n        constructor();\n        copy(source: Margin): void;\n        isNone(): boolean;\n    }\n}\ndeclare namespace fgui {\n    class PackageItem {\n        owner: UIPackage;\n        type: PackageItemType;\n        objectType?: ObjectType;\n        id: string;\n        name: string;\n        width: number;\n        height: number;\n        file: string;\n        decoded?: boolean;\n        loading?: Array<Function>;\n        rawData?: ByteBuffer;\n        asset?: cc.Asset;\n        highResolution?: Array<string>;\n        branches?: Array<string>;\n        scale9Grid?: cc.Rect;\n        scaleByTile?: boolean;\n        tileGridIndice?: number;\n        smoothing?: boolean;\n        hitTestData?: PixelHitTestData;\n        interval?: number;\n        repeatDelay?: number;\n        swing?: boolean;\n        frames?: Array<Frame>;\n        extensionType?: any;\n        skeletonAnchor?: cc.Vec2;\n        atlasAsset?: dragonBones.DragonBonesAtlasAsset;\n        constructor();\n        load(): cc.Asset;\n        getBranch(): PackageItem;\n        getHighResolution(): PackageItem;\n        toString(): string;\n    }\n}\ndeclare namespace fgui {\n    class PopupMenu {\n        protected _contentPane: GComponent;\n        protected _list: GList;\n        constructor(url?: string);\n        dispose(): void;\n        addItem(caption: string, callback?: (item?: fgui.GObject, evt?: fgui.Event) => void): GButton;\n        addItemAt(caption: string, index: number, callback?: (item?: fgui.GObject, evt?: fgui.Event) => void): GButton;\n        addSeperator(): void;\n        getItemName(index: number): string;\n        setItemText(name: string, caption: string): void;\n        setItemVisible(name: string, visible: boolean): void;\n        setItemGrayed(name: string, grayed: boolean): void;\n        setItemCheckable(name: string, checkable: boolean): void;\n        setItemChecked(name: string, checked: boolean): void;\n        isItemChecked(name: string): boolean;\n        removeItem(name: string): boolean;\n        clearItems(): void;\n        get itemCount(): number;\n        get contentPane(): GComponent;\n        get list(): GList;\n        show(target?: GObject, dir?: PopupDirection | boolean): void;\n        private onClickItem;\n        private onClickItem2;\n        private onDisplay;\n    }\n}\ndeclare namespace fgui {\n    class RelationItem {\n        private _owner;\n        private _target;\n        private _defs;\n        private _targetX;\n        private _targetY;\n        private _targetWidth;\n        private _targetHeight;\n        constructor(owner: GObject);\n        get owner(): GObject;\n        set target(value: GObject);\n        get target(): GObject;\n        add(relationType: number, usePercent?: boolean): void;\n        internalAdd(relationType: number, usePercent?: boolean): void;\n        remove(relationType: number): void;\n        copyFrom(source: RelationItem): void;\n        dispose(): void;\n        get isEmpty(): boolean;\n        applyOnSelfResized(dWidth: number, dHeight: number, applyPivot: boolean): void;\n        private applyOnXYChanged;\n        private applyOnSizeChanged;\n        private addRefTarget;\n        private releaseRefTarget;\n        private __targetXYChanged;\n        private __targetSizeChanged;\n        private __targetSizeWillChange;\n    }\n    class RelationDef {\n        percent: boolean;\n        type: number;\n        axis: number;\n        constructor();\n        copyFrom(source: RelationDef): void;\n    }\n}\ndeclare namespace fgui {\n    class Relations {\n        private _owner;\n        private _items;\n        handling: GObject;\n        sizeDirty: boolean;\n        constructor(owner: GObject);\n        add(target: GObject, relationType: number, usePercent?: boolean): void;\n        remove(target: GObject, relationType?: number): void;\n        contains(target: GObject): boolean;\n        clearFor(target: GObject): void;\n        clearAll(): void;\n        copyFrom(source: Relations): void;\n        dispose(): void;\n        onOwnerSizeChanged(dWidth: number, dHeight: number, applyPivot: boolean): void;\n        ensureRelationsSizeCorrect(): void;\n        get empty(): boolean;\n        setup(buffer: ByteBuffer, parentToChild: boolean): void;\n    }\n}\ndeclare namespace fgui {\n    class ScrollPane extends cc.Component {\n        private _owner;\n        private _container;\n        private _maskContainer;\n        private _scrollType;\n        private _scrollStep;\n        private _mouseWheelStep;\n        private _decelerationRate;\n        private _scrollBarMargin;\n        private _bouncebackEffect;\n        private _touchEffect;\n        private _scrollBarDisplayAuto?;\n        private _vScrollNone;\n        private _hScrollNone;\n        private _needRefresh;\n        private _refreshBarAxis;\n        private _displayOnLeft?;\n        private _snapToItem?;\n        _displayInDemand?: boolean;\n        private _mouseWheelEnabled;\n        private _pageMode?;\n        private _inertiaDisabled?;\n        private _floating?;\n        private _dontClipMargin?;\n        private _xPos;\n        private _yPos;\n        private _viewSize;\n        private _contentSize;\n        private _overlapSize;\n        private _pageSize;\n        private _containerPos;\n        private _beginTouchPos;\n        private _lastTouchPos;\n        private _lastTouchGlobalPos;\n        private _velocity;\n        private _velocityScale;\n        private _lastMoveTime;\n        private _isHoldAreaDone;\n        private _aniFlag;\n        _loop: number;\n        private _headerLockedSize;\n        private _footerLockedSize;\n        private _refreshEventDispatching;\n        private _dragged;\n        private _hover;\n        private _tweening;\n        private _tweenTime;\n        private _tweenDuration;\n        private _tweenStart;\n        private _tweenChange;\n        private _pageController?;\n        private _hzScrollBar?;\n        private _vtScrollBar?;\n        private _header?;\n        private _footer?;\n        static draggingPane: ScrollPane;\n        setup(buffer: ByteBuffer): void;\n        protected onDestroy(): void;\n        hitTest(pt: cc.Vec2, globalPt: cc.Vec2): GObject;\n        get owner(): GComponent;\n        get hzScrollBar(): GScrollBar;\n        get vtScrollBar(): GScrollBar;\n        get header(): GComponent;\n        get footer(): GComponent;\n        get bouncebackEffect(): boolean;\n        set bouncebackEffect(sc: boolean);\n        get touchEffect(): boolean;\n        set touchEffect(sc: boolean);\n        set scrollStep(val: number);\n        get decelerationRate(): number;\n        set decelerationRate(val: number);\n        get scrollStep(): number;\n        get snapToItem(): boolean;\n        set snapToItem(value: boolean);\n        get mouseWheelEnabled(): boolean;\n        set mouseWheelEnabled(value: boolean);\n        get isDragged(): boolean;\n        get percX(): number;\n        set percX(value: number);\n        setPercX(value: number, ani?: boolean): void;\n        get percY(): number;\n        set percY(value: number);\n        setPercY(value: number, ani?: boolean): void;\n        get posX(): number;\n        set posX(value: number);\n        setPosX(value: number, ani?: boolean): void;\n        get posY(): number;\n        set posY(value: number);\n        setPosY(value: number, ani?: boolean): void;\n        get contentWidth(): number;\n        get contentHeight(): number;\n        get viewWidth(): number;\n        set viewWidth(value: number);\n        get viewHeight(): number;\n        set viewHeight(value: number);\n        get currentPageX(): number;\n        set currentPageX(value: number);\n        get currentPageY(): number;\n        set currentPageY(value: number);\n        setCurrentPageX(value: number, ani?: boolean): void;\n        setCurrentPageY(value: number, ani?: boolean): void;\n        get isBottomMost(): boolean;\n        get isRightMost(): boolean;\n        get pageController(): Controller;\n        set pageController(value: Controller);\n        get scrollingPosX(): number;\n        get scrollingPosY(): number;\n        scrollTop(ani?: boolean): void;\n        scrollBottom(ani?: boolean): void;\n        scrollUp(ratio?: number, ani?: boolean): void;\n        scrollDown(ratio?: number, ani?: boolean): void;\n        scrollLeft(ratio?: number, ani?: boolean): void;\n        scrollRight(ratio?: number, ani?: boolean): void;\n        scrollToView(target: any, ani?: boolean, setFirst?: boolean): void;\n        isChildInView(obj: GObject): boolean;\n        cancelDragging(): void;\n        lockHeader(size: number): void;\n        lockFooter(size: number): void;\n        onOwnerSizeChanged(): void;\n        handleControllerChanged(c: Controller): void;\n        private updatePageController;\n        adjustMaskContainer(): void;\n        setSize(aWidth: number, aHeight: number): void;\n        setContentSize(aWidth: number, aHeight: number): void;\n        changeContentSizeOnScrolling(deltaWidth: number, deltaHeight: number, deltaPosX: number, deltaPosY: number): void;\n        private handleSizeChanged;\n        private posChanged;\n        private refresh;\n        private refresh2;\n        private onTouchBegin;\n        private onTouchMove;\n        private onTouchEnd;\n        private onRollOver;\n        private onRollOut;\n        private onMouseWheel;\n        private updateScrollBarPos;\n        updateScrollBarVisible(): void;\n        private updateScrollBarVisible2;\n        private __barTweenComplete;\n        private getLoopPartSize;\n        private loopCheckingCurrent;\n        private loopCheckingTarget;\n        private loopCheckingTarget2;\n        private loopCheckingNewPos;\n        private alignPosition;\n        private alignByPage;\n        private updateTargetAndDuration;\n        private updateTargetAndDuration2;\n        private fixDuration;\n        private startTween;\n        private killTween;\n        private checkRefreshBar;\n        protected update(dt: number): boolean;\n        private runTween;\n    }\n}\ndeclare namespace fgui {\n    class Transition {\n        name: string;\n        private _owner;\n        private _ownerBaseX;\n        private _ownerBaseY;\n        private _items;\n        private _totalTimes;\n        private _totalTasks;\n        private _playing;\n        private _paused?;\n        private _onComplete?;\n        private _options;\n        private _reversed?;\n        private _totalDuration;\n        private _autoPlay?;\n        private _autoPlayTimes;\n        private _autoPlayDelay;\n        private _timeScale;\n        private _startTime;\n        private _endTime;\n        constructor(owner: GComponent);\n        play(onComplete?: () => void, times?: number, delay?: number, startTime?: number, endTime?: number): void;\n        playReverse(onComplete?: () => void, times?: number, delay?: number): void;\n        changePlayTimes(value: number): void;\n        setAutoPlay(value: boolean, times?: number, delay?: number): void;\n        private _play;\n        stop(setToComplete?: boolean, processCallback?: boolean): void;\n        private stopItem;\n        setPaused(paused: boolean): void;\n        dispose(): void;\n        get playing(): boolean;\n        setValue(label: string, ...args: any[]): void;\n        setHook(label: string, callback: (label?: string) => void): void;\n        clearHooks(): void;\n        setTarget(label: string, newTarget: GObject): void;\n        setDuration(label: string, value: number): void;\n        getLabelTime(label: string): number;\n        get timeScale(): number;\n        set timeScale(value: number);\n        updateFromRelations(targetId: string, dx: number, dy: number): void;\n        onEnable(): void;\n        onDisable(): void;\n        private onDelayedPlay;\n        private internalPlay;\n        private playItem;\n        private skipAnimations;\n        private onDelayedPlayItem;\n        private onTweenStart;\n        private onTweenUpdate;\n        private onTweenComplete;\n        private onPlayTransCompleted;\n        private callHook;\n        private checkAllComplete;\n        private applyValue;\n        setup(buffer: ByteBuffer): void;\n        private decodeValue;\n    }\n}\ndeclare namespace fgui {\n    class TranslationHelper {\n        static strings: {\n            [index: string]: {\n                [index: string]: string;\n            };\n        };\n        static loadFromXML(source: string): void;\n        static translateComponent(item: PackageItem): void;\n    }\n}\ndeclare namespace fgui {\n    class UIConfig {\n        constructor();\n        static defaultFont: string;\n        static windowModalWaiting: string;\n        static globalModalWaiting: string;\n        static modalLayerColor: cc.Color;\n        static buttonSound: string;\n        static buttonSoundVolumeScale: number;\n        static horizontalScrollBar: string;\n        static verticalScrollBar: string;\n        static defaultScrollStep: number;\n        static defaultScrollDecelerationRate: number;\n        static defaultScrollBarDisplay: number;\n        static defaultScrollTouchEffect: boolean;\n        static defaultScrollBounceEffect: boolean;\n        static popupMenu: string;\n        static popupMenu_seperator: string;\n        static loaderErrorSign: string;\n        static tooltipsWin: string;\n        static defaultComboBoxVisibleItemCount: number;\n        static touchScrollSensitivity: number;\n        static touchDragSensitivity: number;\n        static clickDragSensitivity: number;\n        static bringWindowToFrontOnClick: boolean;\n        static frameTimeForAsyncUIConstruction: number;\n        static linkUnderline: boolean;\n        static defaultUIGroup: string;\n    }\n    function addLoadHandler(ext?: string): void;\n    function registerFont(name: string, font: cc.Font | string): void;\n    function getFontByName(name: string): cc.Font;\n}\ndeclare namespace fgui {\n    class UIObjectFactory {\n        static counter: number;\n        static extensions: {\n            [index: string]: new () => GComponent;\n        };\n        static loaderType: new () => GLoader;\n        constructor();\n        static setExtension(url: string, type: new () => GComponent): void;\n        static setLoaderExtension(type: new () => GLoader): void;\n        static resolveExtension(pi: PackageItem): void;\n        static newObject(type: number | PackageItem, userClass?: new () => GObject): GObject;\n    }\n}\ndeclare namespace fgui {\n    type PackageDependency = {\n        id: string;\n        name: string;\n    };\n    export class UIPackage {\n        private _id;\n        private _name;\n        private _path;\n        private _items;\n        private _itemsById;\n        private _itemsByName;\n        private _sprites;\n        private _dependencies;\n        private _branches;\n        _branchIndex: number;\n        private _bundle;\n        static _constructing: number;\n        private static _instById;\n        private static _instByName;\n        private static _branch;\n        private static _vars;\n        constructor();\n        static get branch(): string;\n        static set branch(value: string);\n        static getVar(key: string): string;\n        static setVar(key: string, value: string): void;\n        static getById(id: string): UIPackage;\n        static getByName(name: string): UIPackage;\n        static addPackage(path: string): UIPackage;\n        static loadPackage(bundle: cc.AssetManager.Bundle, path: string, onComplete?: (error: any, pkg: UIPackage) => void): void;\n        static loadPackage(bundle: cc.AssetManager.Bundle, path: string, onProgress?: (finish: number, total: number, item: cc.AssetManager.RequestItem) => void, onComplete?: (error: any, pkg: UIPackage) => void): void;\n        static loadPackage(path: string, onComplete?: (error: any, pkg: UIPackage) => void): void;\n        static loadPackage(path: string, onProgress?: (finish: number, total: number, item: cc.AssetManager.RequestItem) => void, onComplete?: (error: any, pkg: UIPackage) => void): void;\n        static removePackage(packageIdOrName: string): void;\n        static createObject(pkgName: string, resName: string, userClass?: new () => GObject): GObject;\n        static createObjectFromURL(url: string, userClass?: new () => GObject): GObject;\n        static getItemURL(pkgName: string, resName: string): string;\n        static getItemByURL(url: string): PackageItem;\n        static normalizeURL(url: string): string;\n        static setStringsSource(source: string): void;\n        private loadPackage;\n        dispose(): void;\n        get id(): string;\n        get name(): string;\n        get path(): string;\n        get dependencies(): Array<PackageDependency>;\n        createObject(resName: string, userClass?: new () => GObject): GObject;\n        internalCreateObject(item: PackageItem, userClass?: new () => GObject): GObject;\n        getItemById(itemId: string): PackageItem;\n        getItemByName(resName: string): PackageItem;\n        getItemAssetByName(resName: string): cc.Asset;\n        getItemAsset(item: PackageItem): cc.Asset;\n        getItemAssetAsync(item: PackageItem, onComplete?: (err: Error, item: PackageItem) => void): void;\n        loadAllAssets(): void;\n        private loadMovieClip;\n        private loadFont;\n        private loadSpine;\n        private loadDragonBones;\n    }\n    export {};\n}\ndeclare namespace fgui {\n    class Window extends GComponent {\n        private _contentPane;\n        private _modalWaitPane;\n        private _closeButton;\n        private _dragArea;\n        private _contentArea;\n        private _frame;\n        private _modal;\n        private _uiSources?;\n        private _inited?;\n        private _loading?;\n        protected _requestingCmd: number;\n        bringToFontOnClick: boolean;\n        constructor();\n        addUISource(source: IUISource): void;\n        set contentPane(val: GComponent);\n        get contentPane(): GComponent;\n        get frame(): GComponent;\n        get closeButton(): GObject;\n        set closeButton(value: GObject);\n        get dragArea(): GObject;\n        set dragArea(value: GObject);\n        get contentArea(): GObject;\n        set contentArea(value: GObject);\n        show(): void;\n        showOn(root: GRoot): void;\n        hide(): void;\n        hideImmediately(): void;\n        centerOn(r: GRoot, restraint?: boolean): void;\n        toggleStatus(): void;\n        get isShowing(): boolean;\n        get isTop(): boolean;\n        get modal(): boolean;\n        set modal(val: boolean);\n        bringToFront(): void;\n        showModalWait(requestingCmd?: number): void;\n        protected layoutModalWaitPane(): void;\n        closeModalWait(requestingCmd?: number): boolean;\n        get modalWaiting(): boolean;\n        init(): void;\n        protected onInit(): void;\n        protected onShown(): void;\n        protected onHide(): void;\n        protected doShowAnimation(): void;\n        protected doHideAnimation(): void;\n        private __uiLoadComplete;\n        private _init;\n        dispose(): void;\n        protected closeEventHandler(evt: cc.Event): void;\n        protected onEnable(): void;\n        protected onDisable(): void;\n        private onTouchBegin_1;\n        private onDragStart_1;\n    }\n}\ndeclare namespace fgui {\n    class ControllerAction {\n        fromPage: string[];\n        toPage: string[];\n        static createAction(type: number): ControllerAction;\n        constructor();\n        run(controller: Controller, prevPage: string, curPage: string): void;\n        protected enter(controller: Controller): void;\n        protected leave(controller: Controller): void;\n        setup(buffer: ByteBuffer): void;\n    }\n}\ndeclare namespace fgui {\n    class ChangePageAction extends ControllerAction {\n        objectId: string;\n        controllerName: string;\n        targetPage: string;\n        constructor();\n        protected enter(controller: Controller): void;\n        setup(buffer: ByteBuffer): void;\n    }\n}\ndeclare namespace fgui {\n    class PlayTransitionAction extends ControllerAction {\n        transitionName: string;\n        playTimes: number;\n        delay: number;\n        stopOnExit: boolean;\n        private _currentTransition;\n        constructor();\n        protected enter(controller: Controller): void;\n        protected leave(controller: Controller): void;\n        setup(buffer: ByteBuffer): void;\n    }\n}\ndeclare namespace fgui {\n    enum BlendMode {\n        Normal = 0,\n        None = 1,\n        Add = 2,\n        Multiply = 3,\n        Screen = 4,\n        Erase = 5,\n        Mask = 6,\n        Below = 7,\n        Off = 8,\n        Custom1 = 9,\n        Custom2 = 10,\n        Custom3 = 11\n    }\n    class BlendModeUtils {\n        static apply(node: cc.Node, blendMode: BlendMode): void;\n        static override(blendMode: BlendMode, srcFactor: number, dstFactor: number): void;\n    }\n}\ndeclare namespace fgui {\n    class Image extends cc.Sprite {\n        private _flip;\n        private _fillMethod;\n        private _fillOrigin;\n        private _fillAmount;\n        private _fillClockwise;\n        private _grayed?;\n        private _graySpriteMaterial?;\n        private _spriteMaterial?;\n        constructor();\n        get flip(): FlipType;\n        set flip(value: FlipType);\n        get fillMethod(): FillMethod;\n        set fillMethod(value: FillMethod);\n        get fillOrigin(): FillOrigin;\n        set fillOrigin(value: FillOrigin);\n        get fillClockwise(): boolean;\n        set fillClockwise(value: boolean);\n        get fillAmount(): number;\n        set fillAmount(value: number);\n        private setupFill;\n        get grayed(): boolean;\n        set grayed(value: boolean);\n    }\n}\ndeclare namespace fgui {\n    interface Frame {\n        rect: cc.Rect;\n        addDelay: number;\n        texture?: cc.SpriteFrame;\n    }\n    class MovieClip extends Image {\n        interval: number;\n        swing: boolean;\n        repeatDelay: number;\n        timeScale: number;\n        private _playing;\n        private _frameCount;\n        private _frames;\n        private _frame;\n        private _start;\n        private _end;\n        private _times;\n        private _endAt;\n        private _status;\n        private _callback;\n        private _callbackObj;\n        private _smoothing;\n        private _frameElapsed;\n        private _reversed;\n        private _repeatedCount;\n        constructor();\n        get frames(): Array<Frame>;\n        set frames(value: Array<Frame>);\n        get frameCount(): number;\n        get frame(): number;\n        set frame(value: number);\n        get playing(): boolean;\n        set playing(value: boolean);\n        get smoothing(): boolean;\n        set smoothing(value: boolean);\n        rewind(): void;\n        syncStatus(anotherMc: MovieClip): void;\n        advance(timeInSeconds: number): void;\n        setPlaySettings(start?: number, end?: number, times?: number, endAt?: number, endCallback?: Function, callbackObj?: any): void;\n        protected update(dt: number): void;\n        private drawFrame;\n    }\n}\ndeclare namespace fgui {\n    class Event extends cc.Event {\n        static TOUCH_BEGIN: string;\n        static TOUCH_MOVE: string;\n        static TOUCH_END: string;\n        static CLICK: string;\n        static ROLL_OVER: string;\n        static ROLL_OUT: string;\n        static MOUSE_WHEEL: string;\n        static DISPLAY: string;\n        static UNDISPLAY: string;\n        static GEAR_STOP: string;\n        static LINK: string;\n        static Submit: string;\n        static TEXT_CHANGE: string;\n        static STATUS_CHANGED: string;\n        static XY_CHANGED: string;\n        static SIZE_CHANGED: string;\n        static SIZE_DELAY_CHANGE: string;\n        static DRAG_START: string;\n        static DRAG_MOVE: string;\n        static DRAG_END: string;\n        static DROP: string;\n        static SCROLL: string;\n        static SCROLL_END: string;\n        static PULL_DOWN_RELEASE: string;\n        static PULL_UP_RELEASE: string;\n        static CLICK_ITEM: string;\n        initiator: GObject;\n        pos: cc.Vec2;\n        touch: cc.Touch;\n        touchId: number;\n        clickCount: number;\n        button: number;\n        keyModifiers: number;\n        mouseWheelDelta: number;\n        _processor: InputProcessor;\n        constructor(type: string, bubbles: boolean);\n        get isShiftDown(): boolean;\n        get isCtrlDown(): boolean;\n        captureTouch(): void;\n        static _borrow(type: string, bubbles?: boolean): Event;\n        static _return(evt: Event): void;\n    }\n}\ndeclare namespace fgui {\n    interface IHitTest {\n        hitTest(pt: cc.Vec2, globalPt: cc.Vec2): boolean;\n    }\n    class PixelHitTest implements IHitTest {\n        private _data;\n        offsetX: number;\n        offsetY: number;\n        scaleX: number;\n        scaleY: number;\n        constructor(data: PixelHitTestData, offsetX?: number, offsetY?: number);\n        hitTest(pt: cc.Vec2): boolean;\n    }\n    class PixelHitTestData {\n        pixelWidth: number;\n        scale: number;\n        pixels: Uint8Array;\n        constructor(ba: ByteBuffer);\n    }\n    class ChildHitArea implements IHitTest {\n        private _child;\n        constructor(child: GObject);\n        hitTest(pt: cc.Vec2, globalPt: cc.Vec2): boolean;\n    }\n}\ndeclare namespace fgui {\n    class InputProcessor extends cc.Component {\n        private _owner;\n        private _touchListener;\n        private _touchPos;\n        private _touches;\n        private _rollOutChain;\n        private _rollOverChain;\n        _captureCallback: (evt: Event) => void;\n        constructor();\n        onLoad(): void;\n        onEnable(): void;\n        onDisable(): void;\n        getAllTouches(touchIds?: Array<number>): Array<number>;\n        getTouchPosition(touchId?: number): cc.Vec2;\n        getTouchTarget(): GObject;\n        addTouchMonitor(touchId: number, target: GObject): void;\n        removeTouchMonitor(target: GObject): void;\n        cancelClick(touchId: number): void;\n        simulateClick(target: GObject): void;\n        private touchBeginHandler;\n        private touchMoveHandler;\n        private touchEndHandler;\n        private touchCancelHandler;\n        private mouseDownHandler;\n        private mouseUpHandler;\n        private mouseMoveHandler;\n        private mouseWheelHandler;\n        private updateInfo;\n        private getInfo;\n        private setBegin;\n        private setEnd;\n        private clickTest;\n        private handleRollOver;\n        private getEvent;\n    }\n}\ndeclare namespace fgui {\n    class GearBase {\n        static disableAllTweenEffect: boolean;\n        protected _owner: GObject;\n        protected _controller: Controller;\n        protected _tweenConfig?: GearTweenConfig;\n        static create(owner: GObject, index: number): GearBase;\n        constructor(owner: GObject);\n        dispose(): void;\n        get controller(): Controller;\n        set controller(val: Controller);\n        get tweenConfig(): GearTweenConfig;\n        setup(buffer: ByteBuffer): void;\n        updateFromRelations(dx: number, dy: number): void;\n        protected addStatus(pageId: string, buffer: ByteBuffer): void;\n        protected init(): void;\n        apply(): void;\n        updateState(): void;\n    }\n    class GearTweenConfig {\n        tween: boolean;\n        easeType: number;\n        duration: number;\n        delay: number;\n        _displayLockToken: number;\n        _tweener: GTweener;\n        constructor();\n    }\n}\ndeclare namespace fgui {\n    class GearAnimation extends GearBase {\n        private _storage;\n        private _default;\n        constructor(owner: GObject);\n        protected init(): void;\n        protected addStatus(pageId: string, buffer: ByteBuffer): void;\n        apply(): void;\n        updateState(): void;\n    }\n}\ndeclare namespace fgui {\n    class GearColor extends GearBase {\n        private _storage;\n        private _default;\n        constructor(owner: GObject);\n        protected init(): void;\n        protected addStatus(pageId: string, buffer: ByteBuffer): void;\n        apply(): void;\n        updateState(): void;\n    }\n}\ndeclare namespace fgui {\n    class GearDisplay extends GearBase {\n        pages: string[];\n        private _visible;\n        private _displayLockToken;\n        constructor(owner: GObject);\n        protected init(): void;\n        apply(): void;\n        addLock(): number;\n        releaseLock(token: number): void;\n        get connected(): boolean;\n    }\n}\ndeclare namespace fgui {\n    class GearDisplay2 extends GearBase {\n        pages: string[];\n        condition: number;\n        private _visible;\n        constructor(owner: GObject);\n        protected init(): void;\n        apply(): void;\n        evaluate(connected: boolean): boolean;\n    }\n}\ndeclare namespace fgui {\n    class GearFontSize extends GearBase {\n        private _storage;\n        private _default;\n        constructor(owner: GObject);\n        protected init(): void;\n        protected addStatus(pageId: string, buffer: ByteBuffer): void;\n        apply(): void;\n        updateState(): void;\n    }\n}\ndeclare namespace fgui {\n    class GearIcon extends GearBase {\n        private _storage;\n        private _default;\n        constructor(owner: GObject);\n        protected init(): void;\n        protected addStatus(pageId: string, buffer: ByteBuffer): void;\n        apply(): void;\n        updateState(): void;\n    }\n}\ndeclare namespace fgui {\n    class GearLook extends GearBase {\n        private _storage;\n        private _default;\n        constructor(owner: GObject);\n        protected init(): void;\n        protected addStatus(pageId: string, buffer: ByteBuffer): void;\n        apply(): void;\n        private __tweenUpdate;\n        private __tweenComplete;\n        updateState(): void;\n    }\n}\ndeclare namespace fgui {\n    class GearSize extends GearBase {\n        private _storage;\n        private _default;\n        constructor(owner: GObject);\n        protected init(): void;\n        protected addStatus(pageId: string, buffer: ByteBuffer): void;\n        apply(): void;\n        private __tweenUpdate;\n        private __tweenComplete;\n        updateState(): void;\n        updateFromRelations(dx: number, dy: number): void;\n    }\n}\ndeclare namespace fgui {\n    class GearText extends GearBase {\n        private _storage;\n        private _default;\n        constructor(owner: GObject);\n        protected init(): void;\n        protected addStatus(pageId: string, buffer: ByteBuffer): void;\n        apply(): void;\n        updateState(): void;\n    }\n}\ndeclare namespace fgui {\n    class GearXY extends GearBase {\n        positionsInPercent: boolean;\n        private _storage;\n        private _default;\n        constructor(owner: GObject);\n        protected init(): void;\n        protected addStatus(pageId: string, buffer: ByteBuffer): void;\n        addExtStatus(pageId: string, buffer: ByteBuffer): void;\n        apply(): void;\n        private __tweenUpdate;\n        private __tweenComplete;\n        updateState(): void;\n        updateFromRelations(dx: number, dy: number): void;\n    }\n}\ndeclare namespace fgui {\n    function evaluateEase(easeType: number, time: number, duration: number, overshootOrAmplitude: number, period: number): number;\n}\ndeclare namespace fgui {\n    class EaseType {\n        static Linear: number;\n        static SineIn: number;\n        static SineOut: number;\n        static SineInOut: number;\n        static QuadIn: number;\n        static QuadOut: number;\n        static QuadInOut: number;\n        static CubicIn: number;\n        static CubicOut: number;\n        static CubicInOut: number;\n        static QuartIn: number;\n        static QuartOut: number;\n        static QuartInOut: number;\n        static QuintIn: number;\n        static QuintOut: number;\n        static QuintInOut: number;\n        static ExpoIn: number;\n        static ExpoOut: number;\n        static ExpoInOut: number;\n        static CircIn: number;\n        static CircOut: number;\n        static CircInOut: number;\n        static ElasticIn: number;\n        static ElasticOut: number;\n        static ElasticInOut: number;\n        static BackIn: number;\n        static BackOut: number;\n        static BackInOut: number;\n        static BounceIn: number;\n        static BounceOut: number;\n        static BounceInOut: number;\n        static Custom: number;\n    }\n}\ndeclare namespace fgui {\n    class GPath {\n        private _segments;\n        private _points;\n        private _fullLength;\n        constructor();\n        get length(): number;\n        create(pt1: Array<GPathPoint> | GPathPoint, pt2?: GPathPoint, pt3?: GPathPoint, pt4?: GPathPoint): void;\n        private createSplineSegment;\n        clear(): void;\n        getPointAt(t: number, result?: cc.Vec2): cc.Vec2;\n        get segmentCount(): number;\n        getAnchorsInSegment(segmentIndex: number, points?: Array<cc.Vec2>): Array<cc.Vec2>;\n        getPointsInSegment(segmentIndex: number, t0: number, t1: number, points?: Array<cc.Vec2>, ts?: Array<number>, pointDensity?: number): Array<cc.Vec2>;\n        getAllPoints(points?: Array<cc.Vec2>, ts?: Array<number>, pointDensity?: number): Array<cc.Vec2>;\n        private onCRSplineCurve;\n        private onBezierCurve;\n    }\n}\ndeclare namespace fgui {\n    enum CurveType {\n        CRSpline = 0,\n        Bezier = 1,\n        CubicBezier = 2,\n        Straight = 3\n    }\n    class GPathPoint {\n        x: number;\n        y: number;\n        control1_x: number;\n        control1_y: number;\n        control2_x: number;\n        control2_y: number;\n        curveType: number;\n        constructor();\n        static newPoint(x?: number, y?: number, curveType?: number): GPathPoint;\n        static newBezierPoint(x?: number, y?: number, control1_x?: number, control1_y?: number): GPathPoint;\n        static newCubicBezierPoint(x?: number, y?: number, control1_x?: number, control1_y?: number, control2_x?: number, control2_y?: number): GPathPoint;\n        clone(): GPathPoint;\n    }\n}\ndeclare namespace fgui {\n    class GTween {\n        static catchCallbackExceptions: boolean;\n        static to(start: number, end: number, duration: number): GTweener;\n        static to2(start: number, start2: number, end: number, end2: number, duration: number): GTweener;\n        static to3(start: number, start2: number, start3: number, end: number, end2: number, end3: number, duration: number): GTweener;\n        static to4(start: number, start2: number, start3: number, start4: number, end: number, end2: number, end3: number, end4: number, duration: number): GTweener;\n        static toColor(start: number, end: number, duration: number): GTweener;\n        static delayedCall(delay: number): GTweener;\n        static shake(startX: number, startY: number, amplitude: number, duration: number): GTweener;\n        static isTweening(target: any, propType?: any): Boolean;\n        static kill(target: any, complete?: boolean, propType?: any): void;\n        static getTween(target: any, propType?: any): GTweener;\n    }\n}\ndeclare namespace fgui {\n    class GTweener {\n        _target: any;\n        _propType: any;\n        _node: cc.Node;\n        _killed: boolean;\n        _paused: boolean;\n        private _delay;\n        private _duration;\n        private _breakpoint;\n        private _easeType;\n        private _easeOvershootOrAmplitude;\n        private _easePeriod;\n        private _repeat;\n        private _yoyo;\n        private _timeScale;\n        private _snapping;\n        private _userData;\n        private _path;\n        private _onUpdate;\n        private _onStart;\n        private _onComplete;\n        private _onUpdateCaller;\n        private _onStartCaller;\n        private _onCompleteCaller;\n        private _startValue;\n        private _endValue;\n        private _value;\n        private _deltaValue;\n        private _valueSize;\n        private _started;\n        private _ended;\n        private _elapsedTime;\n        private _normalizedTime;\n        constructor();\n        setDelay(value: number): GTweener;\n        get delay(): number;\n        setDuration(value: number): GTweener;\n        get duration(): number;\n        setBreakpoint(value: number): GTweener;\n        setEase(value: number): GTweener;\n        setEasePeriod(value: number): GTweener;\n        setEaseOvershootOrAmplitude(value: number): GTweener;\n        setRepeat(repeat: number, yoyo?: boolean): GTweener;\n        get repeat(): number;\n        setTimeScale(value: number): GTweener;\n        setSnapping(value: boolean): GTweener;\n        setTarget(value: any, propType?: any): GTweener;\n        get target(): any;\n        setPath(value: GPath): GTweener;\n        setUserData(value: any): GTweener;\n        get userData(): any;\n        onUpdate(callback: Function, target?: any): GTweener;\n        onStart(callback: Function, target?: any): GTweener;\n        onComplete(callback: Function, target?: any): GTweener;\n        get startValue(): TweenValue;\n        get endValue(): TweenValue;\n        get value(): TweenValue;\n        get deltaValue(): TweenValue;\n        get normalizedTime(): number;\n        get completed(): boolean;\n        get allCompleted(): boolean;\n        setPaused(paused: boolean): GTweener;\n        seek(time: number): void;\n        kill(complete?: boolean): void;\n        _to(start: number, end: number, duration: number): GTweener;\n        _to2(start: number, start2: number, end: number, end2: number, duration: number): GTweener;\n        _to3(start: number, start2: number, start3: number, end: number, end2: number, end3: number, duration: number): GTweener;\n        _to4(start: number, start2: number, start3: number, start4: number, end: number, end2: number, end3: number, end4: number, duration: number): GTweener;\n        _toColor(start: number, end: number, duration: number): GTweener;\n        _shake(startX: number, startY: number, amplitude: number, duration: number): GTweener;\n        _init(): void;\n        _reset(): void;\n        _update(dt: number): void;\n        private update;\n        private callStartCallback;\n        private callUpdateCallback;\n        private callCompleteCallback;\n    }\n}\ndeclare namespace fgui {\n    class TweenManager {\n        static createTween(): GTweener;\n        static isTweening(target: any, propType?: any): boolean;\n        static killTweens(target: any, completed: boolean, propType?: any): boolean;\n        static getTween(target: any, propType?: any): GTweener;\n        private static update;\n    }\n}\ndeclare namespace fgui {\n    class TweenValue {\n        x: number;\n        y: number;\n        z: number;\n        w: number;\n        constructor();\n        get color(): number;\n        set color(value: number);\n        getField(index: number): number;\n        setField(index: number, value: number): void;\n        setZero(): void;\n    }\n}\ndeclare namespace fgui {\n    class ByteBuffer {\n        stringTable: Array<string>;\n        version: number;\n        littleEndian: boolean;\n        protected _view: DataView;\n        protected _bytes: Uint8Array;\n        protected _pos: number;\n        protected _length: number;\n        constructor(buffer: ArrayBuffer, offset?: number, length?: number);\n        get data(): Uint8Array;\n        get position(): number;\n        set position(value: number);\n        skip(count: number): void;\n        private validate;\n        readByte(): number;\n        readUbyte(): number;\n        readBool(): boolean;\n        readShort(): number;\n        readUshort(): number;\n        readInt(): number;\n        readUint(): number;\n        readFloat(): number;\n        readString(len?: number): string;\n        readS(): string;\n        readSArray(cnt: number): Array<string>;\n        writeS(value: string): void;\n        readColor(hasAlpha?: boolean): cc.Color;\n        readChar(): string;\n        readBuffer(): ByteBuffer;\n        seek(indexTablePos: number, blockIndex: number): boolean;\n    }\n}\ndeclare namespace fgui {\n    class ColorMatrix {\n        readonly matrix: Array<number>;\n        constructor(p_brightness?: number, p_contrast?: number, p_saturation?: number, p_hue?: number);\n        reset(): void;\n        invert(): void;\n        adjustColor(p_brightness: number, p_contrast: number, p_saturation: number, p_hue: number): void;\n        adjustBrightness(p_val: number): void;\n        adjustContrast(p_val: number): void;\n        adjustSaturation(p_val: number): void;\n        adjustHue(p_val: number): void;\n        concat(p_matrix: Array<number>): void;\n        clone(): ColorMatrix;\n        protected copyMatrix(p_matrix: Array<number>): void;\n        protected multiplyMatrix(p_matrix: Array<number>): void;\n        protected cleanValue(p_val: number, p_limit: number): number;\n    }\n}\ndeclare namespace fgui {\n    class UBBParser {\n        private _text;\n        private _readPos;\n        protected _handlers: {\n            [index: string]: (tagName: string, end: boolean, attr: string) => string;\n        };\n        lastColor: string;\n        lastSize: string;\n        linkUnderline: boolean;\n        linkColor: string;\n        static inst: UBBParser;\n        constructor();\n        protected onTag_URL(tagName: string, end: boolean, attr: string): string;\n        protected onTag_IMG(tagName: string, end: boolean, attr: string): string;\n        protected onTag_Simple(tagName: string, end: boolean, attr: string): string;\n        protected onTag_COLOR(tagName: string, end: boolean, attr: string): string;\n        protected onTag_FONT(tagName: string, end: boolean, attr: string): string;\n        protected onTag_SIZE(tagName: string, end: boolean, attr: string): string;\n        protected getTagText(remove?: boolean): string;\n        parse(text: string, remove?: boolean): string;\n    }\n}\ndeclare namespace fgui {\n    class ToolSet {\n        static startsWith(source: string, str: string, ignoreCase?: boolean): boolean;\n        static encodeHTML(str: string): string;\n        static clamp(value: number, min: number, max: number): number;\n        static clamp01(value: number): number;\n        static lerp(start: number, end: number, percent: number): number;\n        static getTime(): number;\n        static toGrayed(c: cc.Color): cc.Color;\n        static repeat(t: number, length: number): number;\n        static distance(x1: number, y1: number, x2: number, y2: number): number;\n    }\n}\nimport fairygui = fgui;"
}