{"version":3,"sources":["assets\\Script\\Encrypt\\lib\\asn1js\\hex.js"],"names":["decoder","Hex","decode","a","i","undefined","hex","ignore","charAt","toLowerCase","length","out","bits","char_count","c","Error"],"mappings":";;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA,IAAIA,OAAJ;AACO,IAAIC,GAAG,GAAG;AACbC,EAAAA,MAAM,EAAE,gBAAUC,CAAV,EAAa;AACjB,QAAIC,CAAJ;;AACA,QAAIJ,OAAO,KAAKK,SAAhB,EAA2B;AACvB,UAAIC,GAAG,GAAG,kBAAV;AACA,UAAIC,MAAM,GAAG,2BAAb;AACAP,MAAAA,OAAO,GAAG,EAAV;;AACA,WAAKI,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAG,EAAhB,EAAoB,EAAEA,CAAtB,EAAyB;AACrBJ,QAAAA,OAAO,CAACM,GAAG,CAACE,MAAJ,CAAWJ,CAAX,CAAD,CAAP,GAAyBA,CAAzB;AACH;;AACDE,MAAAA,GAAG,GAAGA,GAAG,CAACG,WAAJ,EAAN;;AACA,WAAKL,CAAC,GAAG,EAAT,EAAaA,CAAC,GAAG,EAAjB,EAAqB,EAAEA,CAAvB,EAA0B;AACtBJ,QAAAA,OAAO,CAACM,GAAG,CAACE,MAAJ,CAAWJ,CAAX,CAAD,CAAP,GAAyBA,CAAzB;AACH;;AACD,WAAKA,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAGG,MAAM,CAACG,MAAvB,EAA+B,EAAEN,CAAjC,EAAoC;AAChCJ,QAAAA,OAAO,CAACO,MAAM,CAACC,MAAP,CAAcJ,CAAd,CAAD,CAAP,GAA4B,CAAC,CAA7B;AACH;AACJ;;AACD,QAAIO,GAAG,GAAG,EAAV;AACA,QAAIC,IAAI,GAAG,CAAX;AACA,QAAIC,UAAU,GAAG,CAAjB;;AACA,SAAKT,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAGD,CAAC,CAACO,MAAlB,EAA0B,EAAEN,CAA5B,EAA+B;AAC3B,UAAIU,CAAC,GAAGX,CAAC,CAACK,MAAF,CAASJ,CAAT,CAAR;;AACA,UAAIU,CAAC,IAAI,GAAT,EAAc;AACV;AACH;;AACDA,MAAAA,CAAC,GAAGd,OAAO,CAACc,CAAD,CAAX;;AACA,UAAIA,CAAC,IAAI,CAAC,CAAV,EAAa;AACT;AACH;;AACD,UAAIA,CAAC,KAAKT,SAAV,EAAqB;AACjB,cAAM,IAAIU,KAAJ,CAAU,iCAAiCX,CAA3C,CAAN;AACH;;AACDQ,MAAAA,IAAI,IAAIE,CAAR;;AACA,UAAI,EAAED,UAAF,IAAgB,CAApB,EAAuB;AACnBF,QAAAA,GAAG,CAACA,GAAG,CAACD,MAAL,CAAH,GAAkBE,IAAlB;AACAA,QAAAA,IAAI,GAAG,CAAP;AACAC,QAAAA,UAAU,GAAG,CAAb;AACH,OAJD,MAKK;AACDD,QAAAA,IAAI,KAAK,CAAT;AACH;AACJ;;AACD,QAAIC,UAAJ,EAAgB;AACZ,YAAM,IAAIE,KAAJ,CAAU,yCAAV,CAAN;AACH;;AACD,WAAOJ,GAAP;AACH;AA/CY,CAAV","sourceRoot":"/","sourcesContent":["// Hex JavaScript decoder\n// Copyright (c) 2008-2013 Lapo Luchini <lapo@lapo.it>\n// Permission to use, copy, modify, and/or distribute this software for any\n// purpose with or without fee is hereby granted, provided that the above\n// copyright notice and this permission notice appear in all copies.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES\n// WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF\n// MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR\n// ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES\n// WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN\n// ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF\n// OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.\n/*jshint browser: true, strict: true, immed: true, latedef: true, undef: true, regexdash: false */\nvar decoder;\nexport var Hex = {\n    decode: function (a) {\n        var i;\n        if (decoder === undefined) {\n            var hex = \"0123456789ABCDEF\";\n            var ignore = \" \\f\\n\\r\\t\\u00A0\\u2028\\u2029\";\n            decoder = {};\n            for (i = 0; i < 16; ++i) {\n                decoder[hex.charAt(i)] = i;\n            }\n            hex = hex.toLowerCase();\n            for (i = 10; i < 16; ++i) {\n                decoder[hex.charAt(i)] = i;\n            }\n            for (i = 0; i < ignore.length; ++i) {\n                decoder[ignore.charAt(i)] = -1;\n            }\n        }\n        var out = [];\n        var bits = 0;\n        var char_count = 0;\n        for (i = 0; i < a.length; ++i) {\n            var c = a.charAt(i);\n            if (c == \"=\") {\n                break;\n            }\n            c = decoder[c];\n            if (c == -1) {\n                continue;\n            }\n            if (c === undefined) {\n                throw new Error(\"Illegal character at offset \" + i);\n            }\n            bits |= c;\n            if (++char_count >= 2) {\n                out[out.length] = bits;\n                bits = 0;\n                char_count = 0;\n            }\n            else {\n                bits <<= 4;\n            }\n        }\n        if (char_count) {\n            throw new Error(\"Hex encoding incomplete: 4 bits missing\");\n        }\n        return out;\n    }\n};\n"]}