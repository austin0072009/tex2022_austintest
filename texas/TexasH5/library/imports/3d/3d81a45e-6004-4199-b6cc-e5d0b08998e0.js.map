{"version":3,"sources":["assets\\Script\\modules\\@mogafa\\slots\\lib\\MogafaSlotsGameStage.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"/","sourcesContent":["import { AppConst } from \"../../../@slotsmaster/ui-common/lib/AppConst\";\nimport FguiComponentBase from \"../../fairygui-component/lib/FguiComponentBase\";\nimport SymbolSpineResource from \"./SymbolBoard/SymbolSpineResource\";\nimport SymbolSpineShowConfig from \"./SymbolBoard/SymbolSpineShowConfig\";\n\n\n/**\n * mogafa slots游戏关卡资源存放器\n * 比如棋子spine资源，棋子spine播放配置\n * 一些需要在棋子上使用的资源但是不宜直接加载到棋子里面去的资源，因为棋子数量众多\n */\nexport default class MogafaSlotsGameStage {\n    private static _gameStages: { [key: string]: MogafaSlotsGameStage } = {};\n    public static get gameStages(): { [key: string]: MogafaSlotsGameStage } {\n        return MogafaSlotsGameStage._gameStages;\n    }\n    public static setGameStages(gameCode: string, gameStage: MogafaSlotsGameStage) {\n        if (gameCode && gameStage) {\n            MogafaSlotsGameStage.gameStages[gameCode] = gameStage;\n        }\n    }\n    public BundlePath: string = \"\"\n    private _symbolSpineResources: SymbolSpineResource[] = [];\n    private _symbolSpineShowConfigs: { [key: string]: SymbolSpineShowConfig[] } = {};\n    private _shareComponents: { [key: string]: FguiComponentBase } = {};\n    private _extra: any = {};\n    private symbolSpineResourceLoadedIndex: number = 0;\n\n    /**\n     * 获取所有棋子上的spine资源\n     */\n    get symbolSpineResources(): SymbolSpineResource[] {\n        return this._symbolSpineResources;\n    }\n    /**\n     * Sets symbol spine resources\n     * 设置所有棋子的spine资源\n     */\n    set symbolSpineResources(value: SymbolSpineResource[]) {\n        console.log(\"symbolSpineResources\")\n        this._symbolSpineResources = value;\n        if (!this._symbolSpineResources) {\n            this._symbolSpineResources = [];\n        }\n        this.symbolSpineResourceLoadedIndex = 0;\n        this.loadSymbolSpineResources();\n    }\n    /**\n     * Gets symbol spine show configs\n     * 获取棋子spine展示配置\n     */\n    get symbolSpineShowConfigs(): { [key: string]: SymbolSpineShowConfig[] } {\n        return this._symbolSpineShowConfigs;\n    }\n    /**\n     * 添加棋子spine展示配置\n     *\n     * @param name 配置名称\n     * @param configs 配置\n     */\n    addSymbolSpineShowConfigs(name: string, configs: SymbolSpineShowConfig[]) {\n        console.log(\"addSymbolSpineShowConfigs\")\n        this._symbolSpineShowConfigs[name] = configs;\n        if (!this._symbolSpineShowConfigs[name]) {\n            this._symbolSpineShowConfigs[name] = [];\n        }\n    }\n    get shareComponents(): { [key: string]: FguiComponentBase } {\n        return this._shareComponents;\n    }\n    addShareComponents(name: string, component: FguiComponentBase) {\n        this._shareComponents[name] = component;\n    }\n    private loadSymbolSpineResources(): void {\n       // console.log(\"loadSymbolSpineResources\")\n        if (\n            this._symbolSpineResources &&\n            this._symbolSpineResources.length >= 0 &&\n            this.symbolSpineResourceLoadedIndex < this._symbolSpineResources.length\n        ) {\n            let urls = this._symbolSpineResources[this.symbolSpineResourceLoadedIndex].urls;\n            if (urls && urls.length > 0) {\n                let bundle = cc.assetManager.getBundle(this.BundlePath)\n                if (bundle) {\n                    bundle.load(urls, sp.SkeletonData, this.symbolSpineResourcesLoaded.bind(this))\n                } else {\n                    cc.assetManager.loadBundle(AppConst.resUrl + this.BundlePath, (err, bundle) => {\n                        bundle.load(urls, sp.SkeletonData, this.symbolSpineResourcesLoaded.bind(this))\n                    })\n                }\n\n                // cc.loader.loadResArray(urls, sp.SkeletonData, this.symbolSpineResourcesLoaded.bind(this));\n            } else {\n                this.symbolSpineResourceLoadedIndex++;\n                this.loadSymbolSpineResources();\n            }\n        }\n    }\n    private symbolSpineResourcesLoaded(error: any, resources: sp.SkeletonData[]): void {\n        if (error) {\n            cc.error(`棋子spine动画载入错误`);\n        } else {\n            let urls = this._symbolSpineResources[this.symbolSpineResourceLoadedIndex];\n            for (let i = 0; i < resources.length; i++) {\n                const resource = resources[i];\n                this._symbolSpineResources[this.symbolSpineResourceLoadedIndex].addResource(resource.name, resource);\n            }\n            this.symbolSpineResourceLoadedIndex++;\n            this.loadSymbolSpineResources();\n        }\n    }\n    /**\n     * Gets extra\n     * 获取额外数据。\n     * 可以放一些当前游戏关卡需要的全局数据\n     * 比如野牛：如果最终是2倍wild，第一次替换棋子不显示2倍的图标，可以设置：\n     * extra.isFirstReplace = true,表示第一次替换，false表示第二次替换\n     *\n     * 还有海盗，也可以设置extra.isLastReplace = true来表示最后一次替换，\n     * 用此来判断骰子棋子在替换过程中是否出现特效。\n     * 注意：在此设置的额外数据，需要在游戏关卡的reset方法中重置成需要的初始化值\n     */\n    get extra(): any {\n        return this._extra;\n    }\n}\n"]}