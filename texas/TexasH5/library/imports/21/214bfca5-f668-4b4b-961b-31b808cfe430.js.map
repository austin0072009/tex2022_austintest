{"version":3,"sources":["assets\\Script\\modules\\@mogafa\\slots\\lib\\TurningWaitingResultsStrategy.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"/","sourcesContent":["import IWaitingResultsStrategy from \"./IWaitingResultsStrategy\";\nimport SymbolBoard from \"./SymbolBoard/SymbolBoard\";\nimport WaitingResultsColumn from \"./WaitingResultsColumn\";\nimport TurningWaitingResultsConfig from \"./TurningWaitingResultsConfig\";\nimport { SymbolSpinType } from \"./SymbolSpinType\";\nimport WaitingResultsCell from \"./WaitingResultsCell\";\n\nimport IntervalEachColumn from \"./IntervalEachColumn\";\nimport { WaitingResultsSpinStatus } from \"./WaitingResultsSpinStatus\";\nimport WaitingResultsStep from \"./WaitingResultsStep\";\nimport { SymbolBoardConst } from \"./SymbolBoard/SymbolBoardConst\";\nimport { SymbolBoardStatus } from \"./SymbolBoard/SymbolBoardStatus\";\nimport NumberUtils from \"../../utils/lib/NumberUtils\";\nimport SpinResultsColumn from \"../../../spin-result/SpinResultsColumn\";\nimport SpinResultsSlot from \"../../../spin-result/SpinResultsSlot\";\nimport { SpinResultsGameMode } from \"../../../spin-result/SpinResultsGameMode\";\n\ninterface IPauseBuffer {\n    cellSpin: boolean;\n    i: number;\n    reel: WaitingResultsColumn;\n}\nexport default class TurningWaitingResultsStrategy implements IWaitingResultsStrategy {\n    private readonly _config: TurningWaitingResultsConfig;\n    private readonly $chessboard: SymbolBoard;\n    private _resultsColumns: SpinResultsColumn[] = null;\n    private reels: WaitingResultsColumn[] = [];\n    private readonly _cellAmountInColumns: number[] = [];\n    private _startIntervalEachColumn: IntervalEachColumn[] = [];\n    private _stopIntervalEachColumnTemplate: IntervalEachColumn[] = [];\n    private _stopIntervalEachCellTemplate: IntervalEachColumn[] = [];\n    private _stopIntervalEachCell: IntervalEachColumn[] = [];\n\n    private _manualStopIntervalEachColumnTemplate: IntervalEachColumn[] = [];\n    private _autoStopTime: number;\n    private _excludeCodes: number[];\n    private _spinResults: SpinResultsSlot;\n    private _spinStatus: WaitingResultsSpinStatus;\n    private _holdWinShowedOnce: boolean = false;\n    private hasCellHoldWin: boolean = false;\n    constructor(chessboard: SymbolBoard, cellAmountInColumns: number[], config: TurningWaitingResultsConfig) {\n        this._config = config;\n        this.$chessboard = chessboard;\n        this._cellAmountInColumns = cellAmountInColumns;\n        this._spinStatus = WaitingResultsSpinStatus.Normal;\n        this.initColumns();\n        this.$chessboard.onColumnResultsSet(this.onSymbolBoardReelStopped, this);\n        this.$chessboard.onCellResultSet(this.onSymbolBoardCellStopped, this);\n        this.$chessboard.onResultsSet(this.onSymbolBoardStopped, this);\n        this.$chessboard.onResultsReceived(this.onSymbolBoardResultsReceived, this);\n    }\n    public get chessboard(): SymbolBoard {\n        return this.$chessboard;\n    }\n    private initColumns(): void {\n        let startInterval: number = 0;\n        let stopInterval: number = 0;\n        let stopIntervalCell: number = 0;\n        for (let i = 0; i < this._cellAmountInColumns.length; i++) {\n            let steps: WaitingResultsStep[] = [];\n            steps.push(new WaitingResultsStep(WaitingResultsSpinStatus.Normal, this._config.step));\n            steps.push(new WaitingResultsStep(WaitingResultsSpinStatus.Stopping, this._config.stopStep));\n            steps.push(new WaitingResultsStep(WaitingResultsSpinStatus.ManualStopping, this._config.manualStopStep));\n            steps.push(new WaitingResultsStep(WaitingResultsSpinStatus.HoldWin, this._config.holdWinStep));\n\n            let column = new WaitingResultsColumn(this.$chessboard.maxCode, steps);\n            this.reels.push(column);\n            const cellAmount = this._cellAmountInColumns[i];\n            if (this._config.spinType == SymbolSpinType.Cell || this._config.respinType == SymbolSpinType.Cell) {\n                for (let j = 0; j < cellAmount; j++) {\n                    column.addCell(new WaitingResultsCell(this.$chessboard.maxCode));\n                    let theLastTime: number = 0;\n                    let cellPosition = this._stopIntervalEachCellTemplate.length;\n                    if (cellPosition !== 0) {\n                        theLastTime =\n                            this._stopIntervalEachCellTemplate[cellPosition - 1].interval +\n                            this._config.stopIntervalInRespinCell;\n                    }\n                    this._stopIntervalEachCellTemplate.push(new IntervalEachColumn(theLastTime));\n                }\n            }\n            if (this._config.startIntervalEachColumn) {\n                if (i >= this._config.startIntervalEachColumn.length) {\n                    this._startIntervalEachColumn.push(new IntervalEachColumn(startInterval));\n                } else {\n                    startInterval = startInterval + this._config.startIntervalEachColumn[i];\n                    this._startIntervalEachColumn.push(new IntervalEachColumn(startInterval));\n                }\n            } else {\n                this._startIntervalEachColumn.push(new IntervalEachColumn(0));\n            }\n            if (this._config.stopIntervalEachColumn) {\n                if (i >= this._config.stopIntervalEachColumn.length) {\n                    this._stopIntervalEachColumnTemplate.push(new IntervalEachColumn(0));\n                } else {\n                    stopInterval = this._config.stopIntervalEachColumn[i];\n                    this._stopIntervalEachColumnTemplate.push(new IntervalEachColumn(stopInterval));\n                }\n            } else {\n                this._stopIntervalEachColumnTemplate.push(new IntervalEachColumn(0));\n            }\n            if (this._config.manualStopIntervalEachColumn) {\n                if (i >= this._config.manualStopIntervalEachColumn.length) {\n                    this._manualStopIntervalEachColumnTemplate.push(new IntervalEachColumn(0));\n                } else {\n                    stopInterval = this._config.manualStopIntervalEachColumn[i];\n                    this._manualStopIntervalEachColumnTemplate.push(new IntervalEachColumn(stopInterval));\n                }\n            } else {\n                this._manualStopIntervalEachColumnTemplate.push(new IntervalEachColumn(0));\n            }\n        }\n    }\n    startWaiting(excludeCodes: number[]): void {\n        this._excludeCodes = excludeCodes;\n        this._spinStatus = WaitingResultsSpinStatus.Spinning;\n        this.$chessboard.schedule(this.waiting.bind(this), this._config.interval);\n        let spinType = this._config.spinType;\n        if (spinType == SymbolSpinType.Column) {\n            this.reelStart();\n        } else {\n            this.cellStart();\n        }\n        this._autoStopTime = new Date().getTime() + this._config.autoStopTimeout;\n    }\n    private reelStart(): void {\n        for (let i = 0; i < this.reels.length; i++) {\n            const interval = this._startIntervalEachColumn[i];\n            if (interval.timer) {\n                clearTimeout(interval.timer);\n            }\n            const reel = this.reels[i];\n            reel.excludeCodes = this._excludeCodes;\n            if (interval.interval <= 0) {\n                reel.spinStatus = WaitingResultsSpinStatus.Spinning;\n            } else {\n                const timer = setTimeout(() => {\n                    if (reel.spinStatus == WaitingResultsSpinStatus.Normal) {\n                        reel.spinStatus = WaitingResultsSpinStatus.Spinning;\n                    }\n                }, interval.interval);\n                interval.timer = timer;\n            }\n        }\n    }\n    private cellStart(): void {\n        for (let i = 0; i < this.reels.length; i++) {\n            const interval = this._startIntervalEachColumn[i];\n            const reel = this.reels[i];\n            for (let j = 0; j < reel.cells.length; j++) {\n                const cell = reel.cells[j];\n                cell.excludeCodes = this._excludeCodes;\n                if (interval.interval <= 0) {\n                    cell.spinStatus = WaitingResultsSpinStatus.Spinning;\n                } else {\n                    const timer = setTimeout(() => {\n                        if (cell.spinStatus == WaitingResultsSpinStatus.Normal) {\n                            cell.spinStatus = WaitingResultsSpinStatus.Spinning;\n                        }\n                    }, interval.interval);\n                    interval.timer = timer;\n                }\n            }\n        }\n    }\n    private autoStop(): void {\n        const now = new Date().getTime();\n        if (\n            this.$chessboard.canStop() &&\n            now >= this._autoStopTime &&\n            this._spinResults &&\n            this._spinStatus == WaitingResultsSpinStatus.Spinning\n        ) {\n            this._spinStatus = WaitingResultsSpinStatus.Stopping;\n            this._autoStopTime = new Date(2900, 1, 1).getTime();\n            this.stopWaiting();\n        }\n    }\n    private waiting(): void {\n        if (this.$chessboard.status == SymbolBoardStatus.Spinning) {\n            this.autoStop();\n            let spinType = this._config.spinType;\n\n            if (spinType == SymbolSpinType.Column) {\n                this.reelMove();\n            } else {\n                this.cellMove();\n            }\n        }\n    }\n    private reelMove(): void {\n        for (let i = 0; i < this.reels.length; i++) {\n            const reel = this.reels[i];\n            if (reel.spinStatus != WaitingResultsSpinStatus.Normal) {\n                let step = reel.currentStep;\n                if (this._config.startUpResilience && this._config.startDownResilience) {\n                    this.$chessboard.reelStartResilienceConfig(\n                        i,\n                        this._config.startUpResilience,\n                        this._config.startDownResilience\n                    );\n                }\n                if (this._config.endDownResilience && this._config.endUpResilience) {\n                    this.$chessboard.reelEndResilienceConfig(\n                        i,\n                        this._config.endDownResilience,\n                        this._config.endUpResilience\n                    );\n                }\n                const newCode = this.$chessboard.columnMoveY(i, step, reel.theNextCode);\n                if (newCode) {\n                    reel.nextCode();\n                }\n            }\n        }\n    }\n    private cellMove(): void {\n        let position: number = 0;\n        for (let i = 0; i < this.reels.length; i++) {\n            const reel = this.reels[i];\n            let step = reel.currentStep;\n            for (let j = 0; j < reel.cells.length; j++) {\n                const cell = reel.cells[j];\n\n                if (\n                    cell.spinStatus != WaitingResultsSpinStatus.Normal &&\n                    cell.spinStatus != WaitingResultsSpinStatus.Stopped\n                ) {\n                    const newCode = this.$chessboard.cellMoveY(i, j, step, cell.theNextCode);\n                    if (newCode) {\n                        cell.nextCode();\n                    }\n                }\n                position++;\n            }\n        }\n    }\n    stopWaiting(isManual?: boolean): void {\n        if (!this._spinResults) {\n            return;\n        }\n        //todo 如果有holdwin没有停，这是点击stop，直接停当前的holdwin继续停holdwin\n        let spinType = this._config.spinType;\n\n        if (spinType == SymbolSpinType.Column) {\n            this.reelStop(isManual);\n        } else {\n            this.cellStop(isManual);\n        }\n    }\n    private _isPause: boolean = false;\n    public get isPause(): boolean {\n        return this._isPause;\n    }\n    public set isPause(value: boolean) {\n        this._isPause = value;\n    }\n\n    private _isPauseBuffer: boolean;\n    public get isPauseBuffer(): boolean {\n        return this._isPauseBuffer;\n    }\n    public set isPauseBuffer(value: boolean) {\n        this._isPauseBuffer = value;\n        if (this._isPauseBuffer) {\n            this.clearPauseBuffer();\n        }\n    }\n    private _pauseBuffer: IPauseBuffer[] = [];\n    public clearPauseBuffer(): void {\n        if (this._pauseBuffer && this._pauseBuffer.length > 0) {\n            this._pauseBuffer.map((item) => {\n                if (item.cellSpin) {\n                    this.pushStopCodesForCell(item.i);\n                } else {\n                    item.reel.pushStopCodes();\n                }\n                item.reel.spinStatus = WaitingResultsSpinStatus.Stopping;\n                this._spinStatus = WaitingResultsSpinStatus.Stopping;\n            });\n        }\n    }\n    private reelStop(isManual?: boolean, cellSpin?: boolean): void {\n        for (let i = 0; i < this.reels.length; i++) {\n            let wouldBeBreak: boolean = false;\n            const reel = this.reels[i];\n            let interval = this._stopIntervalEachColumnTemplate[i].interval;\n            const startInterval = this._startIntervalEachColumn[i];\n            if (startInterval.timer) {\n                clearTimeout(startInterval.timer);\n            }\n            if (isManual) {\n                interval = 0;\n                if (this._manualStopIntervalEachColumnTemplate[i]) {\n                    interval = this._manualStopIntervalEachColumnTemplate[i].interval;\n                }\n            }\n            switch (reel.spinStatus) {\n                case WaitingResultsSpinStatus.Stopped:\n                case WaitingResultsSpinStatus.Stopping:\n                case WaitingResultsSpinStatus.ManualStopping:\n                    continue;\n                case WaitingResultsSpinStatus.Spinning:\n                    const notSkipHoldWin =\n                        this._spinStatus == WaitingResultsSpinStatus.Stopping ||\n                        !this._config.skipHoldWin ||\n                        (this._config.skipHoldWin && !this._holdWinShowedOnce);\n                    if (reel.isHoldWin && notSkipHoldWin) {\n                        reel.spinStatus = WaitingResultsSpinStatus.HoldWin;\n                        interval = this._config.holdWinStopTimeout;\n                        this._autoStopTime = new Date().getTime() + interval;\n                        this.$chessboard.columnHoldWin(i);\n                        this._spinStatus = WaitingResultsSpinStatus.Spinning;\n                        wouldBeBreak = true;\n                        this._holdWinShowedOnce = true;\n                    }\n                    break;\n                case WaitingResultsSpinStatus.HoldWin:\n                    if (!isManual && this._spinStatus == WaitingResultsSpinStatus.Spinning) {\n                        wouldBeBreak = true;\n                    }\n                    interval = 0;\n                    break;\n                case WaitingResultsSpinStatus.Normal:\n                    break;\n            }\n            if (wouldBeBreak) {\n                break;\n            }\n            if (interval <= 0) {\n                if (this.isPause) {\n                    this._pauseBuffer.push({\n                        cellSpin,\n                        i,\n                        reel,\n                    });\n                } else {\n                    if (cellSpin) {\n                        this.pushStopCodesForCell(i);\n                    } else {\n                        reel.pushStopCodes();\n                    }\n                    reel.spinStatus = WaitingResultsSpinStatus.Stopping;\n                    this._spinStatus = WaitingResultsSpinStatus.Stopping;\n                }\n                if (isManual) {\n                    reel.spinStatus = WaitingResultsSpinStatus.ManualStopping;\n                    this._spinStatus = WaitingResultsSpinStatus.ManualStopping;\n                }\n            } else {\n                if (this.isPause) {\n                    this._pauseBuffer.push({\n                        cellSpin,\n                        i,\n                        reel,\n                    });\n                } else {\n                    if (cellSpin) {\n                        reel.timer = setTimeout(this.pushStopCodesForCell.bind(this), interval, i);\n                    } else {\n                        reel.timer = setTimeout(() => {\n                            reel.pushStopCodes();\n                        }, interval);\n                    }\n                    break;\n                }\n            }\n        }\n    }\n    private cellStop(isManual?: boolean): void {\n        if (this._spinResults.gameMode == SpinResultsGameMode.Respin || this.hasCellHoldWin) {\n            this.cellStopForRespin(isManual);\n            return;\n        }\n        this.reelStop(isManual, this._config.spinType == SymbolSpinType.Cell);\n    }\n    private cellStopForRespin(isManual?: boolean): void {\n        if (this._spinResults.gameMode != SpinResultsGameMode.Respin) {\n            let hasHoldWin: boolean = false;\n            for (let i = 0; i < this.reels.length; i++) {\n                const reel = this.reels[i];\n                for (let j = 0; j < reel.cells.length; j++) {\n                    const cell = reel.cells[j];\n                    switch (cell.spinStatus) {\n                        case WaitingResultsSpinStatus.Stopped:\n                        case WaitingResultsSpinStatus.Stopping:\n                        case WaitingResultsSpinStatus.ManualStopping:\n                            continue;\n                            break;\n                        case WaitingResultsSpinStatus.Spinning:\n                            if (!cell.isHoldWin) {\n                                reel.pushStopCodesForCell(j);\n                            } else {\n                                this.$chessboard.cellHoldWin(i, j);\n                                cell.spinStatus = WaitingResultsSpinStatus.HoldWin;\n                                hasHoldWin = true;\n                            }\n                            break;\n                        case WaitingResultsSpinStatus.HoldWin:\n                            if (isManual) {\n                                reel.pushStopCodesForCell(j);\n                                if (cell.timer) {\n                                    clearTimeout(cell.timer);\n                                }\n                            } else {\n                                if (this._spinStatus == WaitingResultsSpinStatus.Stopping) {\n                                    reel.pushStopCodesForCell(j);\n                                }\n                            }\n                            break;\n                        case WaitingResultsSpinStatus.Normal:\n                            break;\n                    }\n                }\n                if (hasHoldWin) {\n                    this._autoStopTime = new Date().getTime() + this._config.stopIntervalInRespinCell;\n                    this._spinStatus = WaitingResultsSpinStatus.Spinning;\n                }\n            }\n            return;\n        }\n        let wouldBeBreak: boolean = false;\n        for (let i = 0; i < this.reels.length; i++) {\n            const reel = this.reels[i];\n            for (let j = 0; j < reel.cells.length; j++) {\n                const cell = reel.cells[j];\n                switch (cell.spinStatus) {\n                    case WaitingResultsSpinStatus.Stopped:\n                        continue;\n                        break;\n                    case WaitingResultsSpinStatus.Stopping:\n                    case WaitingResultsSpinStatus.ManualStopping:\n                        wouldBeBreak = true;\n                        break;\n                    case WaitingResultsSpinStatus.Spinning:\n                        if (cell.fixed) {\n                            reel.pushStopCodesForCell(j);\n                            break;\n                        }\n                        if (!cell.isHoldWin) {\n                            cell.timer = setTimeout(\n                                this.pushStopCodesForCell.bind(this),\n                                this._config.stopIntervalInRespinCell,\n                                i,\n                                j\n                            );\n                            wouldBeBreak = true;\n                        } else {\n                            this.$chessboard.cellHoldWin(i, j);\n                            cell.spinStatus = WaitingResultsSpinStatus.HoldWin;\n                            this._autoStopTime = new Date().getTime() + this._config.stopIntervalInRespinCell;\n                            this._spinStatus = WaitingResultsSpinStatus.Spinning;\n                            wouldBeBreak = true;\n                        }\n                        break;\n                    case WaitingResultsSpinStatus.HoldWin:\n                        if (isManual) {\n                            reel.pushStopCodesForCell(j);\n                        } else {\n                            if (this._spinStatus == WaitingResultsSpinStatus.Stopping) {\n                                reel.pushStopCodesForCell(j);\n                            }\n                        }\n                        break;\n                    case WaitingResultsSpinStatus.Normal:\n                        break;\n                }\n                if (wouldBeBreak) {\n                    break;\n                }\n            }\n            if (wouldBeBreak) {\n                break;\n            }\n        }\n    }\n\n    private pushStopCodesForCell(reelIndex: number, cellIndex?: number): void {\n        const reel = this.reels[reelIndex];\n        if (cellIndex == null) {\n            for (let i = 0; i < reel.cells.length; i++) {\n                reel.pushStopCodesForCell(i);\n            }\n            return;\n        }\n        reel.pushStopCodesForCell(cellIndex);\n    }\n    protected onSymbolBoardReelStopped(reelIndex: number): void {\n        if (\n            this._config.respinType == SymbolSpinType.Cell &&\n            (this._spinResults.gameMode == SpinResultsGameMode.Respin || this.hasCellHoldWin)\n        ) {\n            return;\n        }\n        let reel = this.reels[reelIndex];\n        if (!reel) {\n            cc.error(`列不存在，索引${reelIndex}`);\n            return;\n        }\n        reel.spinStatus = WaitingResultsSpinStatus.Stopped;\n        if (reel.timer) {\n            clearTimeout(reel.timer);\n        }\n        const isManual = this._spinStatus == WaitingResultsSpinStatus.ManualStopping;\n        this.reelStop(isManual, this._config.spinType == SymbolSpinType.Cell);\n    }\n\n    protected onSymbolBoardCellStopped(reelIndex: number, cellIndex: number): void {\n        if (this._spinResults.gameMode != SpinResultsGameMode.Respin && !this.hasCellHoldWin) {\n            return;\n        }\n        const cell = this.reels[reelIndex].cells[cellIndex];\n        cell.spinStatus = WaitingResultsSpinStatus.Stopped;\n        if (cell.timer) {\n            clearTimeout(cell.timer);\n        }\n        const isManual = this._spinStatus == WaitingResultsSpinStatus.ManualStopping;\n        this.cellStopForRespin(isManual);\n    }\n    private getNextReelIndex(reelIndex: number, cellIndex: number): number {\n        let reel = this.reels[reelIndex];\n\n        if (cellIndex < reel.cells.length - 1) {\n            return reelIndex;\n        }\n        if (reelIndex >= reel.cells.length - 1) {\n            return -1;\n        }\n\n        return reelIndex + 1;\n    }\n    private getCellPosition(reelIndex: number, cellIndex: number): number {\n        let position: number = -1;\n        for (let i = 0; i < this.reels.length; i++) {\n            if (i > reelIndex) {\n                break;\n            }\n            const reel = this.reels[i];\n            let endCellIndex = reel.cells.length - 1;\n            if (i == reelIndex) {\n                endCellIndex = cellIndex;\n            }\n            for (let j = 0; j <= endCellIndex; j++) {\n                position++;\n            }\n        }\n        return position;\n    }\n    protected onSymbolBoardStopped(): void {\n        for (let i = 0; i < this._stopIntervalEachCell.length; i++) {\n            let interval = this._stopIntervalEachCell[i];\n            if (interval.timer) {\n                clearTimeout(interval.timer);\n            }\n        }\n        this._stopIntervalEachCell = [];\n        this.$chessboard.unschedule(this.waiting.bind(this));\n    }\n    protected onSymbolBoardResultsReceived(spinResults: SpinResultsSlot): void {\n        this.reelResults(spinResults);\n        this.cellResults(spinResults);\n        this._spinResults = spinResults;\n    }\n    private reelResults(spinResults: SpinResultsSlot): void {\n        this._resultsColumns = spinResults.columns;\n        let holdWinInterval: number = 0;\n        for (let i = 0; i < this.reels.length; i++) {\n            const result = this._resultsColumns[i];\n            const reel = this.reels[i];\n            reel.stopCodes = [];\n            let extraCellCount: { top: number; bottom: number } = this.$chessboard.getColumnExtraCellCount(i);\n            for (let j = 0; j < extraCellCount.bottom; j++) {\n                reel.stopCodes.push(NumberUtils.random(0, this.$chessboard.maxCode, this._excludeCodes));\n            }\n            for (let j = result.stopCodes.length - 1; j >= 0; j--) {\n                reel.stopCodes.push(result.stopCodes[j]);\n            }\n            for (let j = 0; j < extraCellCount.top; j++) {\n                reel.stopCodes.push(NumberUtils.random(0, this.$chessboard.maxCode, this._excludeCodes));\n            }\n            reel.isHoldWin = result.isHoldWin;\n        }\n    }\n    private cellResults(spinResults: SpinResultsSlot): void {\n        this.hasCellHoldWin = false;\n        let position: number = 0;\n        let skipInterval: number = 0;\n        let stopInterval = this._config.stopIntervalInRespinCell;\n        for (let i = 0; i < this._stopIntervalEachCell.length; i++) {\n            let interval = this._stopIntervalEachCell[i];\n            if (interval.timer) {\n                clearTimeout(interval.timer);\n            }\n        }\n        this._stopIntervalEachCell = [];\n        for (let i = 0; i < this.reels.length; i++) {\n            const reel = this.reels[i];\n            const reelResult = this._resultsColumns[i];\n            for (let j = 0; j < reel.cells.length; j++) {\n                let interval = this._stopIntervalEachCellTemplate[position];\n                interval = new IntervalEachColumn(interval.interval);\n                this._stopIntervalEachCell.push(interval);\n                const cell = reel.cells[j];\n                const resultCell = reelResult.cells[j];\n                cell.fixed = resultCell.fixed;\n                cell.isHoldWin = resultCell.isHoldWin;\n                if (cell.fixed) {\n                    skipInterval += this._config.stopIntervalInRespinCell;\n                }\n                interval.interval -= skipInterval;\n                if (cell.isHoldWin) {\n                    this.hasCellHoldWin = true;\n                    cell.holdWinShowing = false;\n                    interval.interval = SymbolBoardConst.HOLD_WIN_INTERVAL_OFFSET;\n                }\n                position++;\n            }\n        }\n    }\n    public reset(): void {\n        this._resultsColumns = [];\n        this._spinResults = null;\n        this._holdWinShowedOnce = false;\n        this.hasCellHoldWin = false;\n        this._pauseBuffer = [];\n        this.isPauseBuffer = false;\n        for (let i = 0; i < this.reels.length; i++) {\n            const reel = this.reels[i];\n            reel.reset();\n        }\n        for (let i = 0; i < this._stopIntervalEachCell.length; i++) {\n            let interval = this._stopIntervalEachCell[i];\n            if (interval.timer) {\n                clearTimeout(interval.timer);\n            }\n        }\n        this._stopIntervalEachCell = [];\n        this._spinStatus = WaitingResultsSpinStatus.Normal;\n    }\n}\n"]}