{"version":3,"sources":["assets\\Script\\modules\\@mogafa\\utils\\lib\\SoundMgr.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"/","sourcesContent":["\nexport default class SoundMgr {\n    private sounds: { [key: number]: any } = {};\n    private effectmMap: Map<string, number> = new Map();\n    private enabled: boolean = true;\n    private music: string = \"\";\n    private effect: string = \"\";\n    protected static instance: SoundMgr;\n    public static getInstance(): SoundMgr {\n        if (!this.instance) {\n            this.instance = new SoundMgr();\n        }\n        return this.instance;\n    }\n\n    /**\n     * 添加所有音频资源\n     * @param key\n     * @param clip\n     */\n    addSound(key: string, clip: any) {\n        this.sounds[key] = clip;\n    }\n\n    /**\n     * 播放音效\n     * @param fxName\n     */\n    playEffect(fxName: string, isLoop: boolean = false): number {\n        this.effect = fxName;\n        if (!this.enabled) return;\n        if (!this.getEffectStatus()) return;\n        let effect: number;\n        try {\n            //console.log(\"playEffect  ====\"+fxName)\n            effect = cc.audioEngine.playEffect(this.sounds[fxName], isLoop);\n        } catch (error) {\n            return;\n        }\n        this.effectmMap.set(fxName, effect);\n        return effect;\n    }\n\n    /**\n     * 停止播放音效\n     * @param fxName\n     */\n    stopEffect(fxName: string) {\n        if (this.effectmMap.get(fxName) != null && this.effectmMap.get(fxName) != undefined)\n            cc.audioEngine.stopEffect(this.effectmMap.get(fxName));\n    }\n\n    /**\n     * 设置音效音量\n     * @param fxName\n     * @param value\n     */\n    setVolume(fxName: string, value: number) {\n        if (this.effectmMap.get(fxName) != null && this.effectmMap.get(fxName) != undefined)\n            cc.audioEngine.setVolume(this.effectmMap.get(fxName), value);\n    }\n\n    /**\n     * 设置音乐音量\n     * @param value\n     */\n    setMusicVolume(value: number) {\n        cc.audioEngine.setMusicVolume(value);\n    }\n\n    /**\n     * 播放音乐\n     * @param musicName\n     */\n    playMusic(musicName: string, isLoop: boolean = true): number {\n        this.music = musicName;\n        if (!this.enabled) return;\n        if (!this.getSoundStatus()) return;\n        return cc.audioEngine.playMusic(this.sounds[musicName], isLoop);\n    }\n\n    /**\n     * 停止音乐\n     */\n    stopMusic() {\n        cc.audioEngine.stopMusic();\n    }\n\n    /**\n     * 暂停音乐\n     */\n    pauseMusic() {\n        cc.audioEngine.pauseMusic();\n    }\n\n    /**\n     * 恢复音乐\n     */\n    resumeMusic() {\n        cc.audioEngine.resumeMusic();\n    }\n\n    /**\n     * 静止所有音乐音效\n     * @param enabled\n     */\n    setEnabled(enabled: boolean) {\n        if (enabled) {\n            this.playMusic(this.music);\n        } else {\n            cc.audioEngine.stopAll();\n        }\n    }\n\n    getEnable() {\n        return this.enabled;\n    }\n\n    /**\n     * 清除音频缓存\n     */\n    release() {\n        this.effectmMap = new Map();\n        this.setEnabled(false);\n        for (const key in this.sounds) {\n          //  cc.loader.release(this.sounds[key]);\n            delete this.sounds[key];\n        }\n    }\n    getSoundStatus(): boolean {\n        if (localStorage.getItem(\"SoundStatus\") == \"open\") {\n            return true;\n        } else if (localStorage.getItem(\"SoundStatus\") == \"close\") {\n            return false;\n        } else {\n            return true;\n        }\n    }\n    setSoundStatus(isOpen: string) {\n        localStorage.setItem(\"SoundStatus\", isOpen);\n        if (this.getSoundStatus()) {\n            this.playMusic(this.music);\n        } else {\n            this.stopMusic();\n        }\n    }\n    getEffectStatus() {\n        if (localStorage.getItem(\"EffectStatus\") == \"open\") {\n            return true;\n        } else if (localStorage.getItem(\"EffectStatus\") == \"close\") {\n            return false;\n        } else {\n            return true;\n        }\n    }\n    setEffectStatus(isOpen: string) {\n        localStorage.setItem(\"EffectStatus\", isOpen);\n        if (this.getEffectStatus()) {\n            this.playEffect(this.effect);\n        } else {\n            this.stopEffect(this.effect);\n        }\n    }\n}\n"]}