{"version":3,"sources":["assets\\Script\\modules\\@mogafa\\fairygui-component\\lib\\SpineCommon.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"/","sourcesContent":["import SpineAnimationPlayParameter from \"./SpineAnimationPlayParameter\";\nimport FguiComponentBase from \"./FguiComponentBase\";\nimport { AppConst } from \"../../../@slotsmaster/ui-common/lib/AppConst\";\n\nexport default class SpineCommon extends FguiComponentBase {\n    protected get packageResourceName(): string {\n        return null;\n    }\n    protected get packageName(): string {\n        return null;\n    }\n    protected get componentName(): string {\n        return null;\n    }\n    protected _node: cc.Node;\n    private _urls: string[];\n    protected _resources: { [key: string]: sp.SkeletonData } = {};\n    private _isReady: boolean;\n    private _trackIndex: number = 0;\n    private _animationsAfterLoaded: SpineAnimationPlayParameter[];\n    protected _skeleton: sp.Skeleton;\n    constructor(node: cc.Node, urls: string[], animationsAfterLoaded?: SpineAnimationPlayParameter[]) {\n        super();\n        this._node = node;\n        this._isReady = false;\n        this._urls = urls;\n        this._animationsAfterLoaded = animationsAfterLoaded;\n        this._skeleton = this._node.addComponent(sp.Skeleton);\n        if (urls) {\n            let self = this\n            let bundle = cc.assetManager.getBundle(self.packageResourceName)\n            if (bundle) \n            {\n                bundle.load(urls, sp.SkeletonData, this.resourceLoaded.bind(this))\n            } else {\n                let resUrl = self.packageResourceName;\n                if (!AppConst.isEditor) \n                {\n                    resUrl = AppConst.resUrl + self.packageResourceName;\n                }\n                cc.assetManager.loadBundle(resUrl, ((err, bundle) => \n                {\n                    bundle.load(urls, sp.SkeletonData, this.resourceLoaded.bind(this))\n                }));\n            } \n        } else \n        {\n            this._created = true;\n        }\n    }\n    /**\n     * 资源加载\n     * @param error\n     * @param resources\n     */\n    private resourceLoaded(error: any, resources: sp.SkeletonData[]) {\n        if (error) {\n            cc.error(`spine动画${this._urls}载入错误`);\n        } else {\n            for (let i = 0; i < resources.length; i++) {\n                const resource = resources[i];\n                this._resources[resource.name] = resource;\n            }\n\n            //this._skeleton.skeletonData = resources[0];\n            //this._skeleton.clearTracks();\n            this._isReady = this._urls.length == resources.length;\n            if (this._isReady && this._animationsAfterLoaded) {\n                this.playInOrder(this._animationsAfterLoaded);\n            }\n            if (this._isReady) {\n                this._created = true;\n                if (this.parent) {\n                    let parent = this.parent as any;\n                    parent.childCreatedInternal(this);\n                }\n            }\n            this.afterResourceLoaded();\n        }\n    }\n    protected afterResourceLoaded() { }\n    public get skeleton(): sp.Skeleton {\n        return this._skeleton;\n    }\n    public get isReady(): boolean {\n        return this._isReady;\n    }\n    public get trackIndex(): number {\n        return this._trackIndex;\n    }\n    public set trackIndex(value: number) {\n        this._trackIndex = value;\n        if (!this._trackIndex) {\n            this._trackIndex = 0;\n        }\n    }\n    /**\n     * 获取资源\n     * @param spineName\n     */\n    private getResource(spineName: string) {\n        let resource: sp.SkeletonData = null;\n        for (let key in this._resources) {\n            resource = this._resources[key];\n            if (!spineName) {\n                break;\n            }\n            if (spineName == key) {\n                break;\n            }\n        }\n        return resource;\n    }\n    /**\n     * 按顺序播放动画\n     * @param animations 顺序播放的动画列表（注意顺序播放的动画，除了最后一个的isLoop有效，其他的isLoop都是false\n     */\n    public playInOrder(animations: SpineAnimationPlayParameter[], skin?: string, spineName?: string): void {\n        if (!animations || animations.length == 0) {\n            return;\n        }\n        this._skeleton.skeletonData = this.getResource(spineName);\n        if (skin) {\n            this._skeleton.setSkin(skin);\n        }\n        let count = animations.length;\n        for (let i = 0; i < animations.length; i++) {\n            const animation = animations[i];\n            const isLast = i == count - 1;\n            const isLoop = isLast ? animation.isLoop : false;\n            if (i == 0) {\n                this.scheduleOnce(() => {\n                    this._skeleton.setAnimation(this._trackIndex, animation.animationName, isLoop);\n                }, 4 / 60)\n            } else {\n                this.scheduleOnce(() => {\n                    this._skeleton.addAnimation(this._trackIndex, animation.animationName, isLoop);\n                }, 4 / 60)\n            }\n        }\n    }\n}\n"]}