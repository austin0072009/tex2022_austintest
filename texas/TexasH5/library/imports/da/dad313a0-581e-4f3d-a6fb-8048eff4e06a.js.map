{"version":3,"sources":["assets\\Script\\BaseFrame\\ReconnectManager.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"/","sourcesContent":["import { WebSocketManager } from \"../../Script/BaseFrame/WebSocketManager\";\nimport { BaseFrameNative } from \"../../Script/BaseFrameNative\";\nimport { HotfixMessage } from \"../../Script/modules/@mogafa/utils/lib/proto/HotfixMessage.pb\";\nimport { proto } from \"../../Script/modules/@mogafa/utils/lib/proto/MessageID.pb\";\nimport { OuterMessage } from \"../../Script/modules/@mogafa/utils/lib/proto/OuterMessage.pb\";\nimport WebSocketApi from \"../../Script/modules/@slotsmaster/ui-common/lib/WebSocketApi\";\nimport * as ClientMessage from \"../../Script/modules/@mogafa/utils/lib/ClientMessage\";\nimport { AppConst } from \"../../Script/modules/@slotsmaster/ui-common/lib/AppConst\";\nimport { sc_login } from \"../../Script/modules/@mogafa/utils/lib/ClientMessage\";\nimport { SceneManager } from \"../../Script/BaseFrame/SceneManager\";\nimport { ToolsEx } from \"../../Script/Common/ToolsEx\";\n\nexport class ReconnectManager {\n    private static instance: ReconnectManager;\n\n    static get getInstance() {\n        if (!this.instance) {\n            this.instance = new ReconnectManager();\n        }\n        return this.instance;\n    }\n\n    public _host: string = \"\";\n    public _port: string = \"\";\n\n    public callBackOK: Function = null;\n    public callBackFail: Function = null;\n    public time: number = 15;\n    public timer: NodeJS.Timeout = null;\n    public isNeedBackHall: boolean = true;\n\n    // 重连\n    public reconnect(callbackok: Function, callbackfail: Function, isNeedBackHall: boolean = true) {\n        this.callBackOK = callbackok;\n        this.callBackFail = callbackfail;\n        this.isNeedBackHall = isNeedBackHall;\n        this.startReconnect();\n    }\n\n    public startReconnect() {\n        console.log(\"this.getNetWorkStatus() == \", this.getNetWorkStatus());\n        if (this.getNetWorkStatus()) {\n            let websocketstatus: boolean = WebSocketApi.socket.getConnectState();\n            console.log(\"websocketstatus == \", websocketstatus);\n            if (websocketstatus) {\n                if (this.callBackOK) {\n                    this.callBackOK();\n                }\n            } else {\n                this.connectLogin();\n            }\n        } else {\n            // CommonCtr.instance.view.ShowTip(\"请检查设备网络是否打开\", () => {\n            //     this.reconnect(callbackok);\n            // });\n            if (this.callBackFail) {\n                this.callBackFail(\"请检查设备网络是否打开\");\n            }\n        }\n    }\n\n    public connectLogin() {\n        this.timer = setTimeout(() => {\n            if (this.callBackFail) {\n                this.callBackFail(\"连接服务器超时，请重试！\");\n            }\n        }, this.time * 1000);\n        this.login();\n    }\n\n    // 发起登录\n    public login() {\n        this._host = BaseFrameNative.serverlistItem.url;\n        this._port = BaseFrameNative.serverlistItem.port;\n        let pid = cc.sys.localStorage.getItem(\"login_pid\");\n        let pwd = cc.sys.localStorage.getItem(\"login_pwd\");\n        console.log(\"this._host === \", this._host);\n        console.log(\"this._port === \", this._port);\n        console.log(\"pid === \", pid);\n        console.log(\"pwd === \", pwd);\n        if (this._host && this._port && pid && pwd) {\n            let reqlogin = HotfixMessage.C2R_Login.create();\n            reqlogin.Account = pid;\n            reqlogin.RpcId = 1;\n            reqlogin.Password = ToolsEx.Singleton.EncryptionPWD(pwd);\n            let params = {\n                host: this._host,\n                port: this._port,\n                callback: () => {\n                    WebSocketApi.socket.request(\n                        proto.MsgID.C2R_Login,\n                        reqlogin,\n                        this.Login_C2R_Login_Back.bind(this));\n                },\n            };\n            WebSocketApi.socket.reconnect(params);\n        }\n    }\n\n    public Login_C2R_Login_Back(ret) {\n        console.log(\"---ReconnectManager Login_C2R_Login_Back---\", ret);\n        WebSocketManager.getInstance.DisConnect();\n        if (ret.Error && ret.Error == \"200102\") {\n            if (this.callBackFail) {\n                this.callBackFail(\"连接失败，账号或密码错误\");\n            }\n            return;\n        }\n        setTimeout(() => {\n            this.LoginGate(ret);\n        }, 200);\n    }\n\n    public LoginGate(msg) {\n        let str = msg.Address.split(\":\", 2);\n        this._host = str[0];\n        this._port = str[1];\n        if (this._port && this._host) {\n            let reqlogin = HotfixMessage.C2G_LoginGate.create();\n            reqlogin.userid = msg.userid;\n            reqlogin.Key = msg.Key;\n            let params =\n            {\n                host: this._host,\n                port: this._port,\n                callback: () => {\n                    WebSocketApi.socket.request(proto.MsgID.C2G_LoginGate, reqlogin, this.LoginGate_back.bind(this));\n                },\n            };\n            WebSocketApi.socket.reconnect(params);\n        }\n    }\n\n    public LoginGate_back(): void {\n        if (this._port && this._host) {\n            let reqlogin = OuterMessage.C2G_EnterMap.create();\n            WebSocketApi.socket.request(proto.MsgID.C2G_EnterMap, reqlogin, this.EnterMap_Back.bind(this),);\n        }\n    }\n\n    public EnterMap_Back(ret) {\n        let login = new ClientMessage.cs_login();\n        login.fn = \"cs_login\";\n        login.accountId = AppConst.Account;\n        let json_login = JSON.stringify(login);\n        WebSocketManager.getInstance.Send(json_login, this.sc_login.bind(this));\n    }\n\n    public sc_login(data: sc_login) {\n        console.log(\"---sc_login---\", data);\n        if (data.result == 1) {\n            if (this.timer) {\n                clearTimeout(this.timer);\n            }\n            AppConst.Account = data.user.userid;\n            AppConst.gameId = data.gameid;\n            AppConst.cidx = data.cidx;\n            AppConst.mPlayerModel = data.user;\n            if (data.user.state > 0 || !this.isNeedBackHall) {\n                AppConst.mPlayerModel.state = 0;\n                // 需要重连 调用重连回调\n                if (this.callBackOK) {\n                    this.callBackOK();\n                    this.callBackOK = null;\n                }\n            } else {\n                // 不需要重连返回大厅\n                if (this.isNeedBackHall) {\n                    SceneManager.Singleton.loadScene(\"gameHall\", \"lobby\");\n                }\n            }\n        }\n    }\n\n    // 获取网络连接状态 false无网  true有网\n    public getNetWorkStatus(): boolean {\n        let net = \"\";\n        if (cc.sys.isNative && cc.sys.os == cc.sys.OS_ANDROID) {\n            /**获取网络状态 */\n            let methodSignature = \"()Ljava/lang/String;\";\n            let method1 = \"getNetWorkInfo\";\n            net = jsb.reflection.callStaticMethod(\"org/cocos2dx/javascript/TSJavaBridge\", method1, methodSignature);\n        } else if (cc.sys.isNative && cc.sys.os == cc.sys.OS_IOS) {\n            net = jsb.reflection.callStaticMethod(\"TSObjectCBridge\", \"getNetworkType\");\n        }\n        let netArr = net.split(\"_\");\n        if (netArr[0] == \"-1\") {\n            return false;\n        }\n        return true;\n    }\n}"]}