{"version":3,"sources":["assets\\Script\\modules\\@mogafa\\utils\\lib\\MyByteBuffer.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"/","sourcesContent":["export default class MyByteBuffer {\n    offset: number = 0;\n    buffer: DataView = null;\n    public static warpBytes(data: ArrayBuffer): MyByteBuffer {\n        let buffer = new MyByteBuffer();\n        buffer.buffer = new DataView(data);\n        return buffer;\n    }\n\n    public static warp(capacity: number): MyByteBuffer {\n        let array = new ArrayBuffer(capacity);\n        let buffer = new MyByteBuffer();\n        buffer.buffer = new DataView(array);\n        return buffer;\n    }\n\n    // public readInt64(): bigint {\n    //     if (this.offset + 7 < this.buffer.byteLength) {\n    //         let value = this.buffer.getBigUint64(this.offset);\n    //         this.offset += 8;\n    //         return value;\n    //     }\n    //     return null;\n    // }\n\n    public readUint32(): number {\n        if (this.offset + 3 < this.buffer.byteLength) {\n            let value = this.buffer.getUint32(this.offset);\n            this.offset += 4;\n            return value;\n        }\n        return null;\n    }\n\n    public readInt32(): number {\n        if (this.offset + 3 < this.buffer.byteLength) {\n            let value = this.buffer.getInt32(this.offset);\n            this.offset += 4;\n            return value;\n        }\n        return null;\n    }\n\n    public readUint16(): number {\n        if (this.offset + 1 < this.buffer.byteLength) {\n            let value = this.buffer.getUint16(this.offset);\n            this.offset += 2;\n            return value;\n        }\n        return null;\n    }\n    public readInt16(): number {\n        if (this.offset + 1 < this.buffer.byteLength) {\n            let value = this.buffer.getInt16(this.offset);\n            this.offset += 2;\n            return value;\n        }\n        return null;\n    }\n\n    public readUint8(): number {\n        if (this.offset < this.buffer.byteLength) {\n            let value = this.buffer.getUint8(this.offset);\n            this.offset++;\n            return value;\n        }\n        return null;\n    }\n\n    public readInt8(): number {\n        if (this.offset < this.buffer.byteLength) {\n            let value = this.buffer.getInt8(this.offset);\n            this.offset++;\n            return value;\n        }\n        return null;\n    }\n\n\n    public readFloat(): number {\n        if (this.offset + 3 < this.buffer.byteLength) {\n            let value = this.buffer.getFloat32(this.offset);\n            this.offset += 4;\n            return value;\n        }\n        return null;\n    }\n\n    public readDouble(): number {\n        if (this.offset + 7 < this.buffer.byteLength) {\n            let value = this.buffer.getFloat64(this.offset);\n            this.offset += 8;\n            return value;\n        }\n        return null;\n    }\n\n\n    public readBytes(len: number): Uint8Array {\n        if (this.offset + len - 1 < this.buffer.byteLength) {\n            let array = new Uint8Array(len);\n            for (let i = 0; i < len; i++) {\n                array[i] = this.buffer.getUint8(this.offset);\n                // (, i, i + 1);\n                this.offset++;\n            }\n            return array;\n        }\n        return null;\n    }\n\n    public writeInt64(num: bigint): void {\n        if (this.offset + 7 < this.buffer.byteLength) {\n            this.buffer.setBigInt64(this.offset, num);\n            this.offset += 8;\n        }\n    }\n\n    public writeUint32(num: number): void {\n        if (this.offset + 3 < this.buffer.byteLength) {\n            this.buffer.setUint32(this.offset, num);\n            this.offset += 4;\n        }\n    }\n    public writeInt32(num: number): void {\n        if (this.offset + 3 < this.buffer.byteLength) {\n            this.buffer.setInt32(this.offset, num);\n            this.offset += 4;\n        }\n    }\n    public writeUint16(num: number): void {\n        if (this.offset + 1 < this.buffer.byteLength) {\n            this.buffer.setUint16(this.offset, num);\n            this.offset += 2;\n        }\n    }\n    public writeInt16(num: number): void {\n        if (this.offset + 1 < this.buffer.byteLength) {\n            this.buffer.setInt16(this.offset, num);\n            this.offset += 2;\n        }\n    }\n    public writeUint8(num: number): void {\n        if (this.offset < this.buffer.byteLength) {\n            this.buffer.setUint8(this.offset, num);\n            this.offset++;\n        }\n    }\n    public writeInt8(num: number): void {\n        if (this.offset < this.buffer.byteLength) {\n            this.buffer.setInt8(this.offset, num);\n            this.offset++;\n        }\n    }\n\n    public writeFloat32(num: number): void {\n        if (this.offset + 3 < this.buffer.byteLength) {\n            this.buffer.setFloat32(this.offset, num);\n            this.offset += 4;\n        }\n    }\n    public writeFloat64(num: number): void {\n        if (this.offset + 7 < this.buffer.byteLength) {\n            this.buffer.setFloat64(this.offset, num);\n            this.offset += 8;\n        }\n    }\n\n    public writeBytes(data: Uint8Array): void {\n        if (this.offset + data.length - 1 < this.buffer.byteLength) {\n            for (let i = 0; i < data.length; i++) {\n                this.buffer.setUint8(this.offset, data[i]);\n                this.offset++;\n            }\n        }\n    }\n    public setBytes(data: ArrayBuffer): void {\n        if (this.offset + data.byteLength - 1 < this.buffer.byteLength) {\n            for (let i = 0; i < data.byteLength; i++) {\n                this.buffer.setUint8(this.offset, data[i]);\n                this.offset++;\n            }\n        }\n    }\n}\n"]}