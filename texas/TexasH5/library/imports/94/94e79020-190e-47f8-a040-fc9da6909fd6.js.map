{"version":3,"sources":["assets\\Script\\Common\\GMPopup.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"/","sourcesContent":["/*\n * @Description: Gm命令\n * @Version: CocosCreator V2.2.2\n * @Autor: sin2021\n * @Date: 2020-04-22 11:11:36\n * @LastEditors: sin2021\n * @LastEditTime: 2020-09-03 14:11:59\n */\nconst { ccclass, property, menu } = cc._decorator;\n@ccclass\nexport class GMPopup extends cc.Component {\n    private curSpinLength: number;\n    private timeArray: Array<number> = [];\n    private input: cc.EditBox;\n\n    onLoad() {\n        this.input = this.node.getChildByName(\"editBox\").getComponent(cc.EditBox);\n        this.node.zIndex = 100;\n        if (cc.sys.os === cc.sys.OS_ANDROID || cc.sys.os === cc.sys.OS_IOS) {\n            this.node.active = false;\n        } else {\n            this.node.active = true;\n        }\n    }\n\n    clearEdit() {\n        this.input.string = \"\";\n    }\n\n    close() {\n        this.node.active = false;\n    }\n\n    show() {\n        this.node.active = true;\n    }\n\n    inputText(): Array<number | string>[] {\n        if (this.input && this.input != undefined) return this.gmCode(this.input.string);\n    }\n\n    testEditStrToArr(newStr) {\n        let arr = newStr;\n        if (newStr == undefined) {\n            hands = [];\n        } else {\n            let splitOneArr = arr.split(\"|\");\n            var hands = [];\n            this.curSpinLength = splitOneArr[0].length + 1;\n            if (splitOneArr.length > 1) {\n                let splitTwoArr = splitOneArr[0].split(\"&\");\n                if (splitOneArr[0].length < arr.length) {\n                    arr = arr.substring(splitOneArr[0].length);\n                } else {\n                    arr = \"\";\n                }\n                for (let j = 0; j < splitTwoArr.length; j++) {\n                    let hand = splitTwoArr[j].split(\",\");\n                    for (let k = 0; k < hand.length; k++) {\n                        hand[k] = Number(hand[k]);\n                    }\n                    hands.push(hand);\n                }\n            }\n\n            if (hands.length == 0) {\n                let newHand = splitOneArr[0].split(\",\");\n                let newHandArr = [];\n                for (let k = 0; k < newHand.length; k++) {\n                    newHandArr.push(Number(newHand[k]));\n                }\n                hands.push(newHandArr);\n            }\n        }\n        return hands;\n    }\n\n    testEditDelte() {\n        if (this.input && this.input != undefined) this.input.string = \"\";\n    }\n\n    gmCode(str: string): number[][] {\n        let hand: number[] = [];\n        let hands: number[][] = [];\n        if (str === \"\") {\n            hands = [];\n        } else {\n            let splitStrArr: string[] = str.split(\"|\");\n            if (splitStrArr.length > 0) {\n                hand = splitStrArr\n                    .slice(0, 1)\n                    .join(\",\")\n                    .split(\",\")\n                    .map((item) => Number(item));\n                hands.push(hand);\n                this.input.string = splitStrArr.slice(1, splitStrArr.length).join(\"|\");\n            } else {\n                hands = [];\n            }\n        }\n        return hands;\n    }\n}\n"]}