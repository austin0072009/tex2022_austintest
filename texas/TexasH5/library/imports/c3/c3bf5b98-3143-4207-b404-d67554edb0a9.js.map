{"version":3,"sources":["assets\\Script\\Encrypt\\jsencrypt.js"],"names":["JSEncrypt","options","default_key_size","parseInt","default_public_exponent","log","key","prototype","setKey","console","warn","JSEncryptRSAKey","setPrivateKey","privkey","setPublicKey","pubkey","decrypt","str","getKey","ex","encrypt","sign","digestMethod","digestName","verify","signature","cb","toString","call","generateAsync","generate","getPrivateKey","getPrivateKeyB64","getPrivateBaseKeyB64","getPublicKey","getPublicKeyB64","getPublicBaseKeyB64","version"],"mappings":"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","sourceRoot":"/","sourcesContent":["import { b64tohex, hex2b64 } from \"./lib/asn1js/base64\";\nimport { JSEncryptRSAKey } from \"./JSEncryptRSAKey\";\n/**\n *\n * @param {Object} [options = {}] - An object to customize JSEncrypt behaviour\n * possible parameters are:\n * - default_key_size        {number}  default: 1024 the key size in bit\n * - default_public_exponent {string}  default: '010001' the hexadecimal representation of the public exponent\n * - log                     {boolean} default: false whether log warn/error or not\n * @constructor\n */\nvar JSEncrypt = /** @class */ (function () {\n    function JSEncrypt (options) {\n        if (options === void 0) { options = {}; }\n        options = options || {};\n        this.default_key_size = options.default_key_size ? parseInt(options.default_key_size, 10) : 1024;\n        this.default_public_exponent = options.default_public_exponent || \"010001\"; // 65537 default openssl public exponent for rsa key type\n        this.log = options.log || false;\n        // The private and public key.\n        this.key = null;\n    }\n    /**\n     * Method to set the rsa key parameter (one method is enough to set both the public\n     * and the private key, since the private key contains the public key paramenters)\n     * Log a warning if logs are enabled\n     * @param {Object|string} key the pem encoded string or an object (with or without header/footer)\n     * @public\n     */\n    JSEncrypt.prototype.setKey = function (key) {\n        if (this.log && this.key) {\n            console.warn(\"A key was already set, overriding existing.\");\n        }\n        this.key = new JSEncryptRSAKey(key);\n    };\n    /**\n     * Proxy method for setKey, for api compatibility\n     * @see setKey\n     * @public\n     */\n    JSEncrypt.prototype.setPrivateKey = function (privkey) {\n        // Create the key.\n        this.setKey(privkey);\n    };\n    /**\n     * Proxy method for setKey, for api compatibility\n     * @see setKey\n     * @public\n     */\n    JSEncrypt.prototype.setPublicKey = function (pubkey) {\n        // Sets the public key.\n        this.setKey(pubkey);\n    };\n    /**\n     * Proxy method for RSAKey object's decrypt, decrypt the string using the private\n     * components of the rsa key object. Note that if the object was not set will be created\n     * on the fly (by the getKey method) using the parameters passed in the JSEncrypt constructor\n     * @param {string} str base64 encoded crypted string to decrypt\n     * @return {string} the decrypted string\n     * @public\n     */\n    JSEncrypt.prototype.decrypt = function (str) {\n        // Return the decrypted string.\n        try {\n            return this.getKey().decrypt(b64tohex(str));\n        }\n        catch (ex) {\n            return false;\n        }\n    };\n    /**\n     * Proxy method for RSAKey object's encrypt, encrypt the string using the public\n     * components of the rsa key object. Note that if the object was not set will be created\n     * on the fly (by the getKey method) using the parameters passed in the JSEncrypt constructor\n     * @param {string} str the string to encrypt\n     * @return {string} the encrypted string encoded in base64\n     * @public\n     */\n    JSEncrypt.prototype.encrypt = function (str) {\n        // Return the encrypted string.\n        try {\n            return hex2b64(this.getKey().encrypt(str));\n        }\n        catch (ex) {\n            return false;\n        }\n    };\n    /**\n     * Proxy method for RSAKey object's sign.\n     * @param {string} str the string to sign\n     * @param {function} digestMethod hash method\n     * @param {string} digestName the name of the hash algorithm\n     * @return {string} the signature encoded in base64\n     * @public\n     */\n    JSEncrypt.prototype.sign = function (str, digestMethod, digestName) {\n        // return the RSA signature of 'str' in 'hex' format.\n        try {\n            return hex2b64(this.getKey().sign(str, digestMethod, digestName));\n        }\n        catch (ex) {\n            return false;\n        }\n    };\n    /**\n     * Proxy method for RSAKey object's verify.\n     * @param {string} str the string to verify\n     * @param {string} signature the signature encoded in base64 to compare the string to\n     * @param {function} digestMethod hash method\n     * @return {boolean} whether the data and signature match\n     * @public\n     */\n    JSEncrypt.prototype.verify = function (str, signature, digestMethod) {\n        // Return the decrypted 'digest' of the signature.\n        try {\n            return this.getKey().verify(str, b64tohex(signature), digestMethod);\n        }\n        catch (ex) {\n            return false;\n        }\n    };\n    /**\n     * Getter for the current JSEncryptRSAKey object. If it doesn't exists a new object\n     * will be created and returned\n     * @param {callback} [cb] the callback to be called if we want the key to be generated\n     * in an async fashion\n     * @returns {JSEncryptRSAKey} the JSEncryptRSAKey object\n     * @public\n     */\n    JSEncrypt.prototype.getKey = function (cb) {\n        // Only create new if it does not exist.\n        if (!this.key) {\n            // Get a new private key.\n            this.key = new JSEncryptRSAKey();\n            if (cb && {}.toString.call(cb) === \"[object Function]\") {\n                this.key.generateAsync(this.default_key_size, this.default_public_exponent, cb);\n                return;\n            }\n            // Generate the key.\n            this.key.generate(this.default_key_size, this.default_public_exponent);\n        }\n        return this.key;\n    };\n    /**\n     * Returns the pem encoded representation of the private key\n     * If the key doesn't exists a new key will be created\n     * @returns {string} pem encoded representation of the private key WITH header and footer\n     * @public\n     */\n    JSEncrypt.prototype.getPrivateKey = function () {\n        // Return the private representation of this key.\n        return this.getKey().getPrivateKey();\n    };\n    /**\n     * Returns the pem encoded representation of the private key\n     * If the key doesn't exists a new key will be created\n     * @returns {string} pem encoded representation of the private key WITHOUT header and footer\n     * @public\n     */\n    JSEncrypt.prototype.getPrivateKeyB64 = function () {\n        // Return the private representation of this key.\n        return this.getKey().getPrivateBaseKeyB64();\n    };\n    /**\n     * Returns the pem encoded representation of the public key\n     * If the key doesn't exists a new key will be created\n     * @returns {string} pem encoded representation of the public key WITH header and footer\n     * @public\n     */\n    JSEncrypt.prototype.getPublicKey = function () {\n        // Return the private representation of this key.\n        return this.getKey().getPublicKey();\n    };\n    /**\n     * Returns the pem encoded representation of the public key\n     * If the key doesn't exists a new key will be created\n     * @returns {string} pem encoded representation of the public key WITHOUT header and footer\n     * @public\n     */\n    JSEncrypt.prototype.getPublicKeyB64 = function () {\n        // Return the private representation of this key.\n        return this.getKey().getPublicBaseKeyB64();\n    };\n    JSEncrypt.version = \"3.2.1\";\n    return JSEncrypt;\n}());\nexport { JSEncrypt };\n"]}