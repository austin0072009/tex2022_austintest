{"version":3,"sources":["assets\\Script\\modules\\@mogafa\\fairygui-component\\lib\\analytics\\mogafa\\mogafaCommonEventParameter.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"/","sourcesContent":["import CommonEventParameter from \"../commonEventParameter\";\nimport ReportableObject from \"../reportableObject\";\nimport EventParameter from \"../EventParameter\";\n\nexport default class MogafaCommonEventParameter implements CommonEventParameter {\n    appId: string;\n    appsflyerId: string;\n    adId: string;\n    userId: string;\n    deviceModel: string;\n    requestId: string;\n    os: string;\n    osVersion: string;\n    deviceTimezone: string;\n    deviceLanguage: string;\n    clientVersion: string;\n    network: string;\n    natural: boolean;\n    events: ReportableObject[];\n    abGroup: EventParameter[];\n    extraParameters: EventParameter[];\n    constructor(\n        appId: string,\n        requestId: string,\n        userId: string,\n        os: string,\n        osVersion: string,\n        deviceModel: string,\n        deviceLanguage: string,\n        deviceTimezone: string,\n        clientVersion: string,\n        network: string,\n        natural: boolean,\n        abGroup: EventParameter[],\n        appsflyerId: string,\n        adId: string\n    ) {\n        this.appId = appId;\n        this.requestId = requestId;\n        this.userId = userId;\n        this.os = os;\n        this.osVersion = osVersion;\n        this.deviceModel = deviceModel;\n        this.deviceLanguage = deviceLanguage;\n        this.deviceTimezone = deviceTimezone;\n        this.clientVersion = clientVersion;\n        this.network = network;\n        this.natural = natural;\n        this.abGroup = abGroup;\n        if (!this.abGroup) {\n            this.abGroup = [];\n        }\n        this.appsflyerId = appsflyerId;\n        this.adId = adId;\n        this.extraParameters = [];\n        this.events = [];\n    }\n    addEventParameters(...parameters: EventParameter[]): void {\n        for (let i = 0; i < parameters.length; i++) {\n            this.extraParameters.push(parameters[i]);\n        }\n    }\n    addAbGroupParameters(...parameters: EventParameter[]): void {\n        for (let i = 0; i < parameters.length; i++) {\n            this.abGroup.push(parameters[i]);\n        }\n    }\n    addEvent(event: ReportableObject): void {\n        if (event) {\n            this.events.push(event);\n        }\n    }\n    clearEvents(): void {\n        this.events = [];\n    }\n    toEventParameters(...parameterNames: string[]): EventParameter[] {\n        let parameters: EventParameter[] = [];\n        for (let propertyName in this) {\n            var property = this[propertyName];\n            if (typeof property == \"function\" || parameterNames.indexOf(propertyName) === -1) {\n                continue;\n            }\n            if (Array.isArray(property)) {\n                parameters.push(new EventParameter(propertyName, JSON.stringify(property)));\n            } else {\n                parameters.push(new EventParameter(propertyName, property));\n            }\n        }\n        return parameters;\n    }\n}\n"]}