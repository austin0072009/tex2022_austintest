{"version":3,"sources":["assets\\Script\\modules\\@mogafa\\slots\\lib\\WaitingResultsCell.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"/","sourcesContent":["import FifoQueue from \"./FifoQueue\";\nimport { WaitingResultsSpinStatus } from \"./WaitingResultsSpinStatus\";\nimport { SymbolBoardConst } from \"./SymbolBoard/SymbolBoardConst\";\nimport NumberUtils from \"../../utils/lib/NumberUtils\";\n\nexport default class WaitingResultsCell {\n    private _maxCode: number;\n    private _stopCode: number;\n    private _finalCode: number;\n    private _randomCodes: FifoQueue<number>;\n    private _spinStatus: WaitingResultsSpinStatus;\n    private _theNextCode: number;\n    private _excludeCodes: number[] = [];\n    private _fixed: boolean;\n    private _isHoldWin: boolean;\n    private _holdWinShowing: boolean;\n    private _timer: number;\n    constructor(maxCode: number) {\n        this._maxCode = maxCode;\n        this._randomCodes = new FifoQueue<number>();\n        this._randomCodes.enqueue(NumberUtils.random(0, maxCode));\n        this._theNextCode = this.randomCode;\n        this._isHoldWin = false;\n        this._holdWinShowing = false;\n        this._spinStatus = WaitingResultsSpinStatus.Normal;\n    }\n    get maxCode(): number {\n        return this._maxCode;\n    }\n    get spinStatus(): WaitingResultsSpinStatus {\n        return this._spinStatus;\n    }\n    set spinStatus(value: WaitingResultsSpinStatus) {\n        this._spinStatus = value;\n    }\n    get theNextCode(): number {\n        return this._theNextCode;\n    }\n    public nextCode(): void {\n        this._theNextCode = this.randomCode;\n    }\n    get randomCode(): number {\n        let code = this._randomCodes.dequeue();\n        if (this._spinStatus != WaitingResultsSpinStatus.Stopping) {\n            this._randomCodes.enqueue(NumberUtils.random(0, this._maxCode, this._excludeCodes));\n        }\n        return code;\n    }\n    public get excludeCodes(): number[] {\n        return this._excludeCodes;\n    }\n    public set excludeCodes(value: number[]) {\n        this._excludeCodes = value;\n        if (!this._excludeCodes) {\n            this._excludeCodes = [];\n        }\n        if (this._excludeCodes.find((c) => c == this._theNextCode) != null) {\n            this._theNextCode = this.randomCode;\n        }\n    }\n    get fixed(): boolean {\n        return this._fixed;\n    }\n    set fixed(value: boolean) {\n        this._fixed = value;\n    }\n    get isHoldWin(): boolean {\n        return this._isHoldWin;\n    }\n    set isHoldWin(value: boolean) {\n        this._isHoldWin = value;\n    }\n    get holdWinShowing(): boolean {\n        return this._holdWinShowing;\n    }\n    set holdWinShowing(value: boolean) {\n        this._holdWinShowing = value;\n    }\n    get timer(): any {\n        return this._timer;\n    }\n    set timer(value: any) {\n        this._timer = value;\n    }\n    public pushStopCode(code: number): void {\n        this._randomCodes.clear();\n        this._randomCodes.enqueue(code + SymbolBoardConst.FINAL_CODE_OFFSET);\n        this._randomCodes.enqueue(NumberUtils.random(0, this._maxCode, this._excludeCodes));\n        this._spinStatus = WaitingResultsSpinStatus.Stopping;\n    }\n    public reset(): void {\n        this._randomCodes.clear();\n        this._randomCodes.enqueue(NumberUtils.random(0, this.maxCode));\n        this._randomCodes.enqueue(NumberUtils.random(0, this._maxCode, this._excludeCodes));\n        this.nextCode();\n        this._theNextCode = this.randomCode;\n        this.isHoldWin = false;\n        this.holdWinShowing = false;\n        this.spinStatus = WaitingResultsSpinStatus.Normal;\n    }\n}\n"]}