{"version":3,"sources":["assets\\Script\\Encrypt\\lib\\jsbn\\util.js"],"names":["BI_RM","int2char","n","charAt","op_and","x","y","op_or","op_xor","op_andnot","lbit","r","cbit"],"mappings":";;;;;;;;;;;;;;AAAA,IAAIA,KAAK,GAAG,sCAAZ;;AACO,SAASC,QAAT,CAAkBC,CAAlB,EAAqB;AACxB,SAAOF,KAAK,CAACG,MAAN,CAAaD,CAAb,CAAP;AACH,EACD;AACA;;;AACO,SAASE,MAAT,CAAgBC,CAAhB,EAAmBC,CAAnB,EAAsB;AACzB,SAAOD,CAAC,GAAGC,CAAX;AACH,EACD;;;AACO,SAASC,KAAT,CAAeF,CAAf,EAAkBC,CAAlB,EAAqB;AACxB,SAAOD,CAAC,GAAGC,CAAX;AACH,EACD;;;AACO,SAASE,MAAT,CAAgBH,CAAhB,EAAmBC,CAAnB,EAAsB;AACzB,SAAOD,CAAC,GAAGC,CAAX;AACH,EACD;;;AACO,SAASG,SAAT,CAAmBJ,CAAnB,EAAsBC,CAAtB,EAAyB;AAC5B,SAAOD,CAAC,GAAG,CAACC,CAAZ;AACH,EACD;;;AACO,SAASI,IAAT,CAAcL,CAAd,EAAiB;AACpB,MAAIA,CAAC,IAAI,CAAT,EAAY;AACR,WAAO,CAAC,CAAR;AACH;;AACD,MAAIM,CAAC,GAAG,CAAR;;AACA,MAAI,CAACN,CAAC,GAAG,MAAL,KAAgB,CAApB,EAAuB;AACnBA,IAAAA,CAAC,KAAK,EAAN;AACAM,IAAAA,CAAC,IAAI,EAAL;AACH;;AACD,MAAI,CAACN,CAAC,GAAG,IAAL,KAAc,CAAlB,EAAqB;AACjBA,IAAAA,CAAC,KAAK,CAAN;AACAM,IAAAA,CAAC,IAAI,CAAL;AACH;;AACD,MAAI,CAACN,CAAC,GAAG,GAAL,KAAa,CAAjB,EAAoB;AAChBA,IAAAA,CAAC,KAAK,CAAN;AACAM,IAAAA,CAAC,IAAI,CAAL;AACH;;AACD,MAAI,CAACN,CAAC,GAAG,CAAL,KAAW,CAAf,EAAkB;AACdA,IAAAA,CAAC,KAAK,CAAN;AACAM,IAAAA,CAAC,IAAI,CAAL;AACH;;AACD,MAAI,CAACN,CAAC,GAAG,CAAL,KAAW,CAAf,EAAkB;AACd,MAAEM,CAAF;AACH;;AACD,SAAOA,CAAP;AACH,EACD;;;AACO,SAASC,IAAT,CAAcP,CAAd,EAAiB;AACpB,MAAIM,CAAC,GAAG,CAAR;;AACA,SAAON,CAAC,IAAI,CAAZ,EAAe;AACXA,IAAAA,CAAC,IAAIA,CAAC,GAAG,CAAT;AACA,MAAEM,CAAF;AACH;;AACD,SAAOA,CAAP;AACH,EACD","sourceRoot":"/","sourcesContent":["var BI_RM = \"0123456789abcdefghijklmnopqrstuvwxyz\";\nexport function int2char(n) {\n    return BI_RM.charAt(n);\n}\n//#region BIT_OPERATIONS\n// (public) this & a\nexport function op_and(x, y) {\n    return x & y;\n}\n// (public) this | a\nexport function op_or(x, y) {\n    return x | y;\n}\n// (public) this ^ a\nexport function op_xor(x, y) {\n    return x ^ y;\n}\n// (public) this & ~a\nexport function op_andnot(x, y) {\n    return x & ~y;\n}\n// return index of lowest 1-bit in x, x < 2^31\nexport function lbit(x) {\n    if (x == 0) {\n        return -1;\n    }\n    var r = 0;\n    if ((x & 0xffff) == 0) {\n        x >>= 16;\n        r += 16;\n    }\n    if ((x & 0xff) == 0) {\n        x >>= 8;\n        r += 8;\n    }\n    if ((x & 0xf) == 0) {\n        x >>= 4;\n        r += 4;\n    }\n    if ((x & 3) == 0) {\n        x >>= 2;\n        r += 2;\n    }\n    if ((x & 1) == 0) {\n        ++r;\n    }\n    return r;\n}\n// return number of 1 bits in x\nexport function cbit(x) {\n    var r = 0;\n    while (x != 0) {\n        x &= x - 1;\n        ++r;\n    }\n    return r;\n}\n//#endregion BIT_OPERATIONS\n"]}